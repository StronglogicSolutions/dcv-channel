// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: extensions.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "extensions.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dcv {
namespace extensions {

namespace {

const ::google::protobuf::Descriptor* SoftwareInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoftwareInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoftwareInfo_VersionNumber_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoftwareInfo_VersionNumber_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rect_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamingViews_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamingViews_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamingViews_StreamingView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamingViews_StreamingView_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDcvInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDcvInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetManifestRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetManifestRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetupVirtualChannelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetupVirtualChannelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseVirtualChannelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseVirtualChannelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetCursorPointRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetCursorPointRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStreamingViewsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStreamingViewsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsPointInsideStreamingViewsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsPointInsideStreamingViewsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDcvInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDcvInfoResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GetDcvInfoResponse_DcvRole_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetManifestResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetManifestResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetupVirtualChannelResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetupVirtualChannelResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseVirtualChannelResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseVirtualChannelResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetCursorPointResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetCursorPointResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStreamingViewsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStreamingViewsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsPointInsideStreamingViewsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsPointInsideStreamingViewsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* VirtualChannelReadyEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VirtualChannelReadyEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* VirtualChannelClosedEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VirtualChannelClosedEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamingViewsChangedEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamingViewsChangedEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
struct RequestOneofInstance {
  const ::dcv::extensions::GetDcvInfoRequest* get_dcv_info_request_;
  const ::dcv::extensions::GetManifestRequest* get_manifest_request_;
  const ::dcv::extensions::SetupVirtualChannelRequest* setup_virtual_channel_request_;
  const ::dcv::extensions::CloseVirtualChannelRequest* close_virtual_channel_request_;
  const ::dcv::extensions::SetCursorPointRequest* set_cursor_point_request_;
  const ::dcv::extensions::GetStreamingViewsRequest* get_streaming_views_request_;
  const ::dcv::extensions::IsPointInsideStreamingViewsRequest* is_point_inside_streaming_views_request_;
}* Request_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
struct ResponseOneofInstance {
  const ::dcv::extensions::GetDcvInfoResponse* get_dcv_info_response_;
  const ::dcv::extensions::GetManifestResponse* get_manifest_response_;
  const ::dcv::extensions::SetupVirtualChannelResponse* setup_virtual_channel_response_;
  const ::dcv::extensions::CloseVirtualChannelResponse* close_virtual_channel_response_;
  const ::dcv::extensions::SetCursorPointResponse* set_cursor_point_response_;
  const ::dcv::extensions::GetStreamingViewsResponse* get_streaming_views_response_;
  const ::dcv::extensions::IsPointInsideStreamingViewsResponse* is_point_inside_streaming_views_response_;
}* Response_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* Response_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
struct EventOneofInstance {
  const ::dcv::extensions::VirtualChannelReadyEvent* virtual_channel_ready_event_;
  const ::dcv::extensions::VirtualChannelClosedEvent* virtual_channel_closed_event_;
  const ::dcv::extensions::StreamingViewsChangedEvent* streaming_views_changed_event_;
}* Event_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ExtensionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtensionMessage_reflection_ = NULL;
struct ExtensionMessageOneofInstance {
  const ::dcv::extensions::Request* request_;
}* ExtensionMessage_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* DcvMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DcvMessage_reflection_ = NULL;
struct DcvMessageOneofInstance {
  const ::dcv::extensions::Response* response_;
  const ::dcv::extensions::Event* event_;
}* DcvMessage_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_extensions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_extensions_2eproto() {
  protobuf_AddDesc_extensions_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "extensions.proto");
  GOOGLE_CHECK(file != NULL);
  SoftwareInfo_descriptor_ = file->message_type(0);
  static const int SoftwareInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, arch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, hostname_),
  };
  SoftwareInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SoftwareInfo_descriptor_,
      SoftwareInfo::default_instance_,
      SoftwareInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(SoftwareInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo, _is_default_instance_));
  SoftwareInfo_VersionNumber_descriptor_ = SoftwareInfo_descriptor_->nested_type(0);
  static const int SoftwareInfo_VersionNumber_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo_VersionNumber, major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo_VersionNumber, minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo_VersionNumber, revision_),
  };
  SoftwareInfo_VersionNumber_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SoftwareInfo_VersionNumber_descriptor_,
      SoftwareInfo_VersionNumber::default_instance_,
      SoftwareInfo_VersionNumber_offsets_,
      -1,
      -1,
      -1,
      sizeof(SoftwareInfo_VersionNumber),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo_VersionNumber, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoftwareInfo_VersionNumber, _is_default_instance_));
  Point_descriptor_ = file->message_type(1);
  static const int Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  };
  Point_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      -1,
      -1,
      -1,
      sizeof(Point),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _is_default_instance_));
  Rect_descriptor_ = file->message_type(2);
  static const int Rect_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, height_),
  };
  Rect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Rect_descriptor_,
      Rect::default_instance_,
      Rect_offsets_,
      -1,
      -1,
      -1,
      sizeof(Rect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, _is_default_instance_));
  StreamingViews_descriptor_ = file->message_type(3);
  static const int StreamingViews_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingViews, streaming_view_),
  };
  StreamingViews_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StreamingViews_descriptor_,
      StreamingViews::default_instance_,
      StreamingViews_offsets_,
      -1,
      -1,
      -1,
      sizeof(StreamingViews),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingViews, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingViews, _is_default_instance_));
  StreamingViews_StreamingView_descriptor_ = StreamingViews_descriptor_->nested_type(0);
  static const int StreamingViews_StreamingView_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingViews_StreamingView, view_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingViews_StreamingView, local_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingViews_StreamingView, zoom_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingViews_StreamingView, remote_offset_),
  };
  StreamingViews_StreamingView_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StreamingViews_StreamingView_descriptor_,
      StreamingViews_StreamingView::default_instance_,
      StreamingViews_StreamingView_offsets_,
      -1,
      -1,
      -1,
      sizeof(StreamingViews_StreamingView),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingViews_StreamingView, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingViews_StreamingView, _is_default_instance_));
  GetDcvInfoRequest_descriptor_ = file->message_type(4);
  static const int GetDcvInfoRequest_offsets_[1] = {
  };
  GetDcvInfoRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetDcvInfoRequest_descriptor_,
      GetDcvInfoRequest::default_instance_,
      GetDcvInfoRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetDcvInfoRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDcvInfoRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDcvInfoRequest, _is_default_instance_));
  GetManifestRequest_descriptor_ = file->message_type(5);
  static const int GetManifestRequest_offsets_[1] = {
  };
  GetManifestRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetManifestRequest_descriptor_,
      GetManifestRequest::default_instance_,
      GetManifestRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetManifestRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetManifestRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetManifestRequest, _is_default_instance_));
  SetupVirtualChannelRequest_descriptor_ = file->message_type(6);
  static const int SetupVirtualChannelRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetupVirtualChannelRequest, virtual_channel_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetupVirtualChannelRequest, relay_client_process_id_),
  };
  SetupVirtualChannelRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetupVirtualChannelRequest_descriptor_,
      SetupVirtualChannelRequest::default_instance_,
      SetupVirtualChannelRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetupVirtualChannelRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetupVirtualChannelRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetupVirtualChannelRequest, _is_default_instance_));
  CloseVirtualChannelRequest_descriptor_ = file->message_type(7);
  static const int CloseVirtualChannelRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseVirtualChannelRequest, virtual_channel_name_),
  };
  CloseVirtualChannelRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CloseVirtualChannelRequest_descriptor_,
      CloseVirtualChannelRequest::default_instance_,
      CloseVirtualChannelRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CloseVirtualChannelRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseVirtualChannelRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseVirtualChannelRequest, _is_default_instance_));
  SetCursorPointRequest_descriptor_ = file->message_type(8);
  static const int SetCursorPointRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCursorPointRequest, point_),
  };
  SetCursorPointRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetCursorPointRequest_descriptor_,
      SetCursorPointRequest::default_instance_,
      SetCursorPointRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetCursorPointRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCursorPointRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCursorPointRequest, _is_default_instance_));
  GetStreamingViewsRequest_descriptor_ = file->message_type(9);
  static const int GetStreamingViewsRequest_offsets_[1] = {
  };
  GetStreamingViewsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetStreamingViewsRequest_descriptor_,
      GetStreamingViewsRequest::default_instance_,
      GetStreamingViewsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetStreamingViewsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamingViewsRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamingViewsRequest, _is_default_instance_));
  IsPointInsideStreamingViewsRequest_descriptor_ = file->message_type(10);
  static const int IsPointInsideStreamingViewsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsPointInsideStreamingViewsRequest, point_),
  };
  IsPointInsideStreamingViewsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IsPointInsideStreamingViewsRequest_descriptor_,
      IsPointInsideStreamingViewsRequest::default_instance_,
      IsPointInsideStreamingViewsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(IsPointInsideStreamingViewsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsPointInsideStreamingViewsRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsPointInsideStreamingViewsRequest, _is_default_instance_));
  GetDcvInfoResponse_descriptor_ = file->message_type(11);
  static const int GetDcvInfoResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDcvInfoResponse, dcv_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDcvInfoResponse, dcv_process_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDcvInfoResponse, server_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDcvInfoResponse, client_info_),
  };
  GetDcvInfoResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetDcvInfoResponse_descriptor_,
      GetDcvInfoResponse::default_instance_,
      GetDcvInfoResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetDcvInfoResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDcvInfoResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDcvInfoResponse, _is_default_instance_));
  GetDcvInfoResponse_DcvRole_descriptor_ = GetDcvInfoResponse_descriptor_->enum_type(0);
  GetManifestResponse_descriptor_ = file->message_type(12);
  static const int GetManifestResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetManifestResponse, manifest_path_),
  };
  GetManifestResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetManifestResponse_descriptor_,
      GetManifestResponse::default_instance_,
      GetManifestResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetManifestResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetManifestResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetManifestResponse, _is_default_instance_));
  SetupVirtualChannelResponse_descriptor_ = file->message_type(13);
  static const int SetupVirtualChannelResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetupVirtualChannelResponse, virtual_channel_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetupVirtualChannelResponse, relay_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetupVirtualChannelResponse, relay_server_process_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetupVirtualChannelResponse, virtual_channel_auth_token_),
  };
  SetupVirtualChannelResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetupVirtualChannelResponse_descriptor_,
      SetupVirtualChannelResponse::default_instance_,
      SetupVirtualChannelResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetupVirtualChannelResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetupVirtualChannelResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetupVirtualChannelResponse, _is_default_instance_));
  CloseVirtualChannelResponse_descriptor_ = file->message_type(14);
  static const int CloseVirtualChannelResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseVirtualChannelResponse, virtual_channel_name_),
  };
  CloseVirtualChannelResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CloseVirtualChannelResponse_descriptor_,
      CloseVirtualChannelResponse::default_instance_,
      CloseVirtualChannelResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CloseVirtualChannelResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseVirtualChannelResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseVirtualChannelResponse, _is_default_instance_));
  SetCursorPointResponse_descriptor_ = file->message_type(15);
  static const int SetCursorPointResponse_offsets_[1] = {
  };
  SetCursorPointResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetCursorPointResponse_descriptor_,
      SetCursorPointResponse::default_instance_,
      SetCursorPointResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetCursorPointResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCursorPointResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCursorPointResponse, _is_default_instance_));
  GetStreamingViewsResponse_descriptor_ = file->message_type(16);
  static const int GetStreamingViewsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamingViewsResponse, streaming_views_),
  };
  GetStreamingViewsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetStreamingViewsResponse_descriptor_,
      GetStreamingViewsResponse::default_instance_,
      GetStreamingViewsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetStreamingViewsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamingViewsResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStreamingViewsResponse, _is_default_instance_));
  IsPointInsideStreamingViewsResponse_descriptor_ = file->message_type(17);
  static const int IsPointInsideStreamingViewsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsPointInsideStreamingViewsResponse, view_id_),
  };
  IsPointInsideStreamingViewsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IsPointInsideStreamingViewsResponse_descriptor_,
      IsPointInsideStreamingViewsResponse::default_instance_,
      IsPointInsideStreamingViewsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(IsPointInsideStreamingViewsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsPointInsideStreamingViewsResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsPointInsideStreamingViewsResponse, _is_default_instance_));
  VirtualChannelReadyEvent_descriptor_ = file->message_type(18);
  static const int VirtualChannelReadyEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualChannelReadyEvent, virtual_channel_name_),
  };
  VirtualChannelReadyEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VirtualChannelReadyEvent_descriptor_,
      VirtualChannelReadyEvent::default_instance_,
      VirtualChannelReadyEvent_offsets_,
      -1,
      -1,
      -1,
      sizeof(VirtualChannelReadyEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualChannelReadyEvent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualChannelReadyEvent, _is_default_instance_));
  VirtualChannelClosedEvent_descriptor_ = file->message_type(19);
  static const int VirtualChannelClosedEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualChannelClosedEvent, virtual_channel_name_),
  };
  VirtualChannelClosedEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VirtualChannelClosedEvent_descriptor_,
      VirtualChannelClosedEvent::default_instance_,
      VirtualChannelClosedEvent_offsets_,
      -1,
      -1,
      -1,
      sizeof(VirtualChannelClosedEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualChannelClosedEvent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualChannelClosedEvent, _is_default_instance_));
  StreamingViewsChangedEvent_descriptor_ = file->message_type(20);
  static const int StreamingViewsChangedEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingViewsChangedEvent, streaming_views_),
  };
  StreamingViewsChangedEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StreamingViewsChangedEvent_descriptor_,
      StreamingViewsChangedEvent::default_instance_,
      StreamingViewsChangedEvent_offsets_,
      -1,
      -1,
      -1,
      sizeof(StreamingViewsChangedEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingViewsChangedEvent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamingViewsChangedEvent, _is_default_instance_));
  Request_descriptor_ = file->message_type(21);
  static const int Request_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, request_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, get_dcv_info_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, get_manifest_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, setup_virtual_channel_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, close_virtual_channel_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, set_cursor_point_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, get_streaming_views_request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, is_point_inside_streaming_views_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, request_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      -1,
      -1,
      -1,
      Request_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _oneof_case_[0]),
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _is_default_instance_));
  Response_descriptor_ = file->message_type(22);
  static const int Response_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, status_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, get_dcv_info_response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, get_manifest_response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, setup_virtual_channel_response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, close_virtual_channel_response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, set_cursor_point_response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, get_streaming_views_response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, is_point_inside_streaming_views_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, response_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      -1,
      -1,
      -1,
      Response_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _oneof_case_[0]),
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _is_default_instance_));
  Response_Status_descriptor_ = Response_descriptor_->enum_type(0);
  Event_descriptor_ = file->message_type(23);
  static const int Event_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Event_default_oneof_instance_, virtual_channel_ready_event_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Event_default_oneof_instance_, virtual_channel_closed_event_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Event_default_oneof_instance_, streaming_views_changed_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, event_),
  };
  Event_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      -1,
      -1,
      -1,
      Event_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _oneof_case_[0]),
      sizeof(Event),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _is_default_instance_));
  ExtensionMessage_descriptor_ = file->message_type(24);
  static const int ExtensionMessage_offsets_[2] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ExtensionMessage_default_oneof_instance_, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtensionMessage, msg_),
  };
  ExtensionMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExtensionMessage_descriptor_,
      ExtensionMessage::default_instance_,
      ExtensionMessage_offsets_,
      -1,
      -1,
      -1,
      ExtensionMessage_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtensionMessage, _oneof_case_[0]),
      sizeof(ExtensionMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtensionMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtensionMessage, _is_default_instance_));
  DcvMessage_descriptor_ = file->message_type(25);
  static const int DcvMessage_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DcvMessage_default_oneof_instance_, response_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DcvMessage_default_oneof_instance_, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DcvMessage, msg_),
  };
  DcvMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DcvMessage_descriptor_,
      DcvMessage::default_instance_,
      DcvMessage_offsets_,
      -1,
      -1,
      -1,
      DcvMessage_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DcvMessage, _oneof_case_[0]),
      sizeof(DcvMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DcvMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DcvMessage, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_extensions_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SoftwareInfo_descriptor_, &SoftwareInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SoftwareInfo_VersionNumber_descriptor_, &SoftwareInfo_VersionNumber::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Rect_descriptor_, &Rect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StreamingViews_descriptor_, &StreamingViews::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StreamingViews_StreamingView_descriptor_, &StreamingViews_StreamingView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetDcvInfoRequest_descriptor_, &GetDcvInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetManifestRequest_descriptor_, &GetManifestRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetupVirtualChannelRequest_descriptor_, &SetupVirtualChannelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CloseVirtualChannelRequest_descriptor_, &CloseVirtualChannelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetCursorPointRequest_descriptor_, &SetCursorPointRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetStreamingViewsRequest_descriptor_, &GetStreamingViewsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IsPointInsideStreamingViewsRequest_descriptor_, &IsPointInsideStreamingViewsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetDcvInfoResponse_descriptor_, &GetDcvInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetManifestResponse_descriptor_, &GetManifestResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetupVirtualChannelResponse_descriptor_, &SetupVirtualChannelResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CloseVirtualChannelResponse_descriptor_, &CloseVirtualChannelResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetCursorPointResponse_descriptor_, &SetCursorPointResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetStreamingViewsResponse_descriptor_, &GetStreamingViewsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IsPointInsideStreamingViewsResponse_descriptor_, &IsPointInsideStreamingViewsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VirtualChannelReadyEvent_descriptor_, &VirtualChannelReadyEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VirtualChannelClosedEvent_descriptor_, &VirtualChannelClosedEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StreamingViewsChangedEvent_descriptor_, &StreamingViewsChangedEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Event_descriptor_, &Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExtensionMessage_descriptor_, &ExtensionMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DcvMessage_descriptor_, &DcvMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_extensions_2eproto() {
  delete SoftwareInfo::default_instance_;
  delete SoftwareInfo_reflection_;
  delete SoftwareInfo_VersionNumber::default_instance_;
  delete SoftwareInfo_VersionNumber_reflection_;
  delete Point::default_instance_;
  delete Point_reflection_;
  delete Rect::default_instance_;
  delete Rect_reflection_;
  delete StreamingViews::default_instance_;
  delete StreamingViews_reflection_;
  delete StreamingViews_StreamingView::default_instance_;
  delete StreamingViews_StreamingView_reflection_;
  delete GetDcvInfoRequest::default_instance_;
  delete GetDcvInfoRequest_reflection_;
  delete GetManifestRequest::default_instance_;
  delete GetManifestRequest_reflection_;
  delete SetupVirtualChannelRequest::default_instance_;
  delete SetupVirtualChannelRequest_reflection_;
  delete CloseVirtualChannelRequest::default_instance_;
  delete CloseVirtualChannelRequest_reflection_;
  delete SetCursorPointRequest::default_instance_;
  delete SetCursorPointRequest_reflection_;
  delete GetStreamingViewsRequest::default_instance_;
  delete GetStreamingViewsRequest_reflection_;
  delete IsPointInsideStreamingViewsRequest::default_instance_;
  delete IsPointInsideStreamingViewsRequest_reflection_;
  delete GetDcvInfoResponse::default_instance_;
  delete GetDcvInfoResponse_reflection_;
  delete GetManifestResponse::default_instance_;
  delete GetManifestResponse_reflection_;
  delete SetupVirtualChannelResponse::default_instance_;
  delete SetupVirtualChannelResponse_reflection_;
  delete CloseVirtualChannelResponse::default_instance_;
  delete CloseVirtualChannelResponse_reflection_;
  delete SetCursorPointResponse::default_instance_;
  delete SetCursorPointResponse_reflection_;
  delete GetStreamingViewsResponse::default_instance_;
  delete GetStreamingViewsResponse_reflection_;
  delete IsPointInsideStreamingViewsResponse::default_instance_;
  delete IsPointInsideStreamingViewsResponse_reflection_;
  delete VirtualChannelReadyEvent::default_instance_;
  delete VirtualChannelReadyEvent_reflection_;
  delete VirtualChannelClosedEvent::default_instance_;
  delete VirtualChannelClosedEvent_reflection_;
  delete StreamingViewsChangedEvent::default_instance_;
  delete StreamingViewsChangedEvent_reflection_;
  delete Request::default_instance_;
  delete Request_default_oneof_instance_;
  delete Request_reflection_;
  delete Response::default_instance_;
  delete Response_default_oneof_instance_;
  delete Response_reflection_;
  delete Event::default_instance_;
  delete Event_default_oneof_instance_;
  delete Event_reflection_;
  delete ExtensionMessage::default_instance_;
  delete ExtensionMessage_default_oneof_instance_;
  delete ExtensionMessage_reflection_;
  delete DcvMessage::default_instance_;
  delete DcvMessage_default_oneof_instance_;
  delete DcvMessage_reflection_;
}

void protobuf_AddDesc_extensions_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_extensions_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020extensions.proto\022\016dcv.extensions\"\306\001\n\014S"
    "oftwareInfo\022\014\n\004name\030\001 \001(\t\022;\n\007version\030\002 \001"
    "(\0132*.dcv.extensions.SoftwareInfo.Version"
    "Number\022\n\n\002os\030\003 \001(\t\022\014\n\004arch\030\004 \001(\t\022\020\n\010host"
    "name\030\005 \001(\t\032\?\n\rVersionNumber\022\r\n\005major\030\001 \001"
    "(\r\022\r\n\005minor\030\002 \001(\r\022\020\n\010revision\030\003 \001(\r\"\035\n\005P"
    "oint\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\";\n\004Rect\022\t\n\001x\030"
    "\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\r\n\005width\030\003 \001(\r\022\016\n\006heigh"
    "t\030\004 \001(\r\"\346\001\n\016StreamingViews\022D\n\016streaming_"
    "view\030\001 \003(\0132,.dcv.extensions.StreamingVie"
    "ws.StreamingView\032\215\001\n\rStreamingView\022\017\n\007vi"
    "ew_id\030\001 \001(\005\022(\n\nlocal_area\030\002 \001(\0132\024.dcv.ex"
    "tensions.Rect\022\023\n\013zoom_factor\030\003 \001(\001\022,\n\rre"
    "mote_offset\030\004 \001(\0132\025.dcv.extensions.Point"
    "\"\023\n\021GetDcvInfoRequest\"\024\n\022GetManifestRequ"
    "est\"[\n\032SetupVirtualChannelRequest\022\034\n\024vir"
    "tual_channel_name\030\001 \001(\t\022\037\n\027relay_client_"
    "process_id\030\002 \001(\003\":\n\032CloseVirtualChannelR"
    "equest\022\034\n\024virtual_channel_name\030\001 \001(\t\"=\n\025"
    "SetCursorPointRequest\022$\n\005point\030\001 \001(\0132\025.d"
    "cv.extensions.Point\"\032\n\030GetStreamingViews"
    "Request\"J\n\"IsPointInsideStreamingViewsRe"
    "quest\022$\n\005point\030\001 \001(\0132\025.dcv.extensions.Po"
    "int\"\363\001\n\022GetDcvInfoResponse\022<\n\010dcv_role\030\001"
    " \001(\0162*.dcv.extensions.GetDcvInfoResponse"
    ".DcvRole\022\026\n\016dcv_process_id\030\002 \001(\003\0221\n\013serv"
    "er_info\030\003 \001(\0132\034.dcv.extensions.SoftwareI"
    "nfo\0221\n\013client_info\030\004 \001(\0132\034.dcv.extension"
    "s.SoftwareInfo\"!\n\007DcvRole\022\n\n\006Server\020\000\022\n\n"
    "\006Client\020\001\",\n\023GetManifestResponse\022\025\n\rmani"
    "fest_path\030\001 \001(\t\"\224\001\n\033SetupVirtualChannelR"
    "esponse\022\034\n\024virtual_channel_name\030\001 \001(\t\022\022\n"
    "\nrelay_path\030\002 \001(\t\022\037\n\027relay_server_proces"
    "s_id\030\003 \001(\003\022\"\n\032virtual_channel_auth_token"
    "\030\004 \001(\014\";\n\033CloseVirtualChannelResponse\022\034\n"
    "\024virtual_channel_name\030\001 \001(\t\"\030\n\026SetCursor"
    "PointResponse\"T\n\031GetStreamingViewsRespon"
    "se\0227\n\017streaming_views\030\001 \001(\0132\036.dcv.extens"
    "ions.StreamingViews\"6\n#IsPointInsideStre"
    "amingViewsResponse\022\017\n\007view_id\030\001 \001(\005\"8\n\030V"
    "irtualChannelReadyEvent\022\034\n\024virtual_chann"
    "el_name\030\001 \001(\t\"9\n\031VirtualChannelClosedEve"
    "nt\022\034\n\024virtual_channel_name\030\001 \001(\t\"U\n\032Stre"
    "amingViewsChangedEvent\0227\n\017streaming_view"
    "s\030\001 \001(\0132\036.dcv.extensions.StreamingViews\""
    "\334\004\n\007Request\022\022\n\nrequest_id\030\001 \001(\t\022A\n\024get_d"
    "cv_info_request\030\n \001(\0132!.dcv.extensions.G"
    "etDcvInfoRequestH\000\022B\n\024get_manifest_reque"
    "st\030\013 \001(\0132\".dcv.extensions.GetManifestReq"
    "uestH\000\022S\n\035setup_virtual_channel_request\030"
    "\024 \001(\0132*.dcv.extensions.SetupVirtualChann"
    "elRequestH\000\022S\n\035close_virtual_channel_req"
    "uest\030\025 \001(\0132*.dcv.extensions.CloseVirtual"
    "ChannelRequestH\000\022I\n\030set_cursor_point_req"
    "uest\030\036 \001(\0132%.dcv.extensions.SetCursorPoi"
    "ntRequestH\000\022O\n\033get_streaming_views_reque"
    "st\030\037 \001(\0132(.dcv.extensions.GetStreamingVi"
    "ewsRequestH\000\022e\n\'is_point_inside_streamin"
    "g_views_request\030  \001(\01322.dcv.extensions.I"
    "sPointInsideStreamingViewsRequestH\000B\t\n\007r"
    "equest\"\201\007\n\010Response\022\022\n\nrequest_id\030\001 \001(\t\022"
    "/\n\006status\030\002 \001(\0162\037.dcv.extensions.Respons"
    "e.Status\022C\n\025get_dcv_info_response\030\n \001(\0132"
    "\".dcv.extensions.GetDcvInfoResponseH\000\022D\n"
    "\025get_manifest_response\030\013 \001(\0132#.dcv.exten"
    "sions.GetManifestResponseH\000\022U\n\036setup_vir"
    "tual_channel_response\030\024 \001(\0132+.dcv.extens"
    "ions.SetupVirtualChannelResponseH\000\022U\n\036cl"
    "ose_virtual_channel_response\030\025 \001(\0132+.dcv"
    ".extensions.CloseVirtualChannelResponseH"
    "\000\022K\n\031set_cursor_point_response\030\036 \001(\0132&.d"
    "cv.extensions.SetCursorPointResponseH\000\022Q"
    "\n\034get_streaming_views_response\030\037 \001(\0132).d"
    "cv.extensions.GetStreamingViewsResponseH"
    "\000\022g\n(is_point_inside_streaming_views_res"
    "ponse\030  \001(\01323.dcv.extensions.IsPointInsi"
    "deStreamingViewsResponseH\000\"\341\001\n\006Status\022\010\n"
    "\004NONE\020\000\022\013\n\007SUCCESS\020\001\022\021\n\rERROR_GENERIC\020\n\022"
    "\027\n\023ERROR_ACCESS_DENIED\020\013\022\031\n\025ERROR_NOT_IM"
    "PLEMENTED\020\014\022\033\n\027ERROR_INVALID_PARAMETER\020\r"
    "\0227\n3ERROR_INVALID_VIRTUAL_CHANNEL_NAMESP"
    "ACE_IN_MANIFEST\020\016\022#\n\037ERROR_TOO_MANY_VIRT"
    "UAL_CHANNELS\020\017B\n\n\010response\"\211\002\n\005Event\022O\n\033"
    "virtual_channel_ready_event\030\n \001(\0132(.dcv."
    "extensions.VirtualChannelReadyEventH\000\022Q\n"
    "\034virtual_channel_closed_event\030\024 \001(\0132).dc"
    "v.extensions.VirtualChannelClosedEventH\000"
    "\022S\n\035streaming_views_changed_event\030\036 \001(\0132"
    "*.dcv.extensions.StreamingViewsChangedEv"
    "entH\000B\007\n\005event\"E\n\020ExtensionMessage\022*\n\007re"
    "quest\030\001 \001(\0132\027.dcv.extensions.RequestH\000B\005"
    "\n\003msg\"i\n\nDcvMessage\022,\n\010response\030\002 \001(\0132\030."
    "dcv.extensions.ResponseH\000\022&\n\005event\030\003 \001(\013"
    "2\025.dcv.extensions.EventH\000B\005\n\003msgb\006proto3", 3760);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "extensions.proto", &protobuf_RegisterTypes);
  SoftwareInfo::default_instance_ = new SoftwareInfo();
  SoftwareInfo_VersionNumber::default_instance_ = new SoftwareInfo_VersionNumber();
  Point::default_instance_ = new Point();
  Rect::default_instance_ = new Rect();
  StreamingViews::default_instance_ = new StreamingViews();
  StreamingViews_StreamingView::default_instance_ = new StreamingViews_StreamingView();
  GetDcvInfoRequest::default_instance_ = new GetDcvInfoRequest();
  GetManifestRequest::default_instance_ = new GetManifestRequest();
  SetupVirtualChannelRequest::default_instance_ = new SetupVirtualChannelRequest();
  CloseVirtualChannelRequest::default_instance_ = new CloseVirtualChannelRequest();
  SetCursorPointRequest::default_instance_ = new SetCursorPointRequest();
  GetStreamingViewsRequest::default_instance_ = new GetStreamingViewsRequest();
  IsPointInsideStreamingViewsRequest::default_instance_ = new IsPointInsideStreamingViewsRequest();
  GetDcvInfoResponse::default_instance_ = new GetDcvInfoResponse();
  GetManifestResponse::default_instance_ = new GetManifestResponse();
  SetupVirtualChannelResponse::default_instance_ = new SetupVirtualChannelResponse();
  CloseVirtualChannelResponse::default_instance_ = new CloseVirtualChannelResponse();
  SetCursorPointResponse::default_instance_ = new SetCursorPointResponse();
  GetStreamingViewsResponse::default_instance_ = new GetStreamingViewsResponse();
  IsPointInsideStreamingViewsResponse::default_instance_ = new IsPointInsideStreamingViewsResponse();
  VirtualChannelReadyEvent::default_instance_ = new VirtualChannelReadyEvent();
  VirtualChannelClosedEvent::default_instance_ = new VirtualChannelClosedEvent();
  StreamingViewsChangedEvent::default_instance_ = new StreamingViewsChangedEvent();
  Request::default_instance_ = new Request();
  Request_default_oneof_instance_ = new RequestOneofInstance();
  Response::default_instance_ = new Response();
  Response_default_oneof_instance_ = new ResponseOneofInstance();
  Event::default_instance_ = new Event();
  Event_default_oneof_instance_ = new EventOneofInstance();
  ExtensionMessage::default_instance_ = new ExtensionMessage();
  ExtensionMessage_default_oneof_instance_ = new ExtensionMessageOneofInstance();
  DcvMessage::default_instance_ = new DcvMessage();
  DcvMessage_default_oneof_instance_ = new DcvMessageOneofInstance();
  SoftwareInfo::default_instance_->InitAsDefaultInstance();
  SoftwareInfo_VersionNumber::default_instance_->InitAsDefaultInstance();
  Point::default_instance_->InitAsDefaultInstance();
  Rect::default_instance_->InitAsDefaultInstance();
  StreamingViews::default_instance_->InitAsDefaultInstance();
  StreamingViews_StreamingView::default_instance_->InitAsDefaultInstance();
  GetDcvInfoRequest::default_instance_->InitAsDefaultInstance();
  GetManifestRequest::default_instance_->InitAsDefaultInstance();
  SetupVirtualChannelRequest::default_instance_->InitAsDefaultInstance();
  CloseVirtualChannelRequest::default_instance_->InitAsDefaultInstance();
  SetCursorPointRequest::default_instance_->InitAsDefaultInstance();
  GetStreamingViewsRequest::default_instance_->InitAsDefaultInstance();
  IsPointInsideStreamingViewsRequest::default_instance_->InitAsDefaultInstance();
  GetDcvInfoResponse::default_instance_->InitAsDefaultInstance();
  GetManifestResponse::default_instance_->InitAsDefaultInstance();
  SetupVirtualChannelResponse::default_instance_->InitAsDefaultInstance();
  CloseVirtualChannelResponse::default_instance_->InitAsDefaultInstance();
  SetCursorPointResponse::default_instance_->InitAsDefaultInstance();
  GetStreamingViewsResponse::default_instance_->InitAsDefaultInstance();
  IsPointInsideStreamingViewsResponse::default_instance_->InitAsDefaultInstance();
  VirtualChannelReadyEvent::default_instance_->InitAsDefaultInstance();
  VirtualChannelClosedEvent::default_instance_->InitAsDefaultInstance();
  StreamingViewsChangedEvent::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  ExtensionMessage::default_instance_->InitAsDefaultInstance();
  DcvMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_extensions_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_extensions_2eproto {
  StaticDescriptorInitializer_extensions_2eproto() {
    protobuf_AddDesc_extensions_2eproto();
  }
} static_descriptor_initializer_extensions_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SoftwareInfo_VersionNumber::kMajorFieldNumber;
const int SoftwareInfo_VersionNumber::kMinorFieldNumber;
const int SoftwareInfo_VersionNumber::kRevisionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoftwareInfo_VersionNumber::SoftwareInfo_VersionNumber()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.SoftwareInfo.VersionNumber)
}

void SoftwareInfo_VersionNumber::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SoftwareInfo_VersionNumber::SoftwareInfo_VersionNumber(const SoftwareInfo_VersionNumber& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.SoftwareInfo.VersionNumber)
}

void SoftwareInfo_VersionNumber::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  major_ = 0u;
  minor_ = 0u;
  revision_ = 0u;
}

SoftwareInfo_VersionNumber::~SoftwareInfo_VersionNumber() {
  // @@protoc_insertion_point(destructor:dcv.extensions.SoftwareInfo.VersionNumber)
  SharedDtor();
}

void SoftwareInfo_VersionNumber::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SoftwareInfo_VersionNumber::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftwareInfo_VersionNumber::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftwareInfo_VersionNumber_descriptor_;
}

const SoftwareInfo_VersionNumber& SoftwareInfo_VersionNumber::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

SoftwareInfo_VersionNumber* SoftwareInfo_VersionNumber::default_instance_ = NULL;

SoftwareInfo_VersionNumber* SoftwareInfo_VersionNumber::New(::google::protobuf::Arena* arena) const {
  SoftwareInfo_VersionNumber* n = new SoftwareInfo_VersionNumber;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoftwareInfo_VersionNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.SoftwareInfo.VersionNumber)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SoftwareInfo_VersionNumber, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SoftwareInfo_VersionNumber*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(major_, revision_);

#undef ZR_HELPER_
#undef ZR_

}

bool SoftwareInfo_VersionNumber::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.SoftwareInfo.VersionNumber)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 major = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &major_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_minor;
        break;
      }

      // optional uint32 minor = 2;
      case 2: {
        if (tag == 16) {
         parse_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minor_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_revision;
        break;
      }

      // optional uint32 revision = 3;
      case 3: {
        if (tag == 24) {
         parse_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revision_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.SoftwareInfo.VersionNumber)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.SoftwareInfo.VersionNumber)
  return false;
#undef DO_
}

void SoftwareInfo_VersionNumber::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.SoftwareInfo.VersionNumber)
  // optional uint32 major = 1;
  if (this->major() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->major(), output);
  }

  // optional uint32 minor = 2;
  if (this->minor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minor(), output);
  }

  // optional uint32 revision = 3;
  if (this->revision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->revision(), output);
  }

  // @@protoc_insertion_point(serialize_end:dcv.extensions.SoftwareInfo.VersionNumber)
}

::google::protobuf::uint8* SoftwareInfo_VersionNumber::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.SoftwareInfo.VersionNumber)
  // optional uint32 major = 1;
  if (this->major() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->major(), target);
  }

  // optional uint32 minor = 2;
  if (this->minor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->minor(), target);
  }

  // optional uint32 revision = 3;
  if (this->revision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->revision(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.SoftwareInfo.VersionNumber)
  return target;
}

int SoftwareInfo_VersionNumber::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.SoftwareInfo.VersionNumber)
  int total_size = 0;

  // optional uint32 major = 1;
  if (this->major() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->major());
  }

  // optional uint32 minor = 2;
  if (this->minor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->minor());
  }

  // optional uint32 revision = 3;
  if (this->revision() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->revision());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftwareInfo_VersionNumber::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.SoftwareInfo.VersionNumber)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SoftwareInfo_VersionNumber* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SoftwareInfo_VersionNumber>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.SoftwareInfo.VersionNumber)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.SoftwareInfo.VersionNumber)
    MergeFrom(*source);
  }
}

void SoftwareInfo_VersionNumber::MergeFrom(const SoftwareInfo_VersionNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.SoftwareInfo.VersionNumber)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.major() != 0) {
    set_major(from.major());
  }
  if (from.minor() != 0) {
    set_minor(from.minor());
  }
  if (from.revision() != 0) {
    set_revision(from.revision());
  }
}

void SoftwareInfo_VersionNumber::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.SoftwareInfo.VersionNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftwareInfo_VersionNumber::CopyFrom(const SoftwareInfo_VersionNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.SoftwareInfo.VersionNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftwareInfo_VersionNumber::IsInitialized() const {

  return true;
}

void SoftwareInfo_VersionNumber::Swap(SoftwareInfo_VersionNumber* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoftwareInfo_VersionNumber::InternalSwap(SoftwareInfo_VersionNumber* other) {
  std::swap(major_, other->major_);
  std::swap(minor_, other->minor_);
  std::swap(revision_, other->revision_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SoftwareInfo_VersionNumber::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoftwareInfo_VersionNumber_descriptor_;
  metadata.reflection = SoftwareInfo_VersionNumber_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SoftwareInfo::kNameFieldNumber;
const int SoftwareInfo::kVersionFieldNumber;
const int SoftwareInfo::kOsFieldNumber;
const int SoftwareInfo::kArchFieldNumber;
const int SoftwareInfo::kHostnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SoftwareInfo::SoftwareInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.SoftwareInfo)
}

void SoftwareInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  version_ = const_cast< ::dcv::extensions::SoftwareInfo_VersionNumber*>(&::dcv::extensions::SoftwareInfo_VersionNumber::default_instance());
}

SoftwareInfo::SoftwareInfo(const SoftwareInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.SoftwareInfo)
}

void SoftwareInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = NULL;
  os_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SoftwareInfo::~SoftwareInfo() {
  // @@protoc_insertion_point(destructor:dcv.extensions.SoftwareInfo)
  SharedDtor();
}

void SoftwareInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete version_;
  }
}

void SoftwareInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoftwareInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoftwareInfo_descriptor_;
}

const SoftwareInfo& SoftwareInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

SoftwareInfo* SoftwareInfo::default_instance_ = NULL;

SoftwareInfo* SoftwareInfo::New(::google::protobuf::Arena* arena) const {
  SoftwareInfo* n = new SoftwareInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SoftwareInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.SoftwareInfo)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && version_ != NULL) delete version_;
  version_ = NULL;
  os_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SoftwareInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.SoftwareInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dcv.extensions.SoftwareInfo.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // optional .dcv.extensions.SoftwareInfo.VersionNumber version = 2;
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_os;
        break;
      }

      // optional string os = 3;
      case 3: {
        if (tag == 26) {
         parse_os:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dcv.extensions.SoftwareInfo.os"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_arch;
        break;
      }

      // optional string arch = 4;
      case 4: {
        if (tag == 34) {
         parse_arch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arch()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->arch().data(), this->arch().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dcv.extensions.SoftwareInfo.arch"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_hostname;
        break;
      }

      // optional string hostname = 5;
      case 5: {
        if (tag == 42) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dcv.extensions.SoftwareInfo.hostname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.SoftwareInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.SoftwareInfo)
  return false;
#undef DO_
}

void SoftwareInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.SoftwareInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.SoftwareInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .dcv.extensions.SoftwareInfo.VersionNumber version = 2;
  if (this->has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->version_, output);
  }

  // optional string os = 3;
  if (this->os().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.SoftwareInfo.os");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->os(), output);
  }

  // optional string arch = 4;
  if (this->arch().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->arch().data(), this->arch().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.SoftwareInfo.arch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->arch(), output);
  }

  // optional string hostname = 5;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.SoftwareInfo.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->hostname(), output);
  }

  // @@protoc_insertion_point(serialize_end:dcv.extensions.SoftwareInfo)
}

::google::protobuf::uint8* SoftwareInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.SoftwareInfo)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.SoftwareInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .dcv.extensions.SoftwareInfo.VersionNumber version = 2;
  if (this->has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->version_, false, target);
  }

  // optional string os = 3;
  if (this->os().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.SoftwareInfo.os");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->os(), target);
  }

  // optional string arch = 4;
  if (this->arch().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->arch().data(), this->arch().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.SoftwareInfo.arch");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->arch(), target);
  }

  // optional string hostname = 5;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.SoftwareInfo.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->hostname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.SoftwareInfo)
  return target;
}

int SoftwareInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.SoftwareInfo)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .dcv.extensions.SoftwareInfo.VersionNumber version = 2;
  if (this->has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->version_);
  }

  // optional string os = 3;
  if (this->os().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->os());
  }

  // optional string arch = 4;
  if (this->arch().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arch());
  }

  // optional string hostname = 5;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoftwareInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.SoftwareInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SoftwareInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SoftwareInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.SoftwareInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.SoftwareInfo)
    MergeFrom(*source);
  }
}

void SoftwareInfo::MergeFrom(const SoftwareInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.SoftwareInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_version()) {
    mutable_version()->::dcv::extensions::SoftwareInfo_VersionNumber::MergeFrom(from.version());
  }
  if (from.os().size() > 0) {

    os_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_);
  }
  if (from.arch().size() > 0) {

    arch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.arch_);
  }
  if (from.hostname().size() > 0) {

    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
}

void SoftwareInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.SoftwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftwareInfo::CopyFrom(const SoftwareInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.SoftwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftwareInfo::IsInitialized() const {

  return true;
}

void SoftwareInfo::Swap(SoftwareInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SoftwareInfo::InternalSwap(SoftwareInfo* other) {
  name_.Swap(&other->name_);
  std::swap(version_, other->version_);
  os_.Swap(&other->os_);
  arch_.Swap(&other->arch_);
  hostname_.Swap(&other->hostname_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SoftwareInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoftwareInfo_descriptor_;
  metadata.reflection = SoftwareInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SoftwareInfo_VersionNumber

// optional uint32 major = 1;
void SoftwareInfo_VersionNumber::clear_major() {
  major_ = 0u;
}
 ::google::protobuf::uint32 SoftwareInfo_VersionNumber::major() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.VersionNumber.major)
  return major_;
}
 void SoftwareInfo_VersionNumber::set_major(::google::protobuf::uint32 value) {
  
  major_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.VersionNumber.major)
}

// optional uint32 minor = 2;
void SoftwareInfo_VersionNumber::clear_minor() {
  minor_ = 0u;
}
 ::google::protobuf::uint32 SoftwareInfo_VersionNumber::minor() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.VersionNumber.minor)
  return minor_;
}
 void SoftwareInfo_VersionNumber::set_minor(::google::protobuf::uint32 value) {
  
  minor_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.VersionNumber.minor)
}

// optional uint32 revision = 3;
void SoftwareInfo_VersionNumber::clear_revision() {
  revision_ = 0u;
}
 ::google::protobuf::uint32 SoftwareInfo_VersionNumber::revision() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.VersionNumber.revision)
  return revision_;
}
 void SoftwareInfo_VersionNumber::set_revision(::google::protobuf::uint32 value) {
  
  revision_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.VersionNumber.revision)
}

// -------------------------------------------------------------------

// SoftwareInfo

// optional string name = 1;
void SoftwareInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SoftwareInfo::name() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SoftwareInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.name)
}
 void SoftwareInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.SoftwareInfo.name)
}
 void SoftwareInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.SoftwareInfo.name)
}
 ::std::string* SoftwareInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SoftwareInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SoftwareInfo::release_name() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SoftwareInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SoftwareInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SoftwareInfo.name)
}

// optional .dcv.extensions.SoftwareInfo.VersionNumber version = 2;
bool SoftwareInfo::has_version() const {
  return !_is_default_instance_ && version_ != NULL;
}
void SoftwareInfo::clear_version() {
  if (GetArenaNoVirtual() == NULL && version_ != NULL) delete version_;
  version_ = NULL;
}
const ::dcv::extensions::SoftwareInfo_VersionNumber& SoftwareInfo::version() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.version)
  return version_ != NULL ? *version_ : *default_instance_->version_;
}
::dcv::extensions::SoftwareInfo_VersionNumber* SoftwareInfo::mutable_version() {
  
  if (version_ == NULL) {
    version_ = new ::dcv::extensions::SoftwareInfo_VersionNumber;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SoftwareInfo.version)
  return version_;
}
::dcv::extensions::SoftwareInfo_VersionNumber* SoftwareInfo::release_version() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SoftwareInfo.version)
  
  ::dcv::extensions::SoftwareInfo_VersionNumber* temp = version_;
  version_ = NULL;
  return temp;
}
void SoftwareInfo::set_allocated_version(::dcv::extensions::SoftwareInfo_VersionNumber* version) {
  delete version_;
  version_ = version;
  if (version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SoftwareInfo.version)
}

// optional string os = 3;
void SoftwareInfo::clear_os() {
  os_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SoftwareInfo::os() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.os)
  return os_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SoftwareInfo::set_os(const ::std::string& value) {
  
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.os)
}
 void SoftwareInfo::set_os(const char* value) {
  
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.SoftwareInfo.os)
}
 void SoftwareInfo::set_os(const char* value, size_t size) {
  
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.SoftwareInfo.os)
}
 ::std::string* SoftwareInfo::mutable_os() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SoftwareInfo.os)
  return os_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SoftwareInfo::release_os() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SoftwareInfo.os)
  
  return os_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SoftwareInfo::set_allocated_os(::std::string* os) {
  if (os != NULL) {
    
  } else {
    
  }
  os_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SoftwareInfo.os)
}

// optional string arch = 4;
void SoftwareInfo::clear_arch() {
  arch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SoftwareInfo::arch() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.arch)
  return arch_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SoftwareInfo::set_arch(const ::std::string& value) {
  
  arch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.arch)
}
 void SoftwareInfo::set_arch(const char* value) {
  
  arch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.SoftwareInfo.arch)
}
 void SoftwareInfo::set_arch(const char* value, size_t size) {
  
  arch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.SoftwareInfo.arch)
}
 ::std::string* SoftwareInfo::mutable_arch() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SoftwareInfo.arch)
  return arch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SoftwareInfo::release_arch() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SoftwareInfo.arch)
  
  return arch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SoftwareInfo::set_allocated_arch(::std::string* arch) {
  if (arch != NULL) {
    
  } else {
    
  }
  arch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arch);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SoftwareInfo.arch)
}

// optional string hostname = 5;
void SoftwareInfo::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SoftwareInfo::hostname() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.hostname)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SoftwareInfo::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.hostname)
}
 void SoftwareInfo::set_hostname(const char* value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.SoftwareInfo.hostname)
}
 void SoftwareInfo::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.SoftwareInfo.hostname)
}
 ::std::string* SoftwareInfo::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SoftwareInfo.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SoftwareInfo::release_hostname() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SoftwareInfo.hostname)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SoftwareInfo::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SoftwareInfo.hostname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.Point)
}

void Point::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Point::Point(const Point& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.Point)
}

void Point::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:dcv.extensions.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.Point)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Point, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Point*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.Point)
  // optional int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:dcv.extensions.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.Point)
  // optional int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.Point)
  return target;
}

int Point::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.Point)
  int total_size = 0;

  // optional int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Point* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {

  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// optional int32 x = 1;
void Point::clear_x() {
  x_ = 0;
}
 ::google::protobuf::int32 Point::x() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Point.x)
  return x_;
}
 void Point::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.Point.x)
}

// optional int32 y = 2;
void Point::clear_y() {
  y_ = 0;
}
 ::google::protobuf::int32 Point::y() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Point.y)
  return y_;
}
 void Point::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.Point.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rect::kXFieldNumber;
const int Rect::kYFieldNumber;
const int Rect::kWidthFieldNumber;
const int Rect::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rect::Rect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.Rect)
}

void Rect::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Rect::Rect(const Rect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.Rect)
}

void Rect::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  width_ = 0u;
  height_ = 0u;
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:dcv.extensions.Rect)
  SharedDtor();
}

void Rect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Rect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rect_descriptor_;
}

const Rect& Rect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

Rect* Rect::default_instance_ = NULL;

Rect* Rect::New(::google::protobuf::Arena* arena) const {
  Rect* n = new Rect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.Rect)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Rect, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Rect*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, height_);

#undef ZR_HELPER_
#undef ZR_

}

bool Rect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.Rect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // optional uint32 width = 3;
      case 3: {
        if (tag == 24) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_height;
        break;
      }

      // optional uint32 height = 4;
      case 4: {
        if (tag == 32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.Rect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.Rect)
  return false;
#undef DO_
}

void Rect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.Rect)
  // optional int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional uint32 width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->width(), output);
  }

  // optional uint32 height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:dcv.extensions.Rect)
}

::google::protobuf::uint8* Rect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.Rect)
  // optional int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional uint32 width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->width(), target);
  }

  // optional uint32 height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->height(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.Rect)
  return target;
}

int Rect::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.Rect)
  int total_size = 0;

  // optional int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // optional int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // optional uint32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  // optional uint32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.Rect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Rect* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Rect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.Rect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.Rect)
    MergeFrom(*source);
  }
}

void Rect::MergeFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.Rect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void Rect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect::CopyFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect::IsInitialized() const {

  return true;
}

void Rect::Swap(Rect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rect::InternalSwap(Rect* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rect_descriptor_;
  metadata.reflection = Rect_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rect

// optional int32 x = 1;
void Rect::clear_x() {
  x_ = 0;
}
 ::google::protobuf::int32 Rect::x() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Rect.x)
  return x_;
}
 void Rect::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.Rect.x)
}

// optional int32 y = 2;
void Rect::clear_y() {
  y_ = 0;
}
 ::google::protobuf::int32 Rect::y() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Rect.y)
  return y_;
}
 void Rect::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.Rect.y)
}

// optional uint32 width = 3;
void Rect::clear_width() {
  width_ = 0u;
}
 ::google::protobuf::uint32 Rect::width() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Rect.width)
  return width_;
}
 void Rect::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.Rect.width)
}

// optional uint32 height = 4;
void Rect::clear_height() {
  height_ = 0u;
}
 ::google::protobuf::uint32 Rect::height() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Rect.height)
  return height_;
}
 void Rect::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.Rect.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingViews_StreamingView::kViewIdFieldNumber;
const int StreamingViews_StreamingView::kLocalAreaFieldNumber;
const int StreamingViews_StreamingView::kZoomFactorFieldNumber;
const int StreamingViews_StreamingView::kRemoteOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingViews_StreamingView::StreamingViews_StreamingView()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.StreamingViews.StreamingView)
}

void StreamingViews_StreamingView::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  local_area_ = const_cast< ::dcv::extensions::Rect*>(&::dcv::extensions::Rect::default_instance());
  remote_offset_ = const_cast< ::dcv::extensions::Point*>(&::dcv::extensions::Point::default_instance());
}

StreamingViews_StreamingView::StreamingViews_StreamingView(const StreamingViews_StreamingView& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.StreamingViews.StreamingView)
}

void StreamingViews_StreamingView::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  view_id_ = 0;
  local_area_ = NULL;
  zoom_factor_ = 0;
  remote_offset_ = NULL;
}

StreamingViews_StreamingView::~StreamingViews_StreamingView() {
  // @@protoc_insertion_point(destructor:dcv.extensions.StreamingViews.StreamingView)
  SharedDtor();
}

void StreamingViews_StreamingView::SharedDtor() {
  if (this != default_instance_) {
    delete local_area_;
    delete remote_offset_;
  }
}

void StreamingViews_StreamingView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamingViews_StreamingView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamingViews_StreamingView_descriptor_;
}

const StreamingViews_StreamingView& StreamingViews_StreamingView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

StreamingViews_StreamingView* StreamingViews_StreamingView::default_instance_ = NULL;

StreamingViews_StreamingView* StreamingViews_StreamingView::New(::google::protobuf::Arena* arena) const {
  StreamingViews_StreamingView* n = new StreamingViews_StreamingView;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamingViews_StreamingView::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.StreamingViews.StreamingView)
  view_id_ = 0;
  if (GetArenaNoVirtual() == NULL && local_area_ != NULL) delete local_area_;
  local_area_ = NULL;
  zoom_factor_ = 0;
  if (GetArenaNoVirtual() == NULL && remote_offset_ != NULL) delete remote_offset_;
  remote_offset_ = NULL;
}

bool StreamingViews_StreamingView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.StreamingViews.StreamingView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 view_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &view_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_local_area;
        break;
      }

      // optional .dcv.extensions.Rect local_area = 2;
      case 2: {
        if (tag == 18) {
         parse_local_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_local_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_zoom_factor;
        break;
      }

      // optional double zoom_factor = 3;
      case 3: {
        if (tag == 25) {
         parse_zoom_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zoom_factor_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_remote_offset;
        break;
      }

      // optional .dcv.extensions.Point remote_offset = 4;
      case 4: {
        if (tag == 34) {
         parse_remote_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remote_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.StreamingViews.StreamingView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.StreamingViews.StreamingView)
  return false;
#undef DO_
}

void StreamingViews_StreamingView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.StreamingViews.StreamingView)
  // optional int32 view_id = 1;
  if (this->view_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->view_id(), output);
  }

  // optional .dcv.extensions.Rect local_area = 2;
  if (this->has_local_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->local_area_, output);
  }

  // optional double zoom_factor = 3;
  if (this->zoom_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->zoom_factor(), output);
  }

  // optional .dcv.extensions.Point remote_offset = 4;
  if (this->has_remote_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->remote_offset_, output);
  }

  // @@protoc_insertion_point(serialize_end:dcv.extensions.StreamingViews.StreamingView)
}

::google::protobuf::uint8* StreamingViews_StreamingView::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.StreamingViews.StreamingView)
  // optional int32 view_id = 1;
  if (this->view_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->view_id(), target);
  }

  // optional .dcv.extensions.Rect local_area = 2;
  if (this->has_local_area()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->local_area_, false, target);
  }

  // optional double zoom_factor = 3;
  if (this->zoom_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->zoom_factor(), target);
  }

  // optional .dcv.extensions.Point remote_offset = 4;
  if (this->has_remote_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->remote_offset_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.StreamingViews.StreamingView)
  return target;
}

int StreamingViews_StreamingView::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.StreamingViews.StreamingView)
  int total_size = 0;

  // optional int32 view_id = 1;
  if (this->view_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->view_id());
  }

  // optional .dcv.extensions.Rect local_area = 2;
  if (this->has_local_area()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->local_area_);
  }

  // optional double zoom_factor = 3;
  if (this->zoom_factor() != 0) {
    total_size += 1 + 8;
  }

  // optional .dcv.extensions.Point remote_offset = 4;
  if (this->has_remote_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->remote_offset_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamingViews_StreamingView::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.StreamingViews.StreamingView)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StreamingViews_StreamingView* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamingViews_StreamingView>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.StreamingViews.StreamingView)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.StreamingViews.StreamingView)
    MergeFrom(*source);
  }
}

void StreamingViews_StreamingView::MergeFrom(const StreamingViews_StreamingView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.StreamingViews.StreamingView)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.view_id() != 0) {
    set_view_id(from.view_id());
  }
  if (from.has_local_area()) {
    mutable_local_area()->::dcv::extensions::Rect::MergeFrom(from.local_area());
  }
  if (from.zoom_factor() != 0) {
    set_zoom_factor(from.zoom_factor());
  }
  if (from.has_remote_offset()) {
    mutable_remote_offset()->::dcv::extensions::Point::MergeFrom(from.remote_offset());
  }
}

void StreamingViews_StreamingView::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.StreamingViews.StreamingView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingViews_StreamingView::CopyFrom(const StreamingViews_StreamingView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.StreamingViews.StreamingView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingViews_StreamingView::IsInitialized() const {

  return true;
}

void StreamingViews_StreamingView::Swap(StreamingViews_StreamingView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamingViews_StreamingView::InternalSwap(StreamingViews_StreamingView* other) {
  std::swap(view_id_, other->view_id_);
  std::swap(local_area_, other->local_area_);
  std::swap(zoom_factor_, other->zoom_factor_);
  std::swap(remote_offset_, other->remote_offset_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamingViews_StreamingView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamingViews_StreamingView_descriptor_;
  metadata.reflection = StreamingViews_StreamingView_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingViews::kStreamingViewFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingViews::StreamingViews()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.StreamingViews)
}

void StreamingViews::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StreamingViews::StreamingViews(const StreamingViews& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.StreamingViews)
}

void StreamingViews::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

StreamingViews::~StreamingViews() {
  // @@protoc_insertion_point(destructor:dcv.extensions.StreamingViews)
  SharedDtor();
}

void StreamingViews::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreamingViews::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamingViews::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamingViews_descriptor_;
}

const StreamingViews& StreamingViews::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

StreamingViews* StreamingViews::default_instance_ = NULL;

StreamingViews* StreamingViews::New(::google::protobuf::Arena* arena) const {
  StreamingViews* n = new StreamingViews;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamingViews::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.StreamingViews)
  streaming_view_.Clear();
}

bool StreamingViews::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.StreamingViews)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dcv.extensions.StreamingViews.StreamingView streaming_view = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_streaming_view:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_streaming_view()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_streaming_view;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.StreamingViews)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.StreamingViews)
  return false;
#undef DO_
}

void StreamingViews::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.StreamingViews)
  // repeated .dcv.extensions.StreamingViews.StreamingView streaming_view = 1;
  for (unsigned int i = 0, n = this->streaming_view_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->streaming_view(i), output);
  }

  // @@protoc_insertion_point(serialize_end:dcv.extensions.StreamingViews)
}

::google::protobuf::uint8* StreamingViews::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.StreamingViews)
  // repeated .dcv.extensions.StreamingViews.StreamingView streaming_view = 1;
  for (unsigned int i = 0, n = this->streaming_view_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->streaming_view(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.StreamingViews)
  return target;
}

int StreamingViews::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.StreamingViews)
  int total_size = 0;

  // repeated .dcv.extensions.StreamingViews.StreamingView streaming_view = 1;
  total_size += 1 * this->streaming_view_size();
  for (int i = 0; i < this->streaming_view_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->streaming_view(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamingViews::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.StreamingViews)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StreamingViews* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamingViews>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.StreamingViews)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.StreamingViews)
    MergeFrom(*source);
  }
}

void StreamingViews::MergeFrom(const StreamingViews& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.StreamingViews)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  streaming_view_.MergeFrom(from.streaming_view_);
}

void StreamingViews::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.StreamingViews)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingViews::CopyFrom(const StreamingViews& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.StreamingViews)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingViews::IsInitialized() const {

  return true;
}

void StreamingViews::Swap(StreamingViews* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamingViews::InternalSwap(StreamingViews* other) {
  streaming_view_.UnsafeArenaSwap(&other->streaming_view_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamingViews::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamingViews_descriptor_;
  metadata.reflection = StreamingViews_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamingViews_StreamingView

// optional int32 view_id = 1;
void StreamingViews_StreamingView::clear_view_id() {
  view_id_ = 0;
}
 ::google::protobuf::int32 StreamingViews_StreamingView::view_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.StreamingViews.StreamingView.view_id)
  return view_id_;
}
 void StreamingViews_StreamingView::set_view_id(::google::protobuf::int32 value) {
  
  view_id_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.StreamingViews.StreamingView.view_id)
}

// optional .dcv.extensions.Rect local_area = 2;
bool StreamingViews_StreamingView::has_local_area() const {
  return !_is_default_instance_ && local_area_ != NULL;
}
void StreamingViews_StreamingView::clear_local_area() {
  if (GetArenaNoVirtual() == NULL && local_area_ != NULL) delete local_area_;
  local_area_ = NULL;
}
const ::dcv::extensions::Rect& StreamingViews_StreamingView::local_area() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.StreamingViews.StreamingView.local_area)
  return local_area_ != NULL ? *local_area_ : *default_instance_->local_area_;
}
::dcv::extensions::Rect* StreamingViews_StreamingView::mutable_local_area() {
  
  if (local_area_ == NULL) {
    local_area_ = new ::dcv::extensions::Rect;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.StreamingViews.StreamingView.local_area)
  return local_area_;
}
::dcv::extensions::Rect* StreamingViews_StreamingView::release_local_area() {
  // @@protoc_insertion_point(field_release:dcv.extensions.StreamingViews.StreamingView.local_area)
  
  ::dcv::extensions::Rect* temp = local_area_;
  local_area_ = NULL;
  return temp;
}
void StreamingViews_StreamingView::set_allocated_local_area(::dcv::extensions::Rect* local_area) {
  delete local_area_;
  local_area_ = local_area;
  if (local_area) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.StreamingViews.StreamingView.local_area)
}

// optional double zoom_factor = 3;
void StreamingViews_StreamingView::clear_zoom_factor() {
  zoom_factor_ = 0;
}
 double StreamingViews_StreamingView::zoom_factor() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.StreamingViews.StreamingView.zoom_factor)
  return zoom_factor_;
}
 void StreamingViews_StreamingView::set_zoom_factor(double value) {
  
  zoom_factor_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.StreamingViews.StreamingView.zoom_factor)
}

// optional .dcv.extensions.Point remote_offset = 4;
bool StreamingViews_StreamingView::has_remote_offset() const {
  return !_is_default_instance_ && remote_offset_ != NULL;
}
void StreamingViews_StreamingView::clear_remote_offset() {
  if (GetArenaNoVirtual() == NULL && remote_offset_ != NULL) delete remote_offset_;
  remote_offset_ = NULL;
}
const ::dcv::extensions::Point& StreamingViews_StreamingView::remote_offset() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.StreamingViews.StreamingView.remote_offset)
  return remote_offset_ != NULL ? *remote_offset_ : *default_instance_->remote_offset_;
}
::dcv::extensions::Point* StreamingViews_StreamingView::mutable_remote_offset() {
  
  if (remote_offset_ == NULL) {
    remote_offset_ = new ::dcv::extensions::Point;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.StreamingViews.StreamingView.remote_offset)
  return remote_offset_;
}
::dcv::extensions::Point* StreamingViews_StreamingView::release_remote_offset() {
  // @@protoc_insertion_point(field_release:dcv.extensions.StreamingViews.StreamingView.remote_offset)
  
  ::dcv::extensions::Point* temp = remote_offset_;
  remote_offset_ = NULL;
  return temp;
}
void StreamingViews_StreamingView::set_allocated_remote_offset(::dcv::extensions::Point* remote_offset) {
  delete remote_offset_;
  remote_offset_ = remote_offset;
  if (remote_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.StreamingViews.StreamingView.remote_offset)
}

// -------------------------------------------------------------------

// StreamingViews

// repeated .dcv.extensions.StreamingViews.StreamingView streaming_view = 1;
int StreamingViews::streaming_view_size() const {
  return streaming_view_.size();
}
void StreamingViews::clear_streaming_view() {
  streaming_view_.Clear();
}
const ::dcv::extensions::StreamingViews_StreamingView& StreamingViews::streaming_view(int index) const {
  // @@protoc_insertion_point(field_get:dcv.extensions.StreamingViews.streaming_view)
  return streaming_view_.Get(index);
}
::dcv::extensions::StreamingViews_StreamingView* StreamingViews::mutable_streaming_view(int index) {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.StreamingViews.streaming_view)
  return streaming_view_.Mutable(index);
}
::dcv::extensions::StreamingViews_StreamingView* StreamingViews::add_streaming_view() {
  // @@protoc_insertion_point(field_add:dcv.extensions.StreamingViews.streaming_view)
  return streaming_view_.Add();
}
::google::protobuf::RepeatedPtrField< ::dcv::extensions::StreamingViews_StreamingView >*
StreamingViews::mutable_streaming_view() {
  // @@protoc_insertion_point(field_mutable_list:dcv.extensions.StreamingViews.streaming_view)
  return &streaming_view_;
}
const ::google::protobuf::RepeatedPtrField< ::dcv::extensions::StreamingViews_StreamingView >&
StreamingViews::streaming_view() const {
  // @@protoc_insertion_point(field_list:dcv.extensions.StreamingViews.streaming_view)
  return streaming_view_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDcvInfoRequest::GetDcvInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.GetDcvInfoRequest)
}

void GetDcvInfoRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetDcvInfoRequest::GetDcvInfoRequest(const GetDcvInfoRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.GetDcvInfoRequest)
}

void GetDcvInfoRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GetDcvInfoRequest::~GetDcvInfoRequest() {
  // @@protoc_insertion_point(destructor:dcv.extensions.GetDcvInfoRequest)
  SharedDtor();
}

void GetDcvInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetDcvInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDcvInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDcvInfoRequest_descriptor_;
}

const GetDcvInfoRequest& GetDcvInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

GetDcvInfoRequest* GetDcvInfoRequest::default_instance_ = NULL;

GetDcvInfoRequest* GetDcvInfoRequest::New(::google::protobuf::Arena* arena) const {
  GetDcvInfoRequest* n = new GetDcvInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDcvInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.GetDcvInfoRequest)
}

bool GetDcvInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.GetDcvInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.GetDcvInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.GetDcvInfoRequest)
  return false;
#undef DO_
}

void GetDcvInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.GetDcvInfoRequest)
  // @@protoc_insertion_point(serialize_end:dcv.extensions.GetDcvInfoRequest)
}

::google::protobuf::uint8* GetDcvInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.GetDcvInfoRequest)
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.GetDcvInfoRequest)
  return target;
}

int GetDcvInfoRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.GetDcvInfoRequest)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDcvInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.GetDcvInfoRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetDcvInfoRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDcvInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.GetDcvInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.GetDcvInfoRequest)
    MergeFrom(*source);
  }
}

void GetDcvInfoRequest::MergeFrom(const GetDcvInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.GetDcvInfoRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void GetDcvInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.GetDcvInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDcvInfoRequest::CopyFrom(const GetDcvInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.GetDcvInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDcvInfoRequest::IsInitialized() const {

  return true;
}

void GetDcvInfoRequest::Swap(GetDcvInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDcvInfoRequest::InternalSwap(GetDcvInfoRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDcvInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDcvInfoRequest_descriptor_;
  metadata.reflection = GetDcvInfoRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDcvInfoRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetManifestRequest::GetManifestRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.GetManifestRequest)
}

void GetManifestRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetManifestRequest::GetManifestRequest(const GetManifestRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.GetManifestRequest)
}

void GetManifestRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GetManifestRequest::~GetManifestRequest() {
  // @@protoc_insertion_point(destructor:dcv.extensions.GetManifestRequest)
  SharedDtor();
}

void GetManifestRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetManifestRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetManifestRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetManifestRequest_descriptor_;
}

const GetManifestRequest& GetManifestRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

GetManifestRequest* GetManifestRequest::default_instance_ = NULL;

GetManifestRequest* GetManifestRequest::New(::google::protobuf::Arena* arena) const {
  GetManifestRequest* n = new GetManifestRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetManifestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.GetManifestRequest)
}

bool GetManifestRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.GetManifestRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.GetManifestRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.GetManifestRequest)
  return false;
#undef DO_
}

void GetManifestRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.GetManifestRequest)
  // @@protoc_insertion_point(serialize_end:dcv.extensions.GetManifestRequest)
}

::google::protobuf::uint8* GetManifestRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.GetManifestRequest)
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.GetManifestRequest)
  return target;
}

int GetManifestRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.GetManifestRequest)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetManifestRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.GetManifestRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetManifestRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetManifestRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.GetManifestRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.GetManifestRequest)
    MergeFrom(*source);
  }
}

void GetManifestRequest::MergeFrom(const GetManifestRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.GetManifestRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void GetManifestRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.GetManifestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetManifestRequest::CopyFrom(const GetManifestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.GetManifestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetManifestRequest::IsInitialized() const {

  return true;
}

void GetManifestRequest::Swap(GetManifestRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetManifestRequest::InternalSwap(GetManifestRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetManifestRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetManifestRequest_descriptor_;
  metadata.reflection = GetManifestRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetManifestRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetupVirtualChannelRequest::kVirtualChannelNameFieldNumber;
const int SetupVirtualChannelRequest::kRelayClientProcessIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetupVirtualChannelRequest::SetupVirtualChannelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.SetupVirtualChannelRequest)
}

void SetupVirtualChannelRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SetupVirtualChannelRequest::SetupVirtualChannelRequest(const SetupVirtualChannelRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.SetupVirtualChannelRequest)
}

void SetupVirtualChannelRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  virtual_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relay_client_process_id_ = GOOGLE_LONGLONG(0);
}

SetupVirtualChannelRequest::~SetupVirtualChannelRequest() {
  // @@protoc_insertion_point(destructor:dcv.extensions.SetupVirtualChannelRequest)
  SharedDtor();
}

void SetupVirtualChannelRequest::SharedDtor() {
  virtual_channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SetupVirtualChannelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetupVirtualChannelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetupVirtualChannelRequest_descriptor_;
}

const SetupVirtualChannelRequest& SetupVirtualChannelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

SetupVirtualChannelRequest* SetupVirtualChannelRequest::default_instance_ = NULL;

SetupVirtualChannelRequest* SetupVirtualChannelRequest::New(::google::protobuf::Arena* arena) const {
  SetupVirtualChannelRequest* n = new SetupVirtualChannelRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetupVirtualChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.SetupVirtualChannelRequest)
  virtual_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relay_client_process_id_ = GOOGLE_LONGLONG(0);
}

bool SetupVirtualChannelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.SetupVirtualChannelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string virtual_channel_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_virtual_channel_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->virtual_channel_name().data(), this->virtual_channel_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_relay_client_process_id;
        break;
      }

      // optional int64 relay_client_process_id = 2;
      case 2: {
        if (tag == 16) {
         parse_relay_client_process_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &relay_client_process_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.SetupVirtualChannelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.SetupVirtualChannelRequest)
  return false;
#undef DO_
}

void SetupVirtualChannelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.SetupVirtualChannelRequest)
  // optional string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->virtual_channel_name().data(), this->virtual_channel_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->virtual_channel_name(), output);
  }

  // optional int64 relay_client_process_id = 2;
  if (this->relay_client_process_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->relay_client_process_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:dcv.extensions.SetupVirtualChannelRequest)
}

::google::protobuf::uint8* SetupVirtualChannelRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.SetupVirtualChannelRequest)
  // optional string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->virtual_channel_name().data(), this->virtual_channel_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->virtual_channel_name(), target);
  }

  // optional int64 relay_client_process_id = 2;
  if (this->relay_client_process_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->relay_client_process_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.SetupVirtualChannelRequest)
  return target;
}

int SetupVirtualChannelRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.SetupVirtualChannelRequest)
  int total_size = 0;

  // optional string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->virtual_channel_name());
  }

  // optional int64 relay_client_process_id = 2;
  if (this->relay_client_process_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->relay_client_process_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetupVirtualChannelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.SetupVirtualChannelRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SetupVirtualChannelRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetupVirtualChannelRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.SetupVirtualChannelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.SetupVirtualChannelRequest)
    MergeFrom(*source);
  }
}

void SetupVirtualChannelRequest::MergeFrom(const SetupVirtualChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.SetupVirtualChannelRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.virtual_channel_name().size() > 0) {

    virtual_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.virtual_channel_name_);
  }
  if (from.relay_client_process_id() != 0) {
    set_relay_client_process_id(from.relay_client_process_id());
  }
}

void SetupVirtualChannelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.SetupVirtualChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetupVirtualChannelRequest::CopyFrom(const SetupVirtualChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.SetupVirtualChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupVirtualChannelRequest::IsInitialized() const {

  return true;
}

void SetupVirtualChannelRequest::Swap(SetupVirtualChannelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetupVirtualChannelRequest::InternalSwap(SetupVirtualChannelRequest* other) {
  virtual_channel_name_.Swap(&other->virtual_channel_name_);
  std::swap(relay_client_process_id_, other->relay_client_process_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetupVirtualChannelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetupVirtualChannelRequest_descriptor_;
  metadata.reflection = SetupVirtualChannelRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetupVirtualChannelRequest

// optional string virtual_channel_name = 1;
void SetupVirtualChannelRequest::clear_virtual_channel_name() {
  virtual_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SetupVirtualChannelRequest::virtual_channel_name() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
  return virtual_channel_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SetupVirtualChannelRequest::set_virtual_channel_name(const ::std::string& value) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
}
 void SetupVirtualChannelRequest::set_virtual_channel_name(const char* value) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
}
 void SetupVirtualChannelRequest::set_virtual_channel_name(const char* value, size_t size) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
}
 ::std::string* SetupVirtualChannelRequest::mutable_virtual_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
  return virtual_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SetupVirtualChannelRequest::release_virtual_channel_name() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
  
  return virtual_channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SetupVirtualChannelRequest::set_allocated_virtual_channel_name(::std::string* virtual_channel_name) {
  if (virtual_channel_name != NULL) {
    
  } else {
    
  }
  virtual_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), virtual_channel_name);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
}

// optional int64 relay_client_process_id = 2;
void SetupVirtualChannelRequest::clear_relay_client_process_id() {
  relay_client_process_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 SetupVirtualChannelRequest::relay_client_process_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetupVirtualChannelRequest.relay_client_process_id)
  return relay_client_process_id_;
}
 void SetupVirtualChannelRequest::set_relay_client_process_id(::google::protobuf::int64 value) {
  
  relay_client_process_id_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.SetupVirtualChannelRequest.relay_client_process_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloseVirtualChannelRequest::kVirtualChannelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloseVirtualChannelRequest::CloseVirtualChannelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.CloseVirtualChannelRequest)
}

void CloseVirtualChannelRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CloseVirtualChannelRequest::CloseVirtualChannelRequest(const CloseVirtualChannelRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.CloseVirtualChannelRequest)
}

void CloseVirtualChannelRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  virtual_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CloseVirtualChannelRequest::~CloseVirtualChannelRequest() {
  // @@protoc_insertion_point(destructor:dcv.extensions.CloseVirtualChannelRequest)
  SharedDtor();
}

void CloseVirtualChannelRequest::SharedDtor() {
  virtual_channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CloseVirtualChannelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseVirtualChannelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseVirtualChannelRequest_descriptor_;
}

const CloseVirtualChannelRequest& CloseVirtualChannelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

CloseVirtualChannelRequest* CloseVirtualChannelRequest::default_instance_ = NULL;

CloseVirtualChannelRequest* CloseVirtualChannelRequest::New(::google::protobuf::Arena* arena) const {
  CloseVirtualChannelRequest* n = new CloseVirtualChannelRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloseVirtualChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.CloseVirtualChannelRequest)
  virtual_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CloseVirtualChannelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.CloseVirtualChannelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string virtual_channel_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_virtual_channel_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->virtual_channel_name().data(), this->virtual_channel_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.CloseVirtualChannelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.CloseVirtualChannelRequest)
  return false;
#undef DO_
}

void CloseVirtualChannelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.CloseVirtualChannelRequest)
  // optional string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->virtual_channel_name().data(), this->virtual_channel_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->virtual_channel_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:dcv.extensions.CloseVirtualChannelRequest)
}

::google::protobuf::uint8* CloseVirtualChannelRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.CloseVirtualChannelRequest)
  // optional string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->virtual_channel_name().data(), this->virtual_channel_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->virtual_channel_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.CloseVirtualChannelRequest)
  return target;
}

int CloseVirtualChannelRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.CloseVirtualChannelRequest)
  int total_size = 0;

  // optional string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->virtual_channel_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseVirtualChannelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.CloseVirtualChannelRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CloseVirtualChannelRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CloseVirtualChannelRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.CloseVirtualChannelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.CloseVirtualChannelRequest)
    MergeFrom(*source);
  }
}

void CloseVirtualChannelRequest::MergeFrom(const CloseVirtualChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.CloseVirtualChannelRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.virtual_channel_name().size() > 0) {

    virtual_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.virtual_channel_name_);
  }
}

void CloseVirtualChannelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.CloseVirtualChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseVirtualChannelRequest::CopyFrom(const CloseVirtualChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.CloseVirtualChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseVirtualChannelRequest::IsInitialized() const {

  return true;
}

void CloseVirtualChannelRequest::Swap(CloseVirtualChannelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloseVirtualChannelRequest::InternalSwap(CloseVirtualChannelRequest* other) {
  virtual_channel_name_.Swap(&other->virtual_channel_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloseVirtualChannelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseVirtualChannelRequest_descriptor_;
  metadata.reflection = CloseVirtualChannelRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloseVirtualChannelRequest

// optional string virtual_channel_name = 1;
void CloseVirtualChannelRequest::clear_virtual_channel_name() {
  virtual_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CloseVirtualChannelRequest::virtual_channel_name() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
  return virtual_channel_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CloseVirtualChannelRequest::set_virtual_channel_name(const ::std::string& value) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
}
 void CloseVirtualChannelRequest::set_virtual_channel_name(const char* value) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
}
 void CloseVirtualChannelRequest::set_virtual_channel_name(const char* value, size_t size) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
}
 ::std::string* CloseVirtualChannelRequest::mutable_virtual_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
  return virtual_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CloseVirtualChannelRequest::release_virtual_channel_name() {
  // @@protoc_insertion_point(field_release:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
  
  return virtual_channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CloseVirtualChannelRequest::set_allocated_virtual_channel_name(::std::string* virtual_channel_name) {
  if (virtual_channel_name != NULL) {
    
  } else {
    
  }
  virtual_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), virtual_channel_name);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetCursorPointRequest::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetCursorPointRequest::SetCursorPointRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.SetCursorPointRequest)
}

void SetCursorPointRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  point_ = const_cast< ::dcv::extensions::Point*>(&::dcv::extensions::Point::default_instance());
}

SetCursorPointRequest::SetCursorPointRequest(const SetCursorPointRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.SetCursorPointRequest)
}

void SetCursorPointRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  point_ = NULL;
}

SetCursorPointRequest::~SetCursorPointRequest() {
  // @@protoc_insertion_point(destructor:dcv.extensions.SetCursorPointRequest)
  SharedDtor();
}

void SetCursorPointRequest::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
  }
}

void SetCursorPointRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetCursorPointRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetCursorPointRequest_descriptor_;
}

const SetCursorPointRequest& SetCursorPointRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

SetCursorPointRequest* SetCursorPointRequest::default_instance_ = NULL;

SetCursorPointRequest* SetCursorPointRequest::New(::google::protobuf::Arena* arena) const {
  SetCursorPointRequest* n = new SetCursorPointRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetCursorPointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.SetCursorPointRequest)
  if (GetArenaNoVirtual() == NULL && point_ != NULL) delete point_;
  point_ = NULL;
}

bool SetCursorPointRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.SetCursorPointRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dcv.extensions.Point point = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.SetCursorPointRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.SetCursorPointRequest)
  return false;
#undef DO_
}

void SetCursorPointRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.SetCursorPointRequest)
  // optional .dcv.extensions.Point point = 1;
  if (this->has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->point_, output);
  }

  // @@protoc_insertion_point(serialize_end:dcv.extensions.SetCursorPointRequest)
}

::google::protobuf::uint8* SetCursorPointRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.SetCursorPointRequest)
  // optional .dcv.extensions.Point point = 1;
  if (this->has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->point_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.SetCursorPointRequest)
  return target;
}

int SetCursorPointRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.SetCursorPointRequest)
  int total_size = 0;

  // optional .dcv.extensions.Point point = 1;
  if (this->has_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->point_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetCursorPointRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.SetCursorPointRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SetCursorPointRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetCursorPointRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.SetCursorPointRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.SetCursorPointRequest)
    MergeFrom(*source);
  }
}

void SetCursorPointRequest::MergeFrom(const SetCursorPointRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.SetCursorPointRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_point()) {
    mutable_point()->::dcv::extensions::Point::MergeFrom(from.point());
  }
}

void SetCursorPointRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.SetCursorPointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCursorPointRequest::CopyFrom(const SetCursorPointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.SetCursorPointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCursorPointRequest::IsInitialized() const {

  return true;
}

void SetCursorPointRequest::Swap(SetCursorPointRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetCursorPointRequest::InternalSwap(SetCursorPointRequest* other) {
  std::swap(point_, other->point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetCursorPointRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetCursorPointRequest_descriptor_;
  metadata.reflection = SetCursorPointRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetCursorPointRequest

// optional .dcv.extensions.Point point = 1;
bool SetCursorPointRequest::has_point() const {
  return !_is_default_instance_ && point_ != NULL;
}
void SetCursorPointRequest::clear_point() {
  if (GetArenaNoVirtual() == NULL && point_ != NULL) delete point_;
  point_ = NULL;
}
const ::dcv::extensions::Point& SetCursorPointRequest::point() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetCursorPointRequest.point)
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
::dcv::extensions::Point* SetCursorPointRequest::mutable_point() {
  
  if (point_ == NULL) {
    point_ = new ::dcv::extensions::Point;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SetCursorPointRequest.point)
  return point_;
}
::dcv::extensions::Point* SetCursorPointRequest::release_point() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SetCursorPointRequest.point)
  
  ::dcv::extensions::Point* temp = point_;
  point_ = NULL;
  return temp;
}
void SetCursorPointRequest::set_allocated_point(::dcv::extensions::Point* point) {
  delete point_;
  point_ = point;
  if (point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SetCursorPointRequest.point)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStreamingViewsRequest::GetStreamingViewsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.GetStreamingViewsRequest)
}

void GetStreamingViewsRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetStreamingViewsRequest::GetStreamingViewsRequest(const GetStreamingViewsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.GetStreamingViewsRequest)
}

void GetStreamingViewsRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

GetStreamingViewsRequest::~GetStreamingViewsRequest() {
  // @@protoc_insertion_point(destructor:dcv.extensions.GetStreamingViewsRequest)
  SharedDtor();
}

void GetStreamingViewsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetStreamingViewsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStreamingViewsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStreamingViewsRequest_descriptor_;
}

const GetStreamingViewsRequest& GetStreamingViewsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

GetStreamingViewsRequest* GetStreamingViewsRequest::default_instance_ = NULL;

GetStreamingViewsRequest* GetStreamingViewsRequest::New(::google::protobuf::Arena* arena) const {
  GetStreamingViewsRequest* n = new GetStreamingViewsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetStreamingViewsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.GetStreamingViewsRequest)
}

bool GetStreamingViewsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.GetStreamingViewsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.GetStreamingViewsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.GetStreamingViewsRequest)
  return false;
#undef DO_
}

void GetStreamingViewsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.GetStreamingViewsRequest)
  // @@protoc_insertion_point(serialize_end:dcv.extensions.GetStreamingViewsRequest)
}

::google::protobuf::uint8* GetStreamingViewsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.GetStreamingViewsRequest)
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.GetStreamingViewsRequest)
  return target;
}

int GetStreamingViewsRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.GetStreamingViewsRequest)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStreamingViewsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.GetStreamingViewsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetStreamingViewsRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetStreamingViewsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.GetStreamingViewsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.GetStreamingViewsRequest)
    MergeFrom(*source);
  }
}

void GetStreamingViewsRequest::MergeFrom(const GetStreamingViewsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.GetStreamingViewsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void GetStreamingViewsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.GetStreamingViewsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamingViewsRequest::CopyFrom(const GetStreamingViewsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.GetStreamingViewsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamingViewsRequest::IsInitialized() const {

  return true;
}

void GetStreamingViewsRequest::Swap(GetStreamingViewsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetStreamingViewsRequest::InternalSwap(GetStreamingViewsRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetStreamingViewsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStreamingViewsRequest_descriptor_;
  metadata.reflection = GetStreamingViewsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetStreamingViewsRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IsPointInsideStreamingViewsRequest::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IsPointInsideStreamingViewsRequest::IsPointInsideStreamingViewsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.IsPointInsideStreamingViewsRequest)
}

void IsPointInsideStreamingViewsRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  point_ = const_cast< ::dcv::extensions::Point*>(&::dcv::extensions::Point::default_instance());
}

IsPointInsideStreamingViewsRequest::IsPointInsideStreamingViewsRequest(const IsPointInsideStreamingViewsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.IsPointInsideStreamingViewsRequest)
}

void IsPointInsideStreamingViewsRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  point_ = NULL;
}

IsPointInsideStreamingViewsRequest::~IsPointInsideStreamingViewsRequest() {
  // @@protoc_insertion_point(destructor:dcv.extensions.IsPointInsideStreamingViewsRequest)
  SharedDtor();
}

void IsPointInsideStreamingViewsRequest::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
  }
}

void IsPointInsideStreamingViewsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsPointInsideStreamingViewsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsPointInsideStreamingViewsRequest_descriptor_;
}

const IsPointInsideStreamingViewsRequest& IsPointInsideStreamingViewsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

IsPointInsideStreamingViewsRequest* IsPointInsideStreamingViewsRequest::default_instance_ = NULL;

IsPointInsideStreamingViewsRequest* IsPointInsideStreamingViewsRequest::New(::google::protobuf::Arena* arena) const {
  IsPointInsideStreamingViewsRequest* n = new IsPointInsideStreamingViewsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IsPointInsideStreamingViewsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.IsPointInsideStreamingViewsRequest)
  if (GetArenaNoVirtual() == NULL && point_ != NULL) delete point_;
  point_ = NULL;
}

bool IsPointInsideStreamingViewsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.IsPointInsideStreamingViewsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dcv.extensions.Point point = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.IsPointInsideStreamingViewsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.IsPointInsideStreamingViewsRequest)
  return false;
#undef DO_
}

void IsPointInsideStreamingViewsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.IsPointInsideStreamingViewsRequest)
  // optional .dcv.extensions.Point point = 1;
  if (this->has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->point_, output);
  }

  // @@protoc_insertion_point(serialize_end:dcv.extensions.IsPointInsideStreamingViewsRequest)
}

::google::protobuf::uint8* IsPointInsideStreamingViewsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.IsPointInsideStreamingViewsRequest)
  // optional .dcv.extensions.Point point = 1;
  if (this->has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->point_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.IsPointInsideStreamingViewsRequest)
  return target;
}

int IsPointInsideStreamingViewsRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.IsPointInsideStreamingViewsRequest)
  int total_size = 0;

  // optional .dcv.extensions.Point point = 1;
  if (this->has_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->point_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsPointInsideStreamingViewsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.IsPointInsideStreamingViewsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IsPointInsideStreamingViewsRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IsPointInsideStreamingViewsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.IsPointInsideStreamingViewsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.IsPointInsideStreamingViewsRequest)
    MergeFrom(*source);
  }
}

void IsPointInsideStreamingViewsRequest::MergeFrom(const IsPointInsideStreamingViewsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.IsPointInsideStreamingViewsRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_point()) {
    mutable_point()->::dcv::extensions::Point::MergeFrom(from.point());
  }
}

void IsPointInsideStreamingViewsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.IsPointInsideStreamingViewsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsPointInsideStreamingViewsRequest::CopyFrom(const IsPointInsideStreamingViewsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.IsPointInsideStreamingViewsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsPointInsideStreamingViewsRequest::IsInitialized() const {

  return true;
}

void IsPointInsideStreamingViewsRequest::Swap(IsPointInsideStreamingViewsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IsPointInsideStreamingViewsRequest::InternalSwap(IsPointInsideStreamingViewsRequest* other) {
  std::swap(point_, other->point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IsPointInsideStreamingViewsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsPointInsideStreamingViewsRequest_descriptor_;
  metadata.reflection = IsPointInsideStreamingViewsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IsPointInsideStreamingViewsRequest

// optional .dcv.extensions.Point point = 1;
bool IsPointInsideStreamingViewsRequest::has_point() const {
  return !_is_default_instance_ && point_ != NULL;
}
void IsPointInsideStreamingViewsRequest::clear_point() {
  if (GetArenaNoVirtual() == NULL && point_ != NULL) delete point_;
  point_ = NULL;
}
const ::dcv::extensions::Point& IsPointInsideStreamingViewsRequest::point() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.IsPointInsideStreamingViewsRequest.point)
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
::dcv::extensions::Point* IsPointInsideStreamingViewsRequest::mutable_point() {
  
  if (point_ == NULL) {
    point_ = new ::dcv::extensions::Point;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.IsPointInsideStreamingViewsRequest.point)
  return point_;
}
::dcv::extensions::Point* IsPointInsideStreamingViewsRequest::release_point() {
  // @@protoc_insertion_point(field_release:dcv.extensions.IsPointInsideStreamingViewsRequest.point)
  
  ::dcv::extensions::Point* temp = point_;
  point_ = NULL;
  return temp;
}
void IsPointInsideStreamingViewsRequest::set_allocated_point(::dcv::extensions::Point* point) {
  delete point_;
  point_ = point;
  if (point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.IsPointInsideStreamingViewsRequest.point)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* GetDcvInfoResponse_DcvRole_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDcvInfoResponse_DcvRole_descriptor_;
}
bool GetDcvInfoResponse_DcvRole_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GetDcvInfoResponse_DcvRole GetDcvInfoResponse::Server;
const GetDcvInfoResponse_DcvRole GetDcvInfoResponse::Client;
const GetDcvInfoResponse_DcvRole GetDcvInfoResponse::DcvRole_MIN;
const GetDcvInfoResponse_DcvRole GetDcvInfoResponse::DcvRole_MAX;
const int GetDcvInfoResponse::DcvRole_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDcvInfoResponse::kDcvRoleFieldNumber;
const int GetDcvInfoResponse::kDcvProcessIdFieldNumber;
const int GetDcvInfoResponse::kServerInfoFieldNumber;
const int GetDcvInfoResponse::kClientInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDcvInfoResponse::GetDcvInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.GetDcvInfoResponse)
}

void GetDcvInfoResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  server_info_ = const_cast< ::dcv::extensions::SoftwareInfo*>(&::dcv::extensions::SoftwareInfo::default_instance());
  client_info_ = const_cast< ::dcv::extensions::SoftwareInfo*>(&::dcv::extensions::SoftwareInfo::default_instance());
}

GetDcvInfoResponse::GetDcvInfoResponse(const GetDcvInfoResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.GetDcvInfoResponse)
}

void GetDcvInfoResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  dcv_role_ = 0;
  dcv_process_id_ = GOOGLE_LONGLONG(0);
  server_info_ = NULL;
  client_info_ = NULL;
}

GetDcvInfoResponse::~GetDcvInfoResponse() {
  // @@protoc_insertion_point(destructor:dcv.extensions.GetDcvInfoResponse)
  SharedDtor();
}

void GetDcvInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete server_info_;
    delete client_info_;
  }
}

void GetDcvInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDcvInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetDcvInfoResponse_descriptor_;
}

const GetDcvInfoResponse& GetDcvInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

GetDcvInfoResponse* GetDcvInfoResponse::default_instance_ = NULL;

GetDcvInfoResponse* GetDcvInfoResponse::New(::google::protobuf::Arena* arena) const {
  GetDcvInfoResponse* n = new GetDcvInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDcvInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.GetDcvInfoResponse)
  dcv_role_ = 0;
  dcv_process_id_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && server_info_ != NULL) delete server_info_;
  server_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && client_info_ != NULL) delete client_info_;
  client_info_ = NULL;
}

bool GetDcvInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.GetDcvInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dcv.extensions.GetDcvInfoResponse.DcvRole dcv_role = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dcv_role(static_cast< ::dcv::extensions::GetDcvInfoResponse_DcvRole >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dcv_process_id;
        break;
      }

      // optional int64 dcv_process_id = 2;
      case 2: {
        if (tag == 16) {
         parse_dcv_process_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dcv_process_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_server_info;
        break;
      }

      // optional .dcv.extensions.SoftwareInfo server_info = 3;
      case 3: {
        if (tag == 26) {
         parse_server_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_client_info;
        break;
      }

      // optional .dcv.extensions.SoftwareInfo client_info = 4;
      case 4: {
        if (tag == 34) {
         parse_client_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.GetDcvInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.GetDcvInfoResponse)
  return false;
#undef DO_
}

void GetDcvInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.GetDcvInfoResponse)
  // optional .dcv.extensions.GetDcvInfoResponse.DcvRole dcv_role = 1;
  if (this->dcv_role() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dcv_role(), output);
  }

  // optional int64 dcv_process_id = 2;
  if (this->dcv_process_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dcv_process_id(), output);
  }

  // optional .dcv.extensions.SoftwareInfo server_info = 3;
  if (this->has_server_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->server_info_, output);
  }

  // optional .dcv.extensions.SoftwareInfo client_info = 4;
  if (this->has_client_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->client_info_, output);
  }

  // @@protoc_insertion_point(serialize_end:dcv.extensions.GetDcvInfoResponse)
}

::google::protobuf::uint8* GetDcvInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.GetDcvInfoResponse)
  // optional .dcv.extensions.GetDcvInfoResponse.DcvRole dcv_role = 1;
  if (this->dcv_role() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dcv_role(), target);
  }

  // optional int64 dcv_process_id = 2;
  if (this->dcv_process_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dcv_process_id(), target);
  }

  // optional .dcv.extensions.SoftwareInfo server_info = 3;
  if (this->has_server_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->server_info_, false, target);
  }

  // optional .dcv.extensions.SoftwareInfo client_info = 4;
  if (this->has_client_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->client_info_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.GetDcvInfoResponse)
  return target;
}

int GetDcvInfoResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.GetDcvInfoResponse)
  int total_size = 0;

  // optional .dcv.extensions.GetDcvInfoResponse.DcvRole dcv_role = 1;
  if (this->dcv_role() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dcv_role());
  }

  // optional int64 dcv_process_id = 2;
  if (this->dcv_process_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->dcv_process_id());
  }

  // optional .dcv.extensions.SoftwareInfo server_info = 3;
  if (this->has_server_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->server_info_);
  }

  // optional .dcv.extensions.SoftwareInfo client_info = 4;
  if (this->has_client_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->client_info_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDcvInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.GetDcvInfoResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetDcvInfoResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDcvInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.GetDcvInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.GetDcvInfoResponse)
    MergeFrom(*source);
  }
}

void GetDcvInfoResponse::MergeFrom(const GetDcvInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.GetDcvInfoResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.dcv_role() != 0) {
    set_dcv_role(from.dcv_role());
  }
  if (from.dcv_process_id() != 0) {
    set_dcv_process_id(from.dcv_process_id());
  }
  if (from.has_server_info()) {
    mutable_server_info()->::dcv::extensions::SoftwareInfo::MergeFrom(from.server_info());
  }
  if (from.has_client_info()) {
    mutable_client_info()->::dcv::extensions::SoftwareInfo::MergeFrom(from.client_info());
  }
}

void GetDcvInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.GetDcvInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDcvInfoResponse::CopyFrom(const GetDcvInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.GetDcvInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDcvInfoResponse::IsInitialized() const {

  return true;
}

void GetDcvInfoResponse::Swap(GetDcvInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDcvInfoResponse::InternalSwap(GetDcvInfoResponse* other) {
  std::swap(dcv_role_, other->dcv_role_);
  std::swap(dcv_process_id_, other->dcv_process_id_);
  std::swap(server_info_, other->server_info_);
  std::swap(client_info_, other->client_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDcvInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDcvInfoResponse_descriptor_;
  metadata.reflection = GetDcvInfoResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDcvInfoResponse

// optional .dcv.extensions.GetDcvInfoResponse.DcvRole dcv_role = 1;
void GetDcvInfoResponse::clear_dcv_role() {
  dcv_role_ = 0;
}
 ::dcv::extensions::GetDcvInfoResponse_DcvRole GetDcvInfoResponse::dcv_role() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.GetDcvInfoResponse.dcv_role)
  return static_cast< ::dcv::extensions::GetDcvInfoResponse_DcvRole >(dcv_role_);
}
 void GetDcvInfoResponse::set_dcv_role(::dcv::extensions::GetDcvInfoResponse_DcvRole value) {
  
  dcv_role_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.GetDcvInfoResponse.dcv_role)
}

// optional int64 dcv_process_id = 2;
void GetDcvInfoResponse::clear_dcv_process_id() {
  dcv_process_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GetDcvInfoResponse::dcv_process_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.GetDcvInfoResponse.dcv_process_id)
  return dcv_process_id_;
}
 void GetDcvInfoResponse::set_dcv_process_id(::google::protobuf::int64 value) {
  
  dcv_process_id_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.GetDcvInfoResponse.dcv_process_id)
}

// optional .dcv.extensions.SoftwareInfo server_info = 3;
bool GetDcvInfoResponse::has_server_info() const {
  return !_is_default_instance_ && server_info_ != NULL;
}
void GetDcvInfoResponse::clear_server_info() {
  if (GetArenaNoVirtual() == NULL && server_info_ != NULL) delete server_info_;
  server_info_ = NULL;
}
const ::dcv::extensions::SoftwareInfo& GetDcvInfoResponse::server_info() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.GetDcvInfoResponse.server_info)
  return server_info_ != NULL ? *server_info_ : *default_instance_->server_info_;
}
::dcv::extensions::SoftwareInfo* GetDcvInfoResponse::mutable_server_info() {
  
  if (server_info_ == NULL) {
    server_info_ = new ::dcv::extensions::SoftwareInfo;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.GetDcvInfoResponse.server_info)
  return server_info_;
}
::dcv::extensions::SoftwareInfo* GetDcvInfoResponse::release_server_info() {
  // @@protoc_insertion_point(field_release:dcv.extensions.GetDcvInfoResponse.server_info)
  
  ::dcv::extensions::SoftwareInfo* temp = server_info_;
  server_info_ = NULL;
  return temp;
}
void GetDcvInfoResponse::set_allocated_server_info(::dcv::extensions::SoftwareInfo* server_info) {
  delete server_info_;
  server_info_ = server_info;
  if (server_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.GetDcvInfoResponse.server_info)
}

// optional .dcv.extensions.SoftwareInfo client_info = 4;
bool GetDcvInfoResponse::has_client_info() const {
  return !_is_default_instance_ && client_info_ != NULL;
}
void GetDcvInfoResponse::clear_client_info() {
  if (GetArenaNoVirtual() == NULL && client_info_ != NULL) delete client_info_;
  client_info_ = NULL;
}
const ::dcv::extensions::SoftwareInfo& GetDcvInfoResponse::client_info() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.GetDcvInfoResponse.client_info)
  return client_info_ != NULL ? *client_info_ : *default_instance_->client_info_;
}
::dcv::extensions::SoftwareInfo* GetDcvInfoResponse::mutable_client_info() {
  
  if (client_info_ == NULL) {
    client_info_ = new ::dcv::extensions::SoftwareInfo;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.GetDcvInfoResponse.client_info)
  return client_info_;
}
::dcv::extensions::SoftwareInfo* GetDcvInfoResponse::release_client_info() {
  // @@protoc_insertion_point(field_release:dcv.extensions.GetDcvInfoResponse.client_info)
  
  ::dcv::extensions::SoftwareInfo* temp = client_info_;
  client_info_ = NULL;
  return temp;
}
void GetDcvInfoResponse::set_allocated_client_info(::dcv::extensions::SoftwareInfo* client_info) {
  delete client_info_;
  client_info_ = client_info;
  if (client_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.GetDcvInfoResponse.client_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetManifestResponse::kManifestPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetManifestResponse::GetManifestResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.GetManifestResponse)
}

void GetManifestResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetManifestResponse::GetManifestResponse(const GetManifestResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.GetManifestResponse)
}

void GetManifestResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  manifest_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetManifestResponse::~GetManifestResponse() {
  // @@protoc_insertion_point(destructor:dcv.extensions.GetManifestResponse)
  SharedDtor();
}

void GetManifestResponse::SharedDtor() {
  manifest_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GetManifestResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetManifestResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetManifestResponse_descriptor_;
}

const GetManifestResponse& GetManifestResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

GetManifestResponse* GetManifestResponse::default_instance_ = NULL;

GetManifestResponse* GetManifestResponse::New(::google::protobuf::Arena* arena) const {
  GetManifestResponse* n = new GetManifestResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetManifestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.GetManifestResponse)
  manifest_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GetManifestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.GetManifestResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string manifest_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manifest_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manifest_path().data(), this->manifest_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dcv.extensions.GetManifestResponse.manifest_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.GetManifestResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.GetManifestResponse)
  return false;
#undef DO_
}

void GetManifestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.GetManifestResponse)
  // optional string manifest_path = 1;
  if (this->manifest_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manifest_path().data(), this->manifest_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.GetManifestResponse.manifest_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->manifest_path(), output);
  }

  // @@protoc_insertion_point(serialize_end:dcv.extensions.GetManifestResponse)
}

::google::protobuf::uint8* GetManifestResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.GetManifestResponse)
  // optional string manifest_path = 1;
  if (this->manifest_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manifest_path().data(), this->manifest_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.GetManifestResponse.manifest_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->manifest_path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.GetManifestResponse)
  return target;
}

int GetManifestResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.GetManifestResponse)
  int total_size = 0;

  // optional string manifest_path = 1;
  if (this->manifest_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manifest_path());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetManifestResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.GetManifestResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetManifestResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetManifestResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.GetManifestResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.GetManifestResponse)
    MergeFrom(*source);
  }
}

void GetManifestResponse::MergeFrom(const GetManifestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.GetManifestResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.manifest_path().size() > 0) {

    manifest_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manifest_path_);
  }
}

void GetManifestResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.GetManifestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetManifestResponse::CopyFrom(const GetManifestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.GetManifestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetManifestResponse::IsInitialized() const {

  return true;
}

void GetManifestResponse::Swap(GetManifestResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetManifestResponse::InternalSwap(GetManifestResponse* other) {
  manifest_path_.Swap(&other->manifest_path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetManifestResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetManifestResponse_descriptor_;
  metadata.reflection = GetManifestResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetManifestResponse

// optional string manifest_path = 1;
void GetManifestResponse::clear_manifest_path() {
  manifest_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& GetManifestResponse::manifest_path() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.GetManifestResponse.manifest_path)
  return manifest_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetManifestResponse::set_manifest_path(const ::std::string& value) {
  
  manifest_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.GetManifestResponse.manifest_path)
}
 void GetManifestResponse::set_manifest_path(const char* value) {
  
  manifest_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.GetManifestResponse.manifest_path)
}
 void GetManifestResponse::set_manifest_path(const char* value, size_t size) {
  
  manifest_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.GetManifestResponse.manifest_path)
}
 ::std::string* GetManifestResponse::mutable_manifest_path() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.GetManifestResponse.manifest_path)
  return manifest_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GetManifestResponse::release_manifest_path() {
  // @@protoc_insertion_point(field_release:dcv.extensions.GetManifestResponse.manifest_path)
  
  return manifest_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GetManifestResponse::set_allocated_manifest_path(::std::string* manifest_path) {
  if (manifest_path != NULL) {
    
  } else {
    
  }
  manifest_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manifest_path);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.GetManifestResponse.manifest_path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetupVirtualChannelResponse::kVirtualChannelNameFieldNumber;
const int SetupVirtualChannelResponse::kRelayPathFieldNumber;
const int SetupVirtualChannelResponse::kRelayServerProcessIdFieldNumber;
const int SetupVirtualChannelResponse::kVirtualChannelAuthTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetupVirtualChannelResponse::SetupVirtualChannelResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.SetupVirtualChannelResponse)
}

void SetupVirtualChannelResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SetupVirtualChannelResponse::SetupVirtualChannelResponse(const SetupVirtualChannelResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.SetupVirtualChannelResponse)
}

void SetupVirtualChannelResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  virtual_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relay_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relay_server_process_id_ = GOOGLE_LONGLONG(0);
  virtual_channel_auth_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SetupVirtualChannelResponse::~SetupVirtualChannelResponse() {
  // @@protoc_insertion_point(destructor:dcv.extensions.SetupVirtualChannelResponse)
  SharedDtor();
}

void SetupVirtualChannelResponse::SharedDtor() {
  virtual_channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relay_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  virtual_channel_auth_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SetupVirtualChannelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetupVirtualChannelResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetupVirtualChannelResponse_descriptor_;
}

const SetupVirtualChannelResponse& SetupVirtualChannelResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

SetupVirtualChannelResponse* SetupVirtualChannelResponse::default_instance_ = NULL;

SetupVirtualChannelResponse* SetupVirtualChannelResponse::New(::google::protobuf::Arena* arena) const {
  SetupVirtualChannelResponse* n = new SetupVirtualChannelResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetupVirtualChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.SetupVirtualChannelResponse)
  virtual_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relay_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  relay_server_process_id_ = GOOGLE_LONGLONG(0);
  virtual_channel_auth_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SetupVirtualChannelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.SetupVirtualChannelResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string virtual_channel_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_virtual_channel_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->virtual_channel_name().data(), this->virtual_channel_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_relay_path;
        break;
      }

      // optional string relay_path = 2;
      case 2: {
        if (tag == 18) {
         parse_relay_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relay_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->relay_path().data(), this->relay_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dcv.extensions.SetupVirtualChannelResponse.relay_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_relay_server_process_id;
        break;
      }

      // optional int64 relay_server_process_id = 3;
      case 3: {
        if (tag == 24) {
         parse_relay_server_process_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &relay_server_process_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_virtual_channel_auth_token;
        break;
      }

      // optional bytes virtual_channel_auth_token = 4;
      case 4: {
        if (tag == 34) {
         parse_virtual_channel_auth_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_virtual_channel_auth_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.SetupVirtualChannelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.SetupVirtualChannelResponse)
  return false;
#undef DO_
}

void SetupVirtualChannelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.SetupVirtualChannelResponse)
  // optional string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->virtual_channel_name().data(), this->virtual_channel_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->virtual_channel_name(), output);
  }

  // optional string relay_path = 2;
  if (this->relay_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->relay_path().data(), this->relay_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.SetupVirtualChannelResponse.relay_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->relay_path(), output);
  }

  // optional int64 relay_server_process_id = 3;
  if (this->relay_server_process_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->relay_server_process_id(), output);
  }

  // optional bytes virtual_channel_auth_token = 4;
  if (this->virtual_channel_auth_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->virtual_channel_auth_token(), output);
  }

  // @@protoc_insertion_point(serialize_end:dcv.extensions.SetupVirtualChannelResponse)
}

::google::protobuf::uint8* SetupVirtualChannelResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.SetupVirtualChannelResponse)
  // optional string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->virtual_channel_name().data(), this->virtual_channel_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->virtual_channel_name(), target);
  }

  // optional string relay_path = 2;
  if (this->relay_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->relay_path().data(), this->relay_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.SetupVirtualChannelResponse.relay_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->relay_path(), target);
  }

  // optional int64 relay_server_process_id = 3;
  if (this->relay_server_process_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->relay_server_process_id(), target);
  }

  // optional bytes virtual_channel_auth_token = 4;
  if (this->virtual_channel_auth_token().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->virtual_channel_auth_token(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.SetupVirtualChannelResponse)
  return target;
}

int SetupVirtualChannelResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.SetupVirtualChannelResponse)
  int total_size = 0;

  // optional string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->virtual_channel_name());
  }

  // optional string relay_path = 2;
  if (this->relay_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->relay_path());
  }

  // optional int64 relay_server_process_id = 3;
  if (this->relay_server_process_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->relay_server_process_id());
  }

  // optional bytes virtual_channel_auth_token = 4;
  if (this->virtual_channel_auth_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->virtual_channel_auth_token());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetupVirtualChannelResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.SetupVirtualChannelResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SetupVirtualChannelResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetupVirtualChannelResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.SetupVirtualChannelResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.SetupVirtualChannelResponse)
    MergeFrom(*source);
  }
}

void SetupVirtualChannelResponse::MergeFrom(const SetupVirtualChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.SetupVirtualChannelResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.virtual_channel_name().size() > 0) {

    virtual_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.virtual_channel_name_);
  }
  if (from.relay_path().size() > 0) {

    relay_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.relay_path_);
  }
  if (from.relay_server_process_id() != 0) {
    set_relay_server_process_id(from.relay_server_process_id());
  }
  if (from.virtual_channel_auth_token().size() > 0) {

    virtual_channel_auth_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.virtual_channel_auth_token_);
  }
}

void SetupVirtualChannelResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.SetupVirtualChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetupVirtualChannelResponse::CopyFrom(const SetupVirtualChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.SetupVirtualChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupVirtualChannelResponse::IsInitialized() const {

  return true;
}

void SetupVirtualChannelResponse::Swap(SetupVirtualChannelResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetupVirtualChannelResponse::InternalSwap(SetupVirtualChannelResponse* other) {
  virtual_channel_name_.Swap(&other->virtual_channel_name_);
  relay_path_.Swap(&other->relay_path_);
  std::swap(relay_server_process_id_, other->relay_server_process_id_);
  virtual_channel_auth_token_.Swap(&other->virtual_channel_auth_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetupVirtualChannelResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetupVirtualChannelResponse_descriptor_;
  metadata.reflection = SetupVirtualChannelResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetupVirtualChannelResponse

// optional string virtual_channel_name = 1;
void SetupVirtualChannelResponse::clear_virtual_channel_name() {
  virtual_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SetupVirtualChannelResponse::virtual_channel_name() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
  return virtual_channel_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SetupVirtualChannelResponse::set_virtual_channel_name(const ::std::string& value) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
}
 void SetupVirtualChannelResponse::set_virtual_channel_name(const char* value) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
}
 void SetupVirtualChannelResponse::set_virtual_channel_name(const char* value, size_t size) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
}
 ::std::string* SetupVirtualChannelResponse::mutable_virtual_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
  return virtual_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SetupVirtualChannelResponse::release_virtual_channel_name() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
  
  return virtual_channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SetupVirtualChannelResponse::set_allocated_virtual_channel_name(::std::string* virtual_channel_name) {
  if (virtual_channel_name != NULL) {
    
  } else {
    
  }
  virtual_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), virtual_channel_name);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
}

// optional string relay_path = 2;
void SetupVirtualChannelResponse::clear_relay_path() {
  relay_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SetupVirtualChannelResponse::relay_path() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetupVirtualChannelResponse.relay_path)
  return relay_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SetupVirtualChannelResponse::set_relay_path(const ::std::string& value) {
  
  relay_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SetupVirtualChannelResponse.relay_path)
}
 void SetupVirtualChannelResponse::set_relay_path(const char* value) {
  
  relay_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.SetupVirtualChannelResponse.relay_path)
}
 void SetupVirtualChannelResponse::set_relay_path(const char* value, size_t size) {
  
  relay_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.SetupVirtualChannelResponse.relay_path)
}
 ::std::string* SetupVirtualChannelResponse::mutable_relay_path() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SetupVirtualChannelResponse.relay_path)
  return relay_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SetupVirtualChannelResponse::release_relay_path() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SetupVirtualChannelResponse.relay_path)
  
  return relay_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SetupVirtualChannelResponse::set_allocated_relay_path(::std::string* relay_path) {
  if (relay_path != NULL) {
    
  } else {
    
  }
  relay_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), relay_path);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SetupVirtualChannelResponse.relay_path)
}

// optional int64 relay_server_process_id = 3;
void SetupVirtualChannelResponse::clear_relay_server_process_id() {
  relay_server_process_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 SetupVirtualChannelResponse::relay_server_process_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetupVirtualChannelResponse.relay_server_process_id)
  return relay_server_process_id_;
}
 void SetupVirtualChannelResponse::set_relay_server_process_id(::google::protobuf::int64 value) {
  
  relay_server_process_id_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.SetupVirtualChannelResponse.relay_server_process_id)
}

// optional bytes virtual_channel_auth_token = 4;
void SetupVirtualChannelResponse::clear_virtual_channel_auth_token() {
  virtual_channel_auth_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SetupVirtualChannelResponse::virtual_channel_auth_token() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
  return virtual_channel_auth_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SetupVirtualChannelResponse::set_virtual_channel_auth_token(const ::std::string& value) {
  
  virtual_channel_auth_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
}
 void SetupVirtualChannelResponse::set_virtual_channel_auth_token(const char* value) {
  
  virtual_channel_auth_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
}
 void SetupVirtualChannelResponse::set_virtual_channel_auth_token(const void* value, size_t size) {
  
  virtual_channel_auth_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
}
 ::std::string* SetupVirtualChannelResponse::mutable_virtual_channel_auth_token() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
  return virtual_channel_auth_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SetupVirtualChannelResponse::release_virtual_channel_auth_token() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
  
  return virtual_channel_auth_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SetupVirtualChannelResponse::set_allocated_virtual_channel_auth_token(::std::string* virtual_channel_auth_token) {
  if (virtual_channel_auth_token != NULL) {
    
  } else {
    
  }
  virtual_channel_auth_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), virtual_channel_auth_token);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloseVirtualChannelResponse::kVirtualChannelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloseVirtualChannelResponse::CloseVirtualChannelResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.CloseVirtualChannelResponse)
}

void CloseVirtualChannelResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CloseVirtualChannelResponse::CloseVirtualChannelResponse(const CloseVirtualChannelResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.CloseVirtualChannelResponse)
}

void CloseVirtualChannelResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  virtual_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CloseVirtualChannelResponse::~CloseVirtualChannelResponse() {
  // @@protoc_insertion_point(destructor:dcv.extensions.CloseVirtualChannelResponse)
  SharedDtor();
}

void CloseVirtualChannelResponse::SharedDtor() {
  virtual_channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CloseVirtualChannelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseVirtualChannelResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseVirtualChannelResponse_descriptor_;
}

const CloseVirtualChannelResponse& CloseVirtualChannelResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

CloseVirtualChannelResponse* CloseVirtualChannelResponse::default_instance_ = NULL;

CloseVirtualChannelResponse* CloseVirtualChannelResponse::New(::google::protobuf::Arena* arena) const {
  CloseVirtualChannelResponse* n = new CloseVirtualChannelResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloseVirtualChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.CloseVirtualChannelResponse)
  virtual_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CloseVirtualChannelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.CloseVirtualChannelResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string virtual_channel_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_virtual_channel_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->virtual_channel_name().data(), this->virtual_channel_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.CloseVirtualChannelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.CloseVirtualChannelResponse)
  return false;
#undef DO_
}

void CloseVirtualChannelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.CloseVirtualChannelResponse)
  // optional string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->virtual_channel_name().data(), this->virtual_channel_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->virtual_channel_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:dcv.extensions.CloseVirtualChannelResponse)
}

::google::protobuf::uint8* CloseVirtualChannelResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.CloseVirtualChannelResponse)
  // optional string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->virtual_channel_name().data(), this->virtual_channel_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->virtual_channel_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.CloseVirtualChannelResponse)
  return target;
}

int CloseVirtualChannelResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.CloseVirtualChannelResponse)
  int total_size = 0;

  // optional string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->virtual_channel_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseVirtualChannelResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.CloseVirtualChannelResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CloseVirtualChannelResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CloseVirtualChannelResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.CloseVirtualChannelResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.CloseVirtualChannelResponse)
    MergeFrom(*source);
  }
}

void CloseVirtualChannelResponse::MergeFrom(const CloseVirtualChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.CloseVirtualChannelResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.virtual_channel_name().size() > 0) {

    virtual_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.virtual_channel_name_);
  }
}

void CloseVirtualChannelResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.CloseVirtualChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseVirtualChannelResponse::CopyFrom(const CloseVirtualChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.CloseVirtualChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseVirtualChannelResponse::IsInitialized() const {

  return true;
}

void CloseVirtualChannelResponse::Swap(CloseVirtualChannelResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloseVirtualChannelResponse::InternalSwap(CloseVirtualChannelResponse* other) {
  virtual_channel_name_.Swap(&other->virtual_channel_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloseVirtualChannelResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseVirtualChannelResponse_descriptor_;
  metadata.reflection = CloseVirtualChannelResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloseVirtualChannelResponse

// optional string virtual_channel_name = 1;
void CloseVirtualChannelResponse::clear_virtual_channel_name() {
  virtual_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CloseVirtualChannelResponse::virtual_channel_name() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
  return virtual_channel_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CloseVirtualChannelResponse::set_virtual_channel_name(const ::std::string& value) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
}
 void CloseVirtualChannelResponse::set_virtual_channel_name(const char* value) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
}
 void CloseVirtualChannelResponse::set_virtual_channel_name(const char* value, size_t size) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
}
 ::std::string* CloseVirtualChannelResponse::mutable_virtual_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
  return virtual_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CloseVirtualChannelResponse::release_virtual_channel_name() {
  // @@protoc_insertion_point(field_release:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
  
  return virtual_channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CloseVirtualChannelResponse::set_allocated_virtual_channel_name(::std::string* virtual_channel_name) {
  if (virtual_channel_name != NULL) {
    
  } else {
    
  }
  virtual_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), virtual_channel_name);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetCursorPointResponse::SetCursorPointResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.SetCursorPointResponse)
}

void SetCursorPointResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SetCursorPointResponse::SetCursorPointResponse(const SetCursorPointResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.SetCursorPointResponse)
}

void SetCursorPointResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SetCursorPointResponse::~SetCursorPointResponse() {
  // @@protoc_insertion_point(destructor:dcv.extensions.SetCursorPointResponse)
  SharedDtor();
}

void SetCursorPointResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetCursorPointResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetCursorPointResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetCursorPointResponse_descriptor_;
}

const SetCursorPointResponse& SetCursorPointResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

SetCursorPointResponse* SetCursorPointResponse::default_instance_ = NULL;

SetCursorPointResponse* SetCursorPointResponse::New(::google::protobuf::Arena* arena) const {
  SetCursorPointResponse* n = new SetCursorPointResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetCursorPointResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.SetCursorPointResponse)
}

bool SetCursorPointResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.SetCursorPointResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.SetCursorPointResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.SetCursorPointResponse)
  return false;
#undef DO_
}

void SetCursorPointResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.SetCursorPointResponse)
  // @@protoc_insertion_point(serialize_end:dcv.extensions.SetCursorPointResponse)
}

::google::protobuf::uint8* SetCursorPointResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.SetCursorPointResponse)
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.SetCursorPointResponse)
  return target;
}

int SetCursorPointResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.SetCursorPointResponse)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetCursorPointResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.SetCursorPointResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SetCursorPointResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetCursorPointResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.SetCursorPointResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.SetCursorPointResponse)
    MergeFrom(*source);
  }
}

void SetCursorPointResponse::MergeFrom(const SetCursorPointResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.SetCursorPointResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void SetCursorPointResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.SetCursorPointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCursorPointResponse::CopyFrom(const SetCursorPointResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.SetCursorPointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCursorPointResponse::IsInitialized() const {

  return true;
}

void SetCursorPointResponse::Swap(SetCursorPointResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetCursorPointResponse::InternalSwap(SetCursorPointResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetCursorPointResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetCursorPointResponse_descriptor_;
  metadata.reflection = SetCursorPointResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetCursorPointResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetStreamingViewsResponse::kStreamingViewsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetStreamingViewsResponse::GetStreamingViewsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.GetStreamingViewsResponse)
}

void GetStreamingViewsResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  streaming_views_ = const_cast< ::dcv::extensions::StreamingViews*>(&::dcv::extensions::StreamingViews::default_instance());
}

GetStreamingViewsResponse::GetStreamingViewsResponse(const GetStreamingViewsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.GetStreamingViewsResponse)
}

void GetStreamingViewsResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  streaming_views_ = NULL;
}

GetStreamingViewsResponse::~GetStreamingViewsResponse() {
  // @@protoc_insertion_point(destructor:dcv.extensions.GetStreamingViewsResponse)
  SharedDtor();
}

void GetStreamingViewsResponse::SharedDtor() {
  if (this != default_instance_) {
    delete streaming_views_;
  }
}

void GetStreamingViewsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStreamingViewsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStreamingViewsResponse_descriptor_;
}

const GetStreamingViewsResponse& GetStreamingViewsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

GetStreamingViewsResponse* GetStreamingViewsResponse::default_instance_ = NULL;

GetStreamingViewsResponse* GetStreamingViewsResponse::New(::google::protobuf::Arena* arena) const {
  GetStreamingViewsResponse* n = new GetStreamingViewsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetStreamingViewsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.GetStreamingViewsResponse)
  if (GetArenaNoVirtual() == NULL && streaming_views_ != NULL) delete streaming_views_;
  streaming_views_ = NULL;
}

bool GetStreamingViewsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.GetStreamingViewsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dcv.extensions.StreamingViews streaming_views = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_streaming_views()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.GetStreamingViewsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.GetStreamingViewsResponse)
  return false;
#undef DO_
}

void GetStreamingViewsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.GetStreamingViewsResponse)
  // optional .dcv.extensions.StreamingViews streaming_views = 1;
  if (this->has_streaming_views()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->streaming_views_, output);
  }

  // @@protoc_insertion_point(serialize_end:dcv.extensions.GetStreamingViewsResponse)
}

::google::protobuf::uint8* GetStreamingViewsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.GetStreamingViewsResponse)
  // optional .dcv.extensions.StreamingViews streaming_views = 1;
  if (this->has_streaming_views()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->streaming_views_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.GetStreamingViewsResponse)
  return target;
}

int GetStreamingViewsResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.GetStreamingViewsResponse)
  int total_size = 0;

  // optional .dcv.extensions.StreamingViews streaming_views = 1;
  if (this->has_streaming_views()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->streaming_views_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStreamingViewsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.GetStreamingViewsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetStreamingViewsResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetStreamingViewsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.GetStreamingViewsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.GetStreamingViewsResponse)
    MergeFrom(*source);
  }
}

void GetStreamingViewsResponse::MergeFrom(const GetStreamingViewsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.GetStreamingViewsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_streaming_views()) {
    mutable_streaming_views()->::dcv::extensions::StreamingViews::MergeFrom(from.streaming_views());
  }
}

void GetStreamingViewsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.GetStreamingViewsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamingViewsResponse::CopyFrom(const GetStreamingViewsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.GetStreamingViewsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamingViewsResponse::IsInitialized() const {

  return true;
}

void GetStreamingViewsResponse::Swap(GetStreamingViewsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetStreamingViewsResponse::InternalSwap(GetStreamingViewsResponse* other) {
  std::swap(streaming_views_, other->streaming_views_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetStreamingViewsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStreamingViewsResponse_descriptor_;
  metadata.reflection = GetStreamingViewsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetStreamingViewsResponse

// optional .dcv.extensions.StreamingViews streaming_views = 1;
bool GetStreamingViewsResponse::has_streaming_views() const {
  return !_is_default_instance_ && streaming_views_ != NULL;
}
void GetStreamingViewsResponse::clear_streaming_views() {
  if (GetArenaNoVirtual() == NULL && streaming_views_ != NULL) delete streaming_views_;
  streaming_views_ = NULL;
}
const ::dcv::extensions::StreamingViews& GetStreamingViewsResponse::streaming_views() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.GetStreamingViewsResponse.streaming_views)
  return streaming_views_ != NULL ? *streaming_views_ : *default_instance_->streaming_views_;
}
::dcv::extensions::StreamingViews* GetStreamingViewsResponse::mutable_streaming_views() {
  
  if (streaming_views_ == NULL) {
    streaming_views_ = new ::dcv::extensions::StreamingViews;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.GetStreamingViewsResponse.streaming_views)
  return streaming_views_;
}
::dcv::extensions::StreamingViews* GetStreamingViewsResponse::release_streaming_views() {
  // @@protoc_insertion_point(field_release:dcv.extensions.GetStreamingViewsResponse.streaming_views)
  
  ::dcv::extensions::StreamingViews* temp = streaming_views_;
  streaming_views_ = NULL;
  return temp;
}
void GetStreamingViewsResponse::set_allocated_streaming_views(::dcv::extensions::StreamingViews* streaming_views) {
  delete streaming_views_;
  streaming_views_ = streaming_views;
  if (streaming_views) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.GetStreamingViewsResponse.streaming_views)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IsPointInsideStreamingViewsResponse::kViewIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IsPointInsideStreamingViewsResponse::IsPointInsideStreamingViewsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.IsPointInsideStreamingViewsResponse)
}

void IsPointInsideStreamingViewsResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IsPointInsideStreamingViewsResponse::IsPointInsideStreamingViewsResponse(const IsPointInsideStreamingViewsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.IsPointInsideStreamingViewsResponse)
}

void IsPointInsideStreamingViewsResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  view_id_ = 0;
}

IsPointInsideStreamingViewsResponse::~IsPointInsideStreamingViewsResponse() {
  // @@protoc_insertion_point(destructor:dcv.extensions.IsPointInsideStreamingViewsResponse)
  SharedDtor();
}

void IsPointInsideStreamingViewsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IsPointInsideStreamingViewsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsPointInsideStreamingViewsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsPointInsideStreamingViewsResponse_descriptor_;
}

const IsPointInsideStreamingViewsResponse& IsPointInsideStreamingViewsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

IsPointInsideStreamingViewsResponse* IsPointInsideStreamingViewsResponse::default_instance_ = NULL;

IsPointInsideStreamingViewsResponse* IsPointInsideStreamingViewsResponse::New(::google::protobuf::Arena* arena) const {
  IsPointInsideStreamingViewsResponse* n = new IsPointInsideStreamingViewsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IsPointInsideStreamingViewsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.IsPointInsideStreamingViewsResponse)
  view_id_ = 0;
}

bool IsPointInsideStreamingViewsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.IsPointInsideStreamingViewsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 view_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &view_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.IsPointInsideStreamingViewsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.IsPointInsideStreamingViewsResponse)
  return false;
#undef DO_
}

void IsPointInsideStreamingViewsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.IsPointInsideStreamingViewsResponse)
  // optional int32 view_id = 1;
  if (this->view_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->view_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:dcv.extensions.IsPointInsideStreamingViewsResponse)
}

::google::protobuf::uint8* IsPointInsideStreamingViewsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.IsPointInsideStreamingViewsResponse)
  // optional int32 view_id = 1;
  if (this->view_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->view_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.IsPointInsideStreamingViewsResponse)
  return target;
}

int IsPointInsideStreamingViewsResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.IsPointInsideStreamingViewsResponse)
  int total_size = 0;

  // optional int32 view_id = 1;
  if (this->view_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->view_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsPointInsideStreamingViewsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.IsPointInsideStreamingViewsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IsPointInsideStreamingViewsResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IsPointInsideStreamingViewsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.IsPointInsideStreamingViewsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.IsPointInsideStreamingViewsResponse)
    MergeFrom(*source);
  }
}

void IsPointInsideStreamingViewsResponse::MergeFrom(const IsPointInsideStreamingViewsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.IsPointInsideStreamingViewsResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.view_id() != 0) {
    set_view_id(from.view_id());
  }
}

void IsPointInsideStreamingViewsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.IsPointInsideStreamingViewsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsPointInsideStreamingViewsResponse::CopyFrom(const IsPointInsideStreamingViewsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.IsPointInsideStreamingViewsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsPointInsideStreamingViewsResponse::IsInitialized() const {

  return true;
}

void IsPointInsideStreamingViewsResponse::Swap(IsPointInsideStreamingViewsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IsPointInsideStreamingViewsResponse::InternalSwap(IsPointInsideStreamingViewsResponse* other) {
  std::swap(view_id_, other->view_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IsPointInsideStreamingViewsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsPointInsideStreamingViewsResponse_descriptor_;
  metadata.reflection = IsPointInsideStreamingViewsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IsPointInsideStreamingViewsResponse

// optional int32 view_id = 1;
void IsPointInsideStreamingViewsResponse::clear_view_id() {
  view_id_ = 0;
}
 ::google::protobuf::int32 IsPointInsideStreamingViewsResponse::view_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.IsPointInsideStreamingViewsResponse.view_id)
  return view_id_;
}
 void IsPointInsideStreamingViewsResponse::set_view_id(::google::protobuf::int32 value) {
  
  view_id_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.IsPointInsideStreamingViewsResponse.view_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VirtualChannelReadyEvent::kVirtualChannelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VirtualChannelReadyEvent::VirtualChannelReadyEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.VirtualChannelReadyEvent)
}

void VirtualChannelReadyEvent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VirtualChannelReadyEvent::VirtualChannelReadyEvent(const VirtualChannelReadyEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.VirtualChannelReadyEvent)
}

void VirtualChannelReadyEvent::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  virtual_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VirtualChannelReadyEvent::~VirtualChannelReadyEvent() {
  // @@protoc_insertion_point(destructor:dcv.extensions.VirtualChannelReadyEvent)
  SharedDtor();
}

void VirtualChannelReadyEvent::SharedDtor() {
  virtual_channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void VirtualChannelReadyEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VirtualChannelReadyEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VirtualChannelReadyEvent_descriptor_;
}

const VirtualChannelReadyEvent& VirtualChannelReadyEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

VirtualChannelReadyEvent* VirtualChannelReadyEvent::default_instance_ = NULL;

VirtualChannelReadyEvent* VirtualChannelReadyEvent::New(::google::protobuf::Arena* arena) const {
  VirtualChannelReadyEvent* n = new VirtualChannelReadyEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VirtualChannelReadyEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.VirtualChannelReadyEvent)
  virtual_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool VirtualChannelReadyEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.VirtualChannelReadyEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string virtual_channel_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_virtual_channel_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->virtual_channel_name().data(), this->virtual_channel_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.VirtualChannelReadyEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.VirtualChannelReadyEvent)
  return false;
#undef DO_
}

void VirtualChannelReadyEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.VirtualChannelReadyEvent)
  // optional string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->virtual_channel_name().data(), this->virtual_channel_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->virtual_channel_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:dcv.extensions.VirtualChannelReadyEvent)
}

::google::protobuf::uint8* VirtualChannelReadyEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.VirtualChannelReadyEvent)
  // optional string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->virtual_channel_name().data(), this->virtual_channel_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->virtual_channel_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.VirtualChannelReadyEvent)
  return target;
}

int VirtualChannelReadyEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.VirtualChannelReadyEvent)
  int total_size = 0;

  // optional string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->virtual_channel_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VirtualChannelReadyEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.VirtualChannelReadyEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VirtualChannelReadyEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VirtualChannelReadyEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.VirtualChannelReadyEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.VirtualChannelReadyEvent)
    MergeFrom(*source);
  }
}

void VirtualChannelReadyEvent::MergeFrom(const VirtualChannelReadyEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.VirtualChannelReadyEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.virtual_channel_name().size() > 0) {

    virtual_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.virtual_channel_name_);
  }
}

void VirtualChannelReadyEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.VirtualChannelReadyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VirtualChannelReadyEvent::CopyFrom(const VirtualChannelReadyEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.VirtualChannelReadyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualChannelReadyEvent::IsInitialized() const {

  return true;
}

void VirtualChannelReadyEvent::Swap(VirtualChannelReadyEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VirtualChannelReadyEvent::InternalSwap(VirtualChannelReadyEvent* other) {
  virtual_channel_name_.Swap(&other->virtual_channel_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VirtualChannelReadyEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VirtualChannelReadyEvent_descriptor_;
  metadata.reflection = VirtualChannelReadyEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VirtualChannelReadyEvent

// optional string virtual_channel_name = 1;
void VirtualChannelReadyEvent::clear_virtual_channel_name() {
  virtual_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VirtualChannelReadyEvent::virtual_channel_name() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
  return virtual_channel_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VirtualChannelReadyEvent::set_virtual_channel_name(const ::std::string& value) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
}
 void VirtualChannelReadyEvent::set_virtual_channel_name(const char* value) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
}
 void VirtualChannelReadyEvent::set_virtual_channel_name(const char* value, size_t size) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
}
 ::std::string* VirtualChannelReadyEvent::mutable_virtual_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
  return virtual_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VirtualChannelReadyEvent::release_virtual_channel_name() {
  // @@protoc_insertion_point(field_release:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
  
  return virtual_channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VirtualChannelReadyEvent::set_allocated_virtual_channel_name(::std::string* virtual_channel_name) {
  if (virtual_channel_name != NULL) {
    
  } else {
    
  }
  virtual_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), virtual_channel_name);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VirtualChannelClosedEvent::kVirtualChannelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VirtualChannelClosedEvent::VirtualChannelClosedEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.VirtualChannelClosedEvent)
}

void VirtualChannelClosedEvent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

VirtualChannelClosedEvent::VirtualChannelClosedEvent(const VirtualChannelClosedEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.VirtualChannelClosedEvent)
}

void VirtualChannelClosedEvent::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  virtual_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

VirtualChannelClosedEvent::~VirtualChannelClosedEvent() {
  // @@protoc_insertion_point(destructor:dcv.extensions.VirtualChannelClosedEvent)
  SharedDtor();
}

void VirtualChannelClosedEvent::SharedDtor() {
  virtual_channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void VirtualChannelClosedEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VirtualChannelClosedEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VirtualChannelClosedEvent_descriptor_;
}

const VirtualChannelClosedEvent& VirtualChannelClosedEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

VirtualChannelClosedEvent* VirtualChannelClosedEvent::default_instance_ = NULL;

VirtualChannelClosedEvent* VirtualChannelClosedEvent::New(::google::protobuf::Arena* arena) const {
  VirtualChannelClosedEvent* n = new VirtualChannelClosedEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VirtualChannelClosedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.VirtualChannelClosedEvent)
  virtual_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool VirtualChannelClosedEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.VirtualChannelClosedEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string virtual_channel_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_virtual_channel_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->virtual_channel_name().data(), this->virtual_channel_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.VirtualChannelClosedEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.VirtualChannelClosedEvent)
  return false;
#undef DO_
}

void VirtualChannelClosedEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.VirtualChannelClosedEvent)
  // optional string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->virtual_channel_name().data(), this->virtual_channel_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->virtual_channel_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:dcv.extensions.VirtualChannelClosedEvent)
}

::google::protobuf::uint8* VirtualChannelClosedEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.VirtualChannelClosedEvent)
  // optional string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->virtual_channel_name().data(), this->virtual_channel_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->virtual_channel_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.VirtualChannelClosedEvent)
  return target;
}

int VirtualChannelClosedEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.VirtualChannelClosedEvent)
  int total_size = 0;

  // optional string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->virtual_channel_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VirtualChannelClosedEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.VirtualChannelClosedEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VirtualChannelClosedEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VirtualChannelClosedEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.VirtualChannelClosedEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.VirtualChannelClosedEvent)
    MergeFrom(*source);
  }
}

void VirtualChannelClosedEvent::MergeFrom(const VirtualChannelClosedEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.VirtualChannelClosedEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.virtual_channel_name().size() > 0) {

    virtual_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.virtual_channel_name_);
  }
}

void VirtualChannelClosedEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.VirtualChannelClosedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VirtualChannelClosedEvent::CopyFrom(const VirtualChannelClosedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.VirtualChannelClosedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualChannelClosedEvent::IsInitialized() const {

  return true;
}

void VirtualChannelClosedEvent::Swap(VirtualChannelClosedEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VirtualChannelClosedEvent::InternalSwap(VirtualChannelClosedEvent* other) {
  virtual_channel_name_.Swap(&other->virtual_channel_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VirtualChannelClosedEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VirtualChannelClosedEvent_descriptor_;
  metadata.reflection = VirtualChannelClosedEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VirtualChannelClosedEvent

// optional string virtual_channel_name = 1;
void VirtualChannelClosedEvent::clear_virtual_channel_name() {
  virtual_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& VirtualChannelClosedEvent::virtual_channel_name() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
  return virtual_channel_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VirtualChannelClosedEvent::set_virtual_channel_name(const ::std::string& value) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
}
 void VirtualChannelClosedEvent::set_virtual_channel_name(const char* value) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
}
 void VirtualChannelClosedEvent::set_virtual_channel_name(const char* value, size_t size) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
}
 ::std::string* VirtualChannelClosedEvent::mutable_virtual_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
  return virtual_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* VirtualChannelClosedEvent::release_virtual_channel_name() {
  // @@protoc_insertion_point(field_release:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
  
  return virtual_channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void VirtualChannelClosedEvent::set_allocated_virtual_channel_name(::std::string* virtual_channel_name) {
  if (virtual_channel_name != NULL) {
    
  } else {
    
  }
  virtual_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), virtual_channel_name);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingViewsChangedEvent::kStreamingViewsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingViewsChangedEvent::StreamingViewsChangedEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.StreamingViewsChangedEvent)
}

void StreamingViewsChangedEvent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  streaming_views_ = const_cast< ::dcv::extensions::StreamingViews*>(&::dcv::extensions::StreamingViews::default_instance());
}

StreamingViewsChangedEvent::StreamingViewsChangedEvent(const StreamingViewsChangedEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.StreamingViewsChangedEvent)
}

void StreamingViewsChangedEvent::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  streaming_views_ = NULL;
}

StreamingViewsChangedEvent::~StreamingViewsChangedEvent() {
  // @@protoc_insertion_point(destructor:dcv.extensions.StreamingViewsChangedEvent)
  SharedDtor();
}

void StreamingViewsChangedEvent::SharedDtor() {
  if (this != default_instance_) {
    delete streaming_views_;
  }
}

void StreamingViewsChangedEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamingViewsChangedEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamingViewsChangedEvent_descriptor_;
}

const StreamingViewsChangedEvent& StreamingViewsChangedEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

StreamingViewsChangedEvent* StreamingViewsChangedEvent::default_instance_ = NULL;

StreamingViewsChangedEvent* StreamingViewsChangedEvent::New(::google::protobuf::Arena* arena) const {
  StreamingViewsChangedEvent* n = new StreamingViewsChangedEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreamingViewsChangedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.StreamingViewsChangedEvent)
  if (GetArenaNoVirtual() == NULL && streaming_views_ != NULL) delete streaming_views_;
  streaming_views_ = NULL;
}

bool StreamingViewsChangedEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.StreamingViewsChangedEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dcv.extensions.StreamingViews streaming_views = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_streaming_views()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.StreamingViewsChangedEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.StreamingViewsChangedEvent)
  return false;
#undef DO_
}

void StreamingViewsChangedEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.StreamingViewsChangedEvent)
  // optional .dcv.extensions.StreamingViews streaming_views = 1;
  if (this->has_streaming_views()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->streaming_views_, output);
  }

  // @@protoc_insertion_point(serialize_end:dcv.extensions.StreamingViewsChangedEvent)
}

::google::protobuf::uint8* StreamingViewsChangedEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.StreamingViewsChangedEvent)
  // optional .dcv.extensions.StreamingViews streaming_views = 1;
  if (this->has_streaming_views()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->streaming_views_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.StreamingViewsChangedEvent)
  return target;
}

int StreamingViewsChangedEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.StreamingViewsChangedEvent)
  int total_size = 0;

  // optional .dcv.extensions.StreamingViews streaming_views = 1;
  if (this->has_streaming_views()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->streaming_views_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamingViewsChangedEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.StreamingViewsChangedEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StreamingViewsChangedEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamingViewsChangedEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.StreamingViewsChangedEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.StreamingViewsChangedEvent)
    MergeFrom(*source);
  }
}

void StreamingViewsChangedEvent::MergeFrom(const StreamingViewsChangedEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.StreamingViewsChangedEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_streaming_views()) {
    mutable_streaming_views()->::dcv::extensions::StreamingViews::MergeFrom(from.streaming_views());
  }
}

void StreamingViewsChangedEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.StreamingViewsChangedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingViewsChangedEvent::CopyFrom(const StreamingViewsChangedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.StreamingViewsChangedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingViewsChangedEvent::IsInitialized() const {

  return true;
}

void StreamingViewsChangedEvent::Swap(StreamingViewsChangedEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreamingViewsChangedEvent::InternalSwap(StreamingViewsChangedEvent* other) {
  std::swap(streaming_views_, other->streaming_views_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamingViewsChangedEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamingViewsChangedEvent_descriptor_;
  metadata.reflection = StreamingViewsChangedEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreamingViewsChangedEvent

// optional .dcv.extensions.StreamingViews streaming_views = 1;
bool StreamingViewsChangedEvent::has_streaming_views() const {
  return !_is_default_instance_ && streaming_views_ != NULL;
}
void StreamingViewsChangedEvent::clear_streaming_views() {
  if (GetArenaNoVirtual() == NULL && streaming_views_ != NULL) delete streaming_views_;
  streaming_views_ = NULL;
}
const ::dcv::extensions::StreamingViews& StreamingViewsChangedEvent::streaming_views() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.StreamingViewsChangedEvent.streaming_views)
  return streaming_views_ != NULL ? *streaming_views_ : *default_instance_->streaming_views_;
}
::dcv::extensions::StreamingViews* StreamingViewsChangedEvent::mutable_streaming_views() {
  
  if (streaming_views_ == NULL) {
    streaming_views_ = new ::dcv::extensions::StreamingViews;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.StreamingViewsChangedEvent.streaming_views)
  return streaming_views_;
}
::dcv::extensions::StreamingViews* StreamingViewsChangedEvent::release_streaming_views() {
  // @@protoc_insertion_point(field_release:dcv.extensions.StreamingViewsChangedEvent.streaming_views)
  
  ::dcv::extensions::StreamingViews* temp = streaming_views_;
  streaming_views_ = NULL;
  return temp;
}
void StreamingViewsChangedEvent::set_allocated_streaming_views(::dcv::extensions::StreamingViews* streaming_views) {
  delete streaming_views_;
  streaming_views_ = streaming_views;
  if (streaming_views) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.StreamingViewsChangedEvent.streaming_views)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kRequestIdFieldNumber;
const int Request::kGetDcvInfoRequestFieldNumber;
const int Request::kGetManifestRequestFieldNumber;
const int Request::kSetupVirtualChannelRequestFieldNumber;
const int Request::kCloseVirtualChannelRequestFieldNumber;
const int Request::kSetCursorPointRequestFieldNumber;
const int Request::kGetStreamingViewsRequestFieldNumber;
const int Request::kIsPointInsideStreamingViewsRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.Request)
}

void Request::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Request_default_oneof_instance_->get_dcv_info_request_ = const_cast< ::dcv::extensions::GetDcvInfoRequest*>(&::dcv::extensions::GetDcvInfoRequest::default_instance());
  Request_default_oneof_instance_->get_manifest_request_ = const_cast< ::dcv::extensions::GetManifestRequest*>(&::dcv::extensions::GetManifestRequest::default_instance());
  Request_default_oneof_instance_->setup_virtual_channel_request_ = const_cast< ::dcv::extensions::SetupVirtualChannelRequest*>(&::dcv::extensions::SetupVirtualChannelRequest::default_instance());
  Request_default_oneof_instance_->close_virtual_channel_request_ = const_cast< ::dcv::extensions::CloseVirtualChannelRequest*>(&::dcv::extensions::CloseVirtualChannelRequest::default_instance());
  Request_default_oneof_instance_->set_cursor_point_request_ = const_cast< ::dcv::extensions::SetCursorPointRequest*>(&::dcv::extensions::SetCursorPointRequest::default_instance());
  Request_default_oneof_instance_->get_streaming_views_request_ = const_cast< ::dcv::extensions::GetStreamingViewsRequest*>(&::dcv::extensions::GetStreamingViewsRequest::default_instance());
  Request_default_oneof_instance_->is_point_inside_streaming_views_request_ = const_cast< ::dcv::extensions::IsPointInsideStreamingViewsRequest*>(&::dcv::extensions::IsPointInsideStreamingViewsRequest::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.Request)
}

void Request::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:dcv.extensions.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_request()) {
    clear_request();
  }
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:dcv.extensions.Request)
  switch(request_case()) {
    case kGetDcvInfoRequest: {
      delete request_.get_dcv_info_request_;
      break;
    }
    case kGetManifestRequest: {
      delete request_.get_manifest_request_;
      break;
    }
    case kSetupVirtualChannelRequest: {
      delete request_.setup_virtual_channel_request_;
      break;
    }
    case kCloseVirtualChannelRequest: {
      delete request_.close_virtual_channel_request_;
      break;
    }
    case kSetCursorPointRequest: {
      delete request_.set_cursor_point_request_;
      break;
    }
    case kGetStreamingViewsRequest: {
      delete request_.get_streaming_views_request_;
      break;
    }
    case kIsPointInsideStreamingViewsRequest: {
      delete request_.is_point_inside_streaming_views_request_;
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.Request)
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_request();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dcv.extensions.Request.request_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_get_dcv_info_request;
        break;
      }

      // optional .dcv.extensions.GetDcvInfoRequest get_dcv_info_request = 10;
      case 10: {
        if (tag == 82) {
         parse_get_dcv_info_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_dcv_info_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_get_manifest_request;
        break;
      }

      // optional .dcv.extensions.GetManifestRequest get_manifest_request = 11;
      case 11: {
        if (tag == 90) {
         parse_get_manifest_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_manifest_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_setup_virtual_channel_request;
        break;
      }

      // optional .dcv.extensions.SetupVirtualChannelRequest setup_virtual_channel_request = 20;
      case 20: {
        if (tag == 162) {
         parse_setup_virtual_channel_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setup_virtual_channel_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_close_virtual_channel_request;
        break;
      }

      // optional .dcv.extensions.CloseVirtualChannelRequest close_virtual_channel_request = 21;
      case 21: {
        if (tag == 170) {
         parse_close_virtual_channel_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_close_virtual_channel_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_set_cursor_point_request;
        break;
      }

      // optional .dcv.extensions.SetCursorPointRequest set_cursor_point_request = 30;
      case 30: {
        if (tag == 242) {
         parse_set_cursor_point_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_cursor_point_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_get_streaming_views_request;
        break;
      }

      // optional .dcv.extensions.GetStreamingViewsRequest get_streaming_views_request = 31;
      case 31: {
        if (tag == 250) {
         parse_get_streaming_views_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_streaming_views_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_is_point_inside_streaming_views_request;
        break;
      }

      // optional .dcv.extensions.IsPointInsideStreamingViewsRequest is_point_inside_streaming_views_request = 32;
      case 32: {
        if (tag == 258) {
         parse_is_point_inside_streaming_views_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_is_point_inside_streaming_views_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.Request)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.Request.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // optional .dcv.extensions.GetDcvInfoRequest get_dcv_info_request = 10;
  if (has_get_dcv_info_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *request_.get_dcv_info_request_, output);
  }

  // optional .dcv.extensions.GetManifestRequest get_manifest_request = 11;
  if (has_get_manifest_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *request_.get_manifest_request_, output);
  }

  // optional .dcv.extensions.SetupVirtualChannelRequest setup_virtual_channel_request = 20;
  if (has_setup_virtual_channel_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *request_.setup_virtual_channel_request_, output);
  }

  // optional .dcv.extensions.CloseVirtualChannelRequest close_virtual_channel_request = 21;
  if (has_close_virtual_channel_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *request_.close_virtual_channel_request_, output);
  }

  // optional .dcv.extensions.SetCursorPointRequest set_cursor_point_request = 30;
  if (has_set_cursor_point_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *request_.set_cursor_point_request_, output);
  }

  // optional .dcv.extensions.GetStreamingViewsRequest get_streaming_views_request = 31;
  if (has_get_streaming_views_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *request_.get_streaming_views_request_, output);
  }

  // optional .dcv.extensions.IsPointInsideStreamingViewsRequest is_point_inside_streaming_views_request = 32;
  if (has_is_point_inside_streaming_views_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, *request_.is_point_inside_streaming_views_request_, output);
  }

  // @@protoc_insertion_point(serialize_end:dcv.extensions.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.Request)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.Request.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional .dcv.extensions.GetDcvInfoRequest get_dcv_info_request = 10;
  if (has_get_dcv_info_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *request_.get_dcv_info_request_, false, target);
  }

  // optional .dcv.extensions.GetManifestRequest get_manifest_request = 11;
  if (has_get_manifest_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *request_.get_manifest_request_, false, target);
  }

  // optional .dcv.extensions.SetupVirtualChannelRequest setup_virtual_channel_request = 20;
  if (has_setup_virtual_channel_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *request_.setup_virtual_channel_request_, false, target);
  }

  // optional .dcv.extensions.CloseVirtualChannelRequest close_virtual_channel_request = 21;
  if (has_close_virtual_channel_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *request_.close_virtual_channel_request_, false, target);
  }

  // optional .dcv.extensions.SetCursorPointRequest set_cursor_point_request = 30;
  if (has_set_cursor_point_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *request_.set_cursor_point_request_, false, target);
  }

  // optional .dcv.extensions.GetStreamingViewsRequest get_streaming_views_request = 31;
  if (has_get_streaming_views_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *request_.get_streaming_views_request_, false, target);
  }

  // optional .dcv.extensions.IsPointInsideStreamingViewsRequest is_point_inside_streaming_views_request = 32;
  if (has_is_point_inside_streaming_views_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, *request_.is_point_inside_streaming_views_request_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.Request)
  return target;
}

int Request::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.Request)
  int total_size = 0;

  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  switch (request_case()) {
    // optional .dcv.extensions.GetDcvInfoRequest get_dcv_info_request = 10;
    case kGetDcvInfoRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.get_dcv_info_request_);
      break;
    }
    // optional .dcv.extensions.GetManifestRequest get_manifest_request = 11;
    case kGetManifestRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.get_manifest_request_);
      break;
    }
    // optional .dcv.extensions.SetupVirtualChannelRequest setup_virtual_channel_request = 20;
    case kSetupVirtualChannelRequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.setup_virtual_channel_request_);
      break;
    }
    // optional .dcv.extensions.CloseVirtualChannelRequest close_virtual_channel_request = 21;
    case kCloseVirtualChannelRequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.close_virtual_channel_request_);
      break;
    }
    // optional .dcv.extensions.SetCursorPointRequest set_cursor_point_request = 30;
    case kSetCursorPointRequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.set_cursor_point_request_);
      break;
    }
    // optional .dcv.extensions.GetStreamingViewsRequest get_streaming_views_request = 31;
    case kGetStreamingViewsRequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.get_streaming_views_request_);
      break;
    }
    // optional .dcv.extensions.IsPointInsideStreamingViewsRequest is_point_inside_streaming_views_request = 32;
    case kIsPointInsideStreamingViewsRequest: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.is_point_inside_streaming_views_request_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.request_case()) {
    case kGetDcvInfoRequest: {
      mutable_get_dcv_info_request()->::dcv::extensions::GetDcvInfoRequest::MergeFrom(from.get_dcv_info_request());
      break;
    }
    case kGetManifestRequest: {
      mutable_get_manifest_request()->::dcv::extensions::GetManifestRequest::MergeFrom(from.get_manifest_request());
      break;
    }
    case kSetupVirtualChannelRequest: {
      mutable_setup_virtual_channel_request()->::dcv::extensions::SetupVirtualChannelRequest::MergeFrom(from.setup_virtual_channel_request());
      break;
    }
    case kCloseVirtualChannelRequest: {
      mutable_close_virtual_channel_request()->::dcv::extensions::CloseVirtualChannelRequest::MergeFrom(from.close_virtual_channel_request());
      break;
    }
    case kSetCursorPointRequest: {
      mutable_set_cursor_point_request()->::dcv::extensions::SetCursorPointRequest::MergeFrom(from.set_cursor_point_request());
      break;
    }
    case kGetStreamingViewsRequest: {
      mutable_get_streaming_views_request()->::dcv::extensions::GetStreamingViewsRequest::MergeFrom(from.get_streaming_views_request());
      break;
    }
    case kIsPointInsideStreamingViewsRequest: {
      mutable_is_point_inside_streaming_views_request()->::dcv::extensions::IsPointInsideStreamingViewsRequest::MergeFrom(from.is_point_inside_streaming_views_request());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  request_id_.Swap(&other->request_id_);
  std::swap(request_, other->request_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional string request_id = 1;
void Request::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request::request_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.Request.request_id)
}
 void Request::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.Request.request_id)
}
 void Request::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.Request.request_id)
}
 ::std::string* Request::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_request_id() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.request_id)
}

// optional .dcv.extensions.GetDcvInfoRequest get_dcv_info_request = 10;
bool Request::has_get_dcv_info_request() const {
  return request_case() == kGetDcvInfoRequest;
}
void Request::set_has_get_dcv_info_request() {
  _oneof_case_[0] = kGetDcvInfoRequest;
}
void Request::clear_get_dcv_info_request() {
  if (has_get_dcv_info_request()) {
    delete request_.get_dcv_info_request_;
    clear_has_request();
  }
}
 const ::dcv::extensions::GetDcvInfoRequest& Request::get_dcv_info_request() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.get_dcv_info_request)
  return has_get_dcv_info_request()
      ? *request_.get_dcv_info_request_
      : ::dcv::extensions::GetDcvInfoRequest::default_instance();
}
::dcv::extensions::GetDcvInfoRequest* Request::mutable_get_dcv_info_request() {
  if (!has_get_dcv_info_request()) {
    clear_request();
    set_has_get_dcv_info_request();
    request_.get_dcv_info_request_ = new ::dcv::extensions::GetDcvInfoRequest;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.get_dcv_info_request)
  return request_.get_dcv_info_request_;
}
::dcv::extensions::GetDcvInfoRequest* Request::release_get_dcv_info_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.get_dcv_info_request)
  if (has_get_dcv_info_request()) {
    clear_has_request();
    ::dcv::extensions::GetDcvInfoRequest* temp = request_.get_dcv_info_request_;
    request_.get_dcv_info_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_get_dcv_info_request(::dcv::extensions::GetDcvInfoRequest* get_dcv_info_request) {
  clear_request();
  if (get_dcv_info_request) {
    set_has_get_dcv_info_request();
    request_.get_dcv_info_request_ = get_dcv_info_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.get_dcv_info_request)
}

// optional .dcv.extensions.GetManifestRequest get_manifest_request = 11;
bool Request::has_get_manifest_request() const {
  return request_case() == kGetManifestRequest;
}
void Request::set_has_get_manifest_request() {
  _oneof_case_[0] = kGetManifestRequest;
}
void Request::clear_get_manifest_request() {
  if (has_get_manifest_request()) {
    delete request_.get_manifest_request_;
    clear_has_request();
  }
}
 const ::dcv::extensions::GetManifestRequest& Request::get_manifest_request() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.get_manifest_request)
  return has_get_manifest_request()
      ? *request_.get_manifest_request_
      : ::dcv::extensions::GetManifestRequest::default_instance();
}
::dcv::extensions::GetManifestRequest* Request::mutable_get_manifest_request() {
  if (!has_get_manifest_request()) {
    clear_request();
    set_has_get_manifest_request();
    request_.get_manifest_request_ = new ::dcv::extensions::GetManifestRequest;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.get_manifest_request)
  return request_.get_manifest_request_;
}
::dcv::extensions::GetManifestRequest* Request::release_get_manifest_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.get_manifest_request)
  if (has_get_manifest_request()) {
    clear_has_request();
    ::dcv::extensions::GetManifestRequest* temp = request_.get_manifest_request_;
    request_.get_manifest_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_get_manifest_request(::dcv::extensions::GetManifestRequest* get_manifest_request) {
  clear_request();
  if (get_manifest_request) {
    set_has_get_manifest_request();
    request_.get_manifest_request_ = get_manifest_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.get_manifest_request)
}

// optional .dcv.extensions.SetupVirtualChannelRequest setup_virtual_channel_request = 20;
bool Request::has_setup_virtual_channel_request() const {
  return request_case() == kSetupVirtualChannelRequest;
}
void Request::set_has_setup_virtual_channel_request() {
  _oneof_case_[0] = kSetupVirtualChannelRequest;
}
void Request::clear_setup_virtual_channel_request() {
  if (has_setup_virtual_channel_request()) {
    delete request_.setup_virtual_channel_request_;
    clear_has_request();
  }
}
 const ::dcv::extensions::SetupVirtualChannelRequest& Request::setup_virtual_channel_request() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.setup_virtual_channel_request)
  return has_setup_virtual_channel_request()
      ? *request_.setup_virtual_channel_request_
      : ::dcv::extensions::SetupVirtualChannelRequest::default_instance();
}
::dcv::extensions::SetupVirtualChannelRequest* Request::mutable_setup_virtual_channel_request() {
  if (!has_setup_virtual_channel_request()) {
    clear_request();
    set_has_setup_virtual_channel_request();
    request_.setup_virtual_channel_request_ = new ::dcv::extensions::SetupVirtualChannelRequest;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.setup_virtual_channel_request)
  return request_.setup_virtual_channel_request_;
}
::dcv::extensions::SetupVirtualChannelRequest* Request::release_setup_virtual_channel_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.setup_virtual_channel_request)
  if (has_setup_virtual_channel_request()) {
    clear_has_request();
    ::dcv::extensions::SetupVirtualChannelRequest* temp = request_.setup_virtual_channel_request_;
    request_.setup_virtual_channel_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_setup_virtual_channel_request(::dcv::extensions::SetupVirtualChannelRequest* setup_virtual_channel_request) {
  clear_request();
  if (setup_virtual_channel_request) {
    set_has_setup_virtual_channel_request();
    request_.setup_virtual_channel_request_ = setup_virtual_channel_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.setup_virtual_channel_request)
}

// optional .dcv.extensions.CloseVirtualChannelRequest close_virtual_channel_request = 21;
bool Request::has_close_virtual_channel_request() const {
  return request_case() == kCloseVirtualChannelRequest;
}
void Request::set_has_close_virtual_channel_request() {
  _oneof_case_[0] = kCloseVirtualChannelRequest;
}
void Request::clear_close_virtual_channel_request() {
  if (has_close_virtual_channel_request()) {
    delete request_.close_virtual_channel_request_;
    clear_has_request();
  }
}
 const ::dcv::extensions::CloseVirtualChannelRequest& Request::close_virtual_channel_request() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.close_virtual_channel_request)
  return has_close_virtual_channel_request()
      ? *request_.close_virtual_channel_request_
      : ::dcv::extensions::CloseVirtualChannelRequest::default_instance();
}
::dcv::extensions::CloseVirtualChannelRequest* Request::mutable_close_virtual_channel_request() {
  if (!has_close_virtual_channel_request()) {
    clear_request();
    set_has_close_virtual_channel_request();
    request_.close_virtual_channel_request_ = new ::dcv::extensions::CloseVirtualChannelRequest;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.close_virtual_channel_request)
  return request_.close_virtual_channel_request_;
}
::dcv::extensions::CloseVirtualChannelRequest* Request::release_close_virtual_channel_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.close_virtual_channel_request)
  if (has_close_virtual_channel_request()) {
    clear_has_request();
    ::dcv::extensions::CloseVirtualChannelRequest* temp = request_.close_virtual_channel_request_;
    request_.close_virtual_channel_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_close_virtual_channel_request(::dcv::extensions::CloseVirtualChannelRequest* close_virtual_channel_request) {
  clear_request();
  if (close_virtual_channel_request) {
    set_has_close_virtual_channel_request();
    request_.close_virtual_channel_request_ = close_virtual_channel_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.close_virtual_channel_request)
}

// optional .dcv.extensions.SetCursorPointRequest set_cursor_point_request = 30;
bool Request::has_set_cursor_point_request() const {
  return request_case() == kSetCursorPointRequest;
}
void Request::set_has_set_cursor_point_request() {
  _oneof_case_[0] = kSetCursorPointRequest;
}
void Request::clear_set_cursor_point_request() {
  if (has_set_cursor_point_request()) {
    delete request_.set_cursor_point_request_;
    clear_has_request();
  }
}
 const ::dcv::extensions::SetCursorPointRequest& Request::set_cursor_point_request() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.set_cursor_point_request)
  return has_set_cursor_point_request()
      ? *request_.set_cursor_point_request_
      : ::dcv::extensions::SetCursorPointRequest::default_instance();
}
::dcv::extensions::SetCursorPointRequest* Request::mutable_set_cursor_point_request() {
  if (!has_set_cursor_point_request()) {
    clear_request();
    set_has_set_cursor_point_request();
    request_.set_cursor_point_request_ = new ::dcv::extensions::SetCursorPointRequest;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.set_cursor_point_request)
  return request_.set_cursor_point_request_;
}
::dcv::extensions::SetCursorPointRequest* Request::release_set_cursor_point_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.set_cursor_point_request)
  if (has_set_cursor_point_request()) {
    clear_has_request();
    ::dcv::extensions::SetCursorPointRequest* temp = request_.set_cursor_point_request_;
    request_.set_cursor_point_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_set_cursor_point_request(::dcv::extensions::SetCursorPointRequest* set_cursor_point_request) {
  clear_request();
  if (set_cursor_point_request) {
    set_has_set_cursor_point_request();
    request_.set_cursor_point_request_ = set_cursor_point_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.set_cursor_point_request)
}

// optional .dcv.extensions.GetStreamingViewsRequest get_streaming_views_request = 31;
bool Request::has_get_streaming_views_request() const {
  return request_case() == kGetStreamingViewsRequest;
}
void Request::set_has_get_streaming_views_request() {
  _oneof_case_[0] = kGetStreamingViewsRequest;
}
void Request::clear_get_streaming_views_request() {
  if (has_get_streaming_views_request()) {
    delete request_.get_streaming_views_request_;
    clear_has_request();
  }
}
 const ::dcv::extensions::GetStreamingViewsRequest& Request::get_streaming_views_request() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.get_streaming_views_request)
  return has_get_streaming_views_request()
      ? *request_.get_streaming_views_request_
      : ::dcv::extensions::GetStreamingViewsRequest::default_instance();
}
::dcv::extensions::GetStreamingViewsRequest* Request::mutable_get_streaming_views_request() {
  if (!has_get_streaming_views_request()) {
    clear_request();
    set_has_get_streaming_views_request();
    request_.get_streaming_views_request_ = new ::dcv::extensions::GetStreamingViewsRequest;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.get_streaming_views_request)
  return request_.get_streaming_views_request_;
}
::dcv::extensions::GetStreamingViewsRequest* Request::release_get_streaming_views_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.get_streaming_views_request)
  if (has_get_streaming_views_request()) {
    clear_has_request();
    ::dcv::extensions::GetStreamingViewsRequest* temp = request_.get_streaming_views_request_;
    request_.get_streaming_views_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_get_streaming_views_request(::dcv::extensions::GetStreamingViewsRequest* get_streaming_views_request) {
  clear_request();
  if (get_streaming_views_request) {
    set_has_get_streaming_views_request();
    request_.get_streaming_views_request_ = get_streaming_views_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.get_streaming_views_request)
}

// optional .dcv.extensions.IsPointInsideStreamingViewsRequest is_point_inside_streaming_views_request = 32;
bool Request::has_is_point_inside_streaming_views_request() const {
  return request_case() == kIsPointInsideStreamingViewsRequest;
}
void Request::set_has_is_point_inside_streaming_views_request() {
  _oneof_case_[0] = kIsPointInsideStreamingViewsRequest;
}
void Request::clear_is_point_inside_streaming_views_request() {
  if (has_is_point_inside_streaming_views_request()) {
    delete request_.is_point_inside_streaming_views_request_;
    clear_has_request();
  }
}
 const ::dcv::extensions::IsPointInsideStreamingViewsRequest& Request::is_point_inside_streaming_views_request() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.is_point_inside_streaming_views_request)
  return has_is_point_inside_streaming_views_request()
      ? *request_.is_point_inside_streaming_views_request_
      : ::dcv::extensions::IsPointInsideStreamingViewsRequest::default_instance();
}
::dcv::extensions::IsPointInsideStreamingViewsRequest* Request::mutable_is_point_inside_streaming_views_request() {
  if (!has_is_point_inside_streaming_views_request()) {
    clear_request();
    set_has_is_point_inside_streaming_views_request();
    request_.is_point_inside_streaming_views_request_ = new ::dcv::extensions::IsPointInsideStreamingViewsRequest;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.is_point_inside_streaming_views_request)
  return request_.is_point_inside_streaming_views_request_;
}
::dcv::extensions::IsPointInsideStreamingViewsRequest* Request::release_is_point_inside_streaming_views_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.is_point_inside_streaming_views_request)
  if (has_is_point_inside_streaming_views_request()) {
    clear_has_request();
    ::dcv::extensions::IsPointInsideStreamingViewsRequest* temp = request_.is_point_inside_streaming_views_request_;
    request_.is_point_inside_streaming_views_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_is_point_inside_streaming_views_request(::dcv::extensions::IsPointInsideStreamingViewsRequest* is_point_inside_streaming_views_request) {
  clear_request();
  if (is_point_inside_streaming_views_request) {
    set_has_is_point_inside_streaming_views_request();
    request_.is_point_inside_streaming_views_request_ = is_point_inside_streaming_views_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.is_point_inside_streaming_views_request)
}

bool Request::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
void Request::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
Request::RequestCase Request::request_case() const {
  return Request::RequestCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Response_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_Status_descriptor_;
}
bool Response_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Response_Status Response::NONE;
const Response_Status Response::SUCCESS;
const Response_Status Response::ERROR_GENERIC;
const Response_Status Response::ERROR_ACCESS_DENIED;
const Response_Status Response::ERROR_NOT_IMPLEMENTED;
const Response_Status Response::ERROR_INVALID_PARAMETER;
const Response_Status Response::ERROR_INVALID_VIRTUAL_CHANNEL_NAMESPACE_IN_MANIFEST;
const Response_Status Response::ERROR_TOO_MANY_VIRTUAL_CHANNELS;
const Response_Status Response::Status_MIN;
const Response_Status Response::Status_MAX;
const int Response::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kRequestIdFieldNumber;
const int Response::kStatusFieldNumber;
const int Response::kGetDcvInfoResponseFieldNumber;
const int Response::kGetManifestResponseFieldNumber;
const int Response::kSetupVirtualChannelResponseFieldNumber;
const int Response::kCloseVirtualChannelResponseFieldNumber;
const int Response::kSetCursorPointResponseFieldNumber;
const int Response::kGetStreamingViewsResponseFieldNumber;
const int Response::kIsPointInsideStreamingViewsResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.Response)
}

void Response::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Response_default_oneof_instance_->get_dcv_info_response_ = const_cast< ::dcv::extensions::GetDcvInfoResponse*>(&::dcv::extensions::GetDcvInfoResponse::default_instance());
  Response_default_oneof_instance_->get_manifest_response_ = const_cast< ::dcv::extensions::GetManifestResponse*>(&::dcv::extensions::GetManifestResponse::default_instance());
  Response_default_oneof_instance_->setup_virtual_channel_response_ = const_cast< ::dcv::extensions::SetupVirtualChannelResponse*>(&::dcv::extensions::SetupVirtualChannelResponse::default_instance());
  Response_default_oneof_instance_->close_virtual_channel_response_ = const_cast< ::dcv::extensions::CloseVirtualChannelResponse*>(&::dcv::extensions::CloseVirtualChannelResponse::default_instance());
  Response_default_oneof_instance_->set_cursor_point_response_ = const_cast< ::dcv::extensions::SetCursorPointResponse*>(&::dcv::extensions::SetCursorPointResponse::default_instance());
  Response_default_oneof_instance_->get_streaming_views_response_ = const_cast< ::dcv::extensions::GetStreamingViewsResponse*>(&::dcv::extensions::GetStreamingViewsResponse::default_instance());
  Response_default_oneof_instance_->is_point_inside_streaming_views_response_ = const_cast< ::dcv::extensions::IsPointInsideStreamingViewsResponse*>(&::dcv::extensions::IsPointInsideStreamingViewsResponse::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.Response)
}

void Response::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  clear_has_response();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:dcv.extensions.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  request_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_response()) {
    clear_response();
  }
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:dcv.extensions.Response)
  switch(response_case()) {
    case kGetDcvInfoResponse: {
      delete response_.get_dcv_info_response_;
      break;
    }
    case kGetManifestResponse: {
      delete response_.get_manifest_response_;
      break;
    }
    case kSetupVirtualChannelResponse: {
      delete response_.setup_virtual_channel_response_;
      break;
    }
    case kCloseVirtualChannelResponse: {
      delete response_.close_virtual_channel_response_;
      break;
    }
    case kSetCursorPointResponse: {
      delete response_.set_cursor_point_response_;
      break;
    }
    case kGetStreamingViewsResponse: {
      delete response_.get_streaming_views_response_;
      break;
    }
    case kIsPointInsideStreamingViewsResponse: {
      delete response_.is_point_inside_streaming_views_response_;
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.Response)
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  clear_response();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_id().data(), this->request_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dcv.extensions.Response.request_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .dcv.extensions.Response.Status status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::dcv::extensions::Response_Status >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_get_dcv_info_response;
        break;
      }

      // optional .dcv.extensions.GetDcvInfoResponse get_dcv_info_response = 10;
      case 10: {
        if (tag == 82) {
         parse_get_dcv_info_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_dcv_info_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_get_manifest_response;
        break;
      }

      // optional .dcv.extensions.GetManifestResponse get_manifest_response = 11;
      case 11: {
        if (tag == 90) {
         parse_get_manifest_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_manifest_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_setup_virtual_channel_response;
        break;
      }

      // optional .dcv.extensions.SetupVirtualChannelResponse setup_virtual_channel_response = 20;
      case 20: {
        if (tag == 162) {
         parse_setup_virtual_channel_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setup_virtual_channel_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_close_virtual_channel_response;
        break;
      }

      // optional .dcv.extensions.CloseVirtualChannelResponse close_virtual_channel_response = 21;
      case 21: {
        if (tag == 170) {
         parse_close_virtual_channel_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_close_virtual_channel_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_set_cursor_point_response;
        break;
      }

      // optional .dcv.extensions.SetCursorPointResponse set_cursor_point_response = 30;
      case 30: {
        if (tag == 242) {
         parse_set_cursor_point_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_set_cursor_point_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_get_streaming_views_response;
        break;
      }

      // optional .dcv.extensions.GetStreamingViewsResponse get_streaming_views_response = 31;
      case 31: {
        if (tag == 250) {
         parse_get_streaming_views_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_get_streaming_views_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_is_point_inside_streaming_views_response;
        break;
      }

      // optional .dcv.extensions.IsPointInsideStreamingViewsResponse is_point_inside_streaming_views_response = 32;
      case 32: {
        if (tag == 258) {
         parse_is_point_inside_streaming_views_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_is_point_inside_streaming_views_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.Response)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.Response.request_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_id(), output);
  }

  // optional .dcv.extensions.Response.Status status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional .dcv.extensions.GetDcvInfoResponse get_dcv_info_response = 10;
  if (has_get_dcv_info_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *response_.get_dcv_info_response_, output);
  }

  // optional .dcv.extensions.GetManifestResponse get_manifest_response = 11;
  if (has_get_manifest_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *response_.get_manifest_response_, output);
  }

  // optional .dcv.extensions.SetupVirtualChannelResponse setup_virtual_channel_response = 20;
  if (has_setup_virtual_channel_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *response_.setup_virtual_channel_response_, output);
  }

  // optional .dcv.extensions.CloseVirtualChannelResponse close_virtual_channel_response = 21;
  if (has_close_virtual_channel_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *response_.close_virtual_channel_response_, output);
  }

  // optional .dcv.extensions.SetCursorPointResponse set_cursor_point_response = 30;
  if (has_set_cursor_point_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *response_.set_cursor_point_response_, output);
  }

  // optional .dcv.extensions.GetStreamingViewsResponse get_streaming_views_response = 31;
  if (has_get_streaming_views_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *response_.get_streaming_views_response_, output);
  }

  // optional .dcv.extensions.IsPointInsideStreamingViewsResponse is_point_inside_streaming_views_response = 32;
  if (has_is_point_inside_streaming_views_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, *response_.is_point_inside_streaming_views_response_, output);
  }

  // @@protoc_insertion_point(serialize_end:dcv.extensions.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.Response)
  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_id().data(), this->request_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.Response.request_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_id(), target);
  }

  // optional .dcv.extensions.Response.Status status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional .dcv.extensions.GetDcvInfoResponse get_dcv_info_response = 10;
  if (has_get_dcv_info_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *response_.get_dcv_info_response_, false, target);
  }

  // optional .dcv.extensions.GetManifestResponse get_manifest_response = 11;
  if (has_get_manifest_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *response_.get_manifest_response_, false, target);
  }

  // optional .dcv.extensions.SetupVirtualChannelResponse setup_virtual_channel_response = 20;
  if (has_setup_virtual_channel_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *response_.setup_virtual_channel_response_, false, target);
  }

  // optional .dcv.extensions.CloseVirtualChannelResponse close_virtual_channel_response = 21;
  if (has_close_virtual_channel_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *response_.close_virtual_channel_response_, false, target);
  }

  // optional .dcv.extensions.SetCursorPointResponse set_cursor_point_response = 30;
  if (has_set_cursor_point_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *response_.set_cursor_point_response_, false, target);
  }

  // optional .dcv.extensions.GetStreamingViewsResponse get_streaming_views_response = 31;
  if (has_get_streaming_views_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *response_.get_streaming_views_response_, false, target);
  }

  // optional .dcv.extensions.IsPointInsideStreamingViewsResponse is_point_inside_streaming_views_response = 32;
  if (has_is_point_inside_streaming_views_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, *response_.is_point_inside_streaming_views_response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.Response)
  return target;
}

int Response::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.Response)
  int total_size = 0;

  // optional string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_id());
  }

  // optional .dcv.extensions.Response.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  switch (response_case()) {
    // optional .dcv.extensions.GetDcvInfoResponse get_dcv_info_response = 10;
    case kGetDcvInfoResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.get_dcv_info_response_);
      break;
    }
    // optional .dcv.extensions.GetManifestResponse get_manifest_response = 11;
    case kGetManifestResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.get_manifest_response_);
      break;
    }
    // optional .dcv.extensions.SetupVirtualChannelResponse setup_virtual_channel_response = 20;
    case kSetupVirtualChannelResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.setup_virtual_channel_response_);
      break;
    }
    // optional .dcv.extensions.CloseVirtualChannelResponse close_virtual_channel_response = 21;
    case kCloseVirtualChannelResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.close_virtual_channel_response_);
      break;
    }
    // optional .dcv.extensions.SetCursorPointResponse set_cursor_point_response = 30;
    case kSetCursorPointResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.set_cursor_point_response_);
      break;
    }
    // optional .dcv.extensions.GetStreamingViewsResponse get_streaming_views_response = 31;
    case kGetStreamingViewsResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.get_streaming_views_response_);
      break;
    }
    // optional .dcv.extensions.IsPointInsideStreamingViewsResponse is_point_inside_streaming_views_response = 32;
    case kIsPointInsideStreamingViewsResponse: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.is_point_inside_streaming_views_response_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.response_case()) {
    case kGetDcvInfoResponse: {
      mutable_get_dcv_info_response()->::dcv::extensions::GetDcvInfoResponse::MergeFrom(from.get_dcv_info_response());
      break;
    }
    case kGetManifestResponse: {
      mutable_get_manifest_response()->::dcv::extensions::GetManifestResponse::MergeFrom(from.get_manifest_response());
      break;
    }
    case kSetupVirtualChannelResponse: {
      mutable_setup_virtual_channel_response()->::dcv::extensions::SetupVirtualChannelResponse::MergeFrom(from.setup_virtual_channel_response());
      break;
    }
    case kCloseVirtualChannelResponse: {
      mutable_close_virtual_channel_response()->::dcv::extensions::CloseVirtualChannelResponse::MergeFrom(from.close_virtual_channel_response());
      break;
    }
    case kSetCursorPointResponse: {
      mutable_set_cursor_point_response()->::dcv::extensions::SetCursorPointResponse::MergeFrom(from.set_cursor_point_response());
      break;
    }
    case kGetStreamingViewsResponse: {
      mutable_get_streaming_views_response()->::dcv::extensions::GetStreamingViewsResponse::MergeFrom(from.get_streaming_views_response());
      break;
    }
    case kIsPointInsideStreamingViewsResponse: {
      mutable_is_point_inside_streaming_views_response()->::dcv::extensions::IsPointInsideStreamingViewsResponse::MergeFrom(from.is_point_inside_streaming_views_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  if (from.request_id().size() > 0) {

    request_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  request_id_.Swap(&other->request_id_);
  std::swap(status_, other->status_);
  std::swap(response_, other->response_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional string request_id = 1;
void Response::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Response::request_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.Response.request_id)
}
 void Response::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.Response.request_id)
}
 void Response::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.Response.request_id)
}
 ::std::string* Response::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response::release_request_id() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.request_id)
}

// optional .dcv.extensions.Response.Status status = 2;
void Response::clear_status() {
  status_ = 0;
}
 ::dcv::extensions::Response_Status Response::status() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.status)
  return static_cast< ::dcv::extensions::Response_Status >(status_);
}
 void Response::set_status(::dcv::extensions::Response_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.Response.status)
}

// optional .dcv.extensions.GetDcvInfoResponse get_dcv_info_response = 10;
bool Response::has_get_dcv_info_response() const {
  return response_case() == kGetDcvInfoResponse;
}
void Response::set_has_get_dcv_info_response() {
  _oneof_case_[0] = kGetDcvInfoResponse;
}
void Response::clear_get_dcv_info_response() {
  if (has_get_dcv_info_response()) {
    delete response_.get_dcv_info_response_;
    clear_has_response();
  }
}
 const ::dcv::extensions::GetDcvInfoResponse& Response::get_dcv_info_response() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.get_dcv_info_response)
  return has_get_dcv_info_response()
      ? *response_.get_dcv_info_response_
      : ::dcv::extensions::GetDcvInfoResponse::default_instance();
}
::dcv::extensions::GetDcvInfoResponse* Response::mutable_get_dcv_info_response() {
  if (!has_get_dcv_info_response()) {
    clear_response();
    set_has_get_dcv_info_response();
    response_.get_dcv_info_response_ = new ::dcv::extensions::GetDcvInfoResponse;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.get_dcv_info_response)
  return response_.get_dcv_info_response_;
}
::dcv::extensions::GetDcvInfoResponse* Response::release_get_dcv_info_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.get_dcv_info_response)
  if (has_get_dcv_info_response()) {
    clear_has_response();
    ::dcv::extensions::GetDcvInfoResponse* temp = response_.get_dcv_info_response_;
    response_.get_dcv_info_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_get_dcv_info_response(::dcv::extensions::GetDcvInfoResponse* get_dcv_info_response) {
  clear_response();
  if (get_dcv_info_response) {
    set_has_get_dcv_info_response();
    response_.get_dcv_info_response_ = get_dcv_info_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.get_dcv_info_response)
}

// optional .dcv.extensions.GetManifestResponse get_manifest_response = 11;
bool Response::has_get_manifest_response() const {
  return response_case() == kGetManifestResponse;
}
void Response::set_has_get_manifest_response() {
  _oneof_case_[0] = kGetManifestResponse;
}
void Response::clear_get_manifest_response() {
  if (has_get_manifest_response()) {
    delete response_.get_manifest_response_;
    clear_has_response();
  }
}
 const ::dcv::extensions::GetManifestResponse& Response::get_manifest_response() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.get_manifest_response)
  return has_get_manifest_response()
      ? *response_.get_manifest_response_
      : ::dcv::extensions::GetManifestResponse::default_instance();
}
::dcv::extensions::GetManifestResponse* Response::mutable_get_manifest_response() {
  if (!has_get_manifest_response()) {
    clear_response();
    set_has_get_manifest_response();
    response_.get_manifest_response_ = new ::dcv::extensions::GetManifestResponse;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.get_manifest_response)
  return response_.get_manifest_response_;
}
::dcv::extensions::GetManifestResponse* Response::release_get_manifest_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.get_manifest_response)
  if (has_get_manifest_response()) {
    clear_has_response();
    ::dcv::extensions::GetManifestResponse* temp = response_.get_manifest_response_;
    response_.get_manifest_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_get_manifest_response(::dcv::extensions::GetManifestResponse* get_manifest_response) {
  clear_response();
  if (get_manifest_response) {
    set_has_get_manifest_response();
    response_.get_manifest_response_ = get_manifest_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.get_manifest_response)
}

// optional .dcv.extensions.SetupVirtualChannelResponse setup_virtual_channel_response = 20;
bool Response::has_setup_virtual_channel_response() const {
  return response_case() == kSetupVirtualChannelResponse;
}
void Response::set_has_setup_virtual_channel_response() {
  _oneof_case_[0] = kSetupVirtualChannelResponse;
}
void Response::clear_setup_virtual_channel_response() {
  if (has_setup_virtual_channel_response()) {
    delete response_.setup_virtual_channel_response_;
    clear_has_response();
  }
}
 const ::dcv::extensions::SetupVirtualChannelResponse& Response::setup_virtual_channel_response() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.setup_virtual_channel_response)
  return has_setup_virtual_channel_response()
      ? *response_.setup_virtual_channel_response_
      : ::dcv::extensions::SetupVirtualChannelResponse::default_instance();
}
::dcv::extensions::SetupVirtualChannelResponse* Response::mutable_setup_virtual_channel_response() {
  if (!has_setup_virtual_channel_response()) {
    clear_response();
    set_has_setup_virtual_channel_response();
    response_.setup_virtual_channel_response_ = new ::dcv::extensions::SetupVirtualChannelResponse;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.setup_virtual_channel_response)
  return response_.setup_virtual_channel_response_;
}
::dcv::extensions::SetupVirtualChannelResponse* Response::release_setup_virtual_channel_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.setup_virtual_channel_response)
  if (has_setup_virtual_channel_response()) {
    clear_has_response();
    ::dcv::extensions::SetupVirtualChannelResponse* temp = response_.setup_virtual_channel_response_;
    response_.setup_virtual_channel_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_setup_virtual_channel_response(::dcv::extensions::SetupVirtualChannelResponse* setup_virtual_channel_response) {
  clear_response();
  if (setup_virtual_channel_response) {
    set_has_setup_virtual_channel_response();
    response_.setup_virtual_channel_response_ = setup_virtual_channel_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.setup_virtual_channel_response)
}

// optional .dcv.extensions.CloseVirtualChannelResponse close_virtual_channel_response = 21;
bool Response::has_close_virtual_channel_response() const {
  return response_case() == kCloseVirtualChannelResponse;
}
void Response::set_has_close_virtual_channel_response() {
  _oneof_case_[0] = kCloseVirtualChannelResponse;
}
void Response::clear_close_virtual_channel_response() {
  if (has_close_virtual_channel_response()) {
    delete response_.close_virtual_channel_response_;
    clear_has_response();
  }
}
 const ::dcv::extensions::CloseVirtualChannelResponse& Response::close_virtual_channel_response() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.close_virtual_channel_response)
  return has_close_virtual_channel_response()
      ? *response_.close_virtual_channel_response_
      : ::dcv::extensions::CloseVirtualChannelResponse::default_instance();
}
::dcv::extensions::CloseVirtualChannelResponse* Response::mutable_close_virtual_channel_response() {
  if (!has_close_virtual_channel_response()) {
    clear_response();
    set_has_close_virtual_channel_response();
    response_.close_virtual_channel_response_ = new ::dcv::extensions::CloseVirtualChannelResponse;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.close_virtual_channel_response)
  return response_.close_virtual_channel_response_;
}
::dcv::extensions::CloseVirtualChannelResponse* Response::release_close_virtual_channel_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.close_virtual_channel_response)
  if (has_close_virtual_channel_response()) {
    clear_has_response();
    ::dcv::extensions::CloseVirtualChannelResponse* temp = response_.close_virtual_channel_response_;
    response_.close_virtual_channel_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_close_virtual_channel_response(::dcv::extensions::CloseVirtualChannelResponse* close_virtual_channel_response) {
  clear_response();
  if (close_virtual_channel_response) {
    set_has_close_virtual_channel_response();
    response_.close_virtual_channel_response_ = close_virtual_channel_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.close_virtual_channel_response)
}

// optional .dcv.extensions.SetCursorPointResponse set_cursor_point_response = 30;
bool Response::has_set_cursor_point_response() const {
  return response_case() == kSetCursorPointResponse;
}
void Response::set_has_set_cursor_point_response() {
  _oneof_case_[0] = kSetCursorPointResponse;
}
void Response::clear_set_cursor_point_response() {
  if (has_set_cursor_point_response()) {
    delete response_.set_cursor_point_response_;
    clear_has_response();
  }
}
 const ::dcv::extensions::SetCursorPointResponse& Response::set_cursor_point_response() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.set_cursor_point_response)
  return has_set_cursor_point_response()
      ? *response_.set_cursor_point_response_
      : ::dcv::extensions::SetCursorPointResponse::default_instance();
}
::dcv::extensions::SetCursorPointResponse* Response::mutable_set_cursor_point_response() {
  if (!has_set_cursor_point_response()) {
    clear_response();
    set_has_set_cursor_point_response();
    response_.set_cursor_point_response_ = new ::dcv::extensions::SetCursorPointResponse;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.set_cursor_point_response)
  return response_.set_cursor_point_response_;
}
::dcv::extensions::SetCursorPointResponse* Response::release_set_cursor_point_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.set_cursor_point_response)
  if (has_set_cursor_point_response()) {
    clear_has_response();
    ::dcv::extensions::SetCursorPointResponse* temp = response_.set_cursor_point_response_;
    response_.set_cursor_point_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_set_cursor_point_response(::dcv::extensions::SetCursorPointResponse* set_cursor_point_response) {
  clear_response();
  if (set_cursor_point_response) {
    set_has_set_cursor_point_response();
    response_.set_cursor_point_response_ = set_cursor_point_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.set_cursor_point_response)
}

// optional .dcv.extensions.GetStreamingViewsResponse get_streaming_views_response = 31;
bool Response::has_get_streaming_views_response() const {
  return response_case() == kGetStreamingViewsResponse;
}
void Response::set_has_get_streaming_views_response() {
  _oneof_case_[0] = kGetStreamingViewsResponse;
}
void Response::clear_get_streaming_views_response() {
  if (has_get_streaming_views_response()) {
    delete response_.get_streaming_views_response_;
    clear_has_response();
  }
}
 const ::dcv::extensions::GetStreamingViewsResponse& Response::get_streaming_views_response() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.get_streaming_views_response)
  return has_get_streaming_views_response()
      ? *response_.get_streaming_views_response_
      : ::dcv::extensions::GetStreamingViewsResponse::default_instance();
}
::dcv::extensions::GetStreamingViewsResponse* Response::mutable_get_streaming_views_response() {
  if (!has_get_streaming_views_response()) {
    clear_response();
    set_has_get_streaming_views_response();
    response_.get_streaming_views_response_ = new ::dcv::extensions::GetStreamingViewsResponse;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.get_streaming_views_response)
  return response_.get_streaming_views_response_;
}
::dcv::extensions::GetStreamingViewsResponse* Response::release_get_streaming_views_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.get_streaming_views_response)
  if (has_get_streaming_views_response()) {
    clear_has_response();
    ::dcv::extensions::GetStreamingViewsResponse* temp = response_.get_streaming_views_response_;
    response_.get_streaming_views_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_get_streaming_views_response(::dcv::extensions::GetStreamingViewsResponse* get_streaming_views_response) {
  clear_response();
  if (get_streaming_views_response) {
    set_has_get_streaming_views_response();
    response_.get_streaming_views_response_ = get_streaming_views_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.get_streaming_views_response)
}

// optional .dcv.extensions.IsPointInsideStreamingViewsResponse is_point_inside_streaming_views_response = 32;
bool Response::has_is_point_inside_streaming_views_response() const {
  return response_case() == kIsPointInsideStreamingViewsResponse;
}
void Response::set_has_is_point_inside_streaming_views_response() {
  _oneof_case_[0] = kIsPointInsideStreamingViewsResponse;
}
void Response::clear_is_point_inside_streaming_views_response() {
  if (has_is_point_inside_streaming_views_response()) {
    delete response_.is_point_inside_streaming_views_response_;
    clear_has_response();
  }
}
 const ::dcv::extensions::IsPointInsideStreamingViewsResponse& Response::is_point_inside_streaming_views_response() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.is_point_inside_streaming_views_response)
  return has_is_point_inside_streaming_views_response()
      ? *response_.is_point_inside_streaming_views_response_
      : ::dcv::extensions::IsPointInsideStreamingViewsResponse::default_instance();
}
::dcv::extensions::IsPointInsideStreamingViewsResponse* Response::mutable_is_point_inside_streaming_views_response() {
  if (!has_is_point_inside_streaming_views_response()) {
    clear_response();
    set_has_is_point_inside_streaming_views_response();
    response_.is_point_inside_streaming_views_response_ = new ::dcv::extensions::IsPointInsideStreamingViewsResponse;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.is_point_inside_streaming_views_response)
  return response_.is_point_inside_streaming_views_response_;
}
::dcv::extensions::IsPointInsideStreamingViewsResponse* Response::release_is_point_inside_streaming_views_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.is_point_inside_streaming_views_response)
  if (has_is_point_inside_streaming_views_response()) {
    clear_has_response();
    ::dcv::extensions::IsPointInsideStreamingViewsResponse* temp = response_.is_point_inside_streaming_views_response_;
    response_.is_point_inside_streaming_views_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_is_point_inside_streaming_views_response(::dcv::extensions::IsPointInsideStreamingViewsResponse* is_point_inside_streaming_views_response) {
  clear_response();
  if (is_point_inside_streaming_views_response) {
    set_has_is_point_inside_streaming_views_response();
    response_.is_point_inside_streaming_views_response_ = is_point_inside_streaming_views_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.is_point_inside_streaming_views_response)
}

bool Response::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
void Response::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
Response::ResponseCase Response::response_case() const {
  return Response::ResponseCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event::kVirtualChannelReadyEventFieldNumber;
const int Event::kVirtualChannelClosedEventFieldNumber;
const int Event::kStreamingViewsChangedEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event::Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.Event)
}

void Event::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Event_default_oneof_instance_->virtual_channel_ready_event_ = const_cast< ::dcv::extensions::VirtualChannelReadyEvent*>(&::dcv::extensions::VirtualChannelReadyEvent::default_instance());
  Event_default_oneof_instance_->virtual_channel_closed_event_ = const_cast< ::dcv::extensions::VirtualChannelClosedEvent*>(&::dcv::extensions::VirtualChannelClosedEvent::default_instance());
  Event_default_oneof_instance_->streaming_views_changed_event_ = const_cast< ::dcv::extensions::StreamingViewsChangedEvent*>(&::dcv::extensions::StreamingViewsChangedEvent::default_instance());
}

Event::Event(const Event& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.Event)
}

void Event::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_event();
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:dcv.extensions.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (has_event()) {
    clear_event();
  }
  if (this != default_instance_) {
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New(::google::protobuf::Arena* arena) const {
  Event* n = new Event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Event::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:dcv.extensions.Event)
  switch(event_case()) {
    case kVirtualChannelReadyEvent: {
      delete event_.virtual_channel_ready_event_;
      break;
    }
    case kVirtualChannelClosedEvent: {
      delete event_.virtual_channel_closed_event_;
      break;
    }
    case kStreamingViewsChangedEvent: {
      delete event_.streaming_views_changed_event_;
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.Event)
  clear_event();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dcv.extensions.VirtualChannelReadyEvent virtual_channel_ready_event = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_virtual_channel_ready_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_virtual_channel_closed_event;
        break;
      }

      // optional .dcv.extensions.VirtualChannelClosedEvent virtual_channel_closed_event = 20;
      case 20: {
        if (tag == 162) {
         parse_virtual_channel_closed_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_virtual_channel_closed_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_streaming_views_changed_event;
        break;
      }

      // optional .dcv.extensions.StreamingViewsChangedEvent streaming_views_changed_event = 30;
      case 30: {
        if (tag == 242) {
         parse_streaming_views_changed_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_streaming_views_changed_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.Event)
  // optional .dcv.extensions.VirtualChannelReadyEvent virtual_channel_ready_event = 10;
  if (has_virtual_channel_ready_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *event_.virtual_channel_ready_event_, output);
  }

  // optional .dcv.extensions.VirtualChannelClosedEvent virtual_channel_closed_event = 20;
  if (has_virtual_channel_closed_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *event_.virtual_channel_closed_event_, output);
  }

  // optional .dcv.extensions.StreamingViewsChangedEvent streaming_views_changed_event = 30;
  if (has_streaming_views_changed_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *event_.streaming_views_changed_event_, output);
  }

  // @@protoc_insertion_point(serialize_end:dcv.extensions.Event)
}

::google::protobuf::uint8* Event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.Event)
  // optional .dcv.extensions.VirtualChannelReadyEvent virtual_channel_ready_event = 10;
  if (has_virtual_channel_ready_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *event_.virtual_channel_ready_event_, false, target);
  }

  // optional .dcv.extensions.VirtualChannelClosedEvent virtual_channel_closed_event = 20;
  if (has_virtual_channel_closed_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *event_.virtual_channel_closed_event_, false, target);
  }

  // optional .dcv.extensions.StreamingViewsChangedEvent streaming_views_changed_event = 30;
  if (has_streaming_views_changed_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *event_.streaming_views_changed_event_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.Event)
  return target;
}

int Event::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.Event)
  int total_size = 0;

  switch (event_case()) {
    // optional .dcv.extensions.VirtualChannelReadyEvent virtual_channel_ready_event = 10;
    case kVirtualChannelReadyEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.virtual_channel_ready_event_);
      break;
    }
    // optional .dcv.extensions.VirtualChannelClosedEvent virtual_channel_closed_event = 20;
    case kVirtualChannelClosedEvent: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.virtual_channel_closed_event_);
      break;
    }
    // optional .dcv.extensions.StreamingViewsChangedEvent streaming_views_changed_event = 30;
    case kStreamingViewsChangedEvent: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *event_.streaming_views_changed_event_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.Event)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Event* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.Event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.Event)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.event_case()) {
    case kVirtualChannelReadyEvent: {
      mutable_virtual_channel_ready_event()->::dcv::extensions::VirtualChannelReadyEvent::MergeFrom(from.virtual_channel_ready_event());
      break;
    }
    case kVirtualChannelClosedEvent: {
      mutable_virtual_channel_closed_event()->::dcv::extensions::VirtualChannelClosedEvent::MergeFrom(from.virtual_channel_closed_event());
      break;
    }
    case kStreamingViewsChangedEvent: {
      mutable_streaming_views_changed_event()->::dcv::extensions::StreamingViewsChangedEvent::MergeFrom(from.streaming_views_changed_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {

  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  std::swap(event_, other->event_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Event

// optional .dcv.extensions.VirtualChannelReadyEvent virtual_channel_ready_event = 10;
bool Event::has_virtual_channel_ready_event() const {
  return event_case() == kVirtualChannelReadyEvent;
}
void Event::set_has_virtual_channel_ready_event() {
  _oneof_case_[0] = kVirtualChannelReadyEvent;
}
void Event::clear_virtual_channel_ready_event() {
  if (has_virtual_channel_ready_event()) {
    delete event_.virtual_channel_ready_event_;
    clear_has_event();
  }
}
 const ::dcv::extensions::VirtualChannelReadyEvent& Event::virtual_channel_ready_event() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Event.virtual_channel_ready_event)
  return has_virtual_channel_ready_event()
      ? *event_.virtual_channel_ready_event_
      : ::dcv::extensions::VirtualChannelReadyEvent::default_instance();
}
::dcv::extensions::VirtualChannelReadyEvent* Event::mutable_virtual_channel_ready_event() {
  if (!has_virtual_channel_ready_event()) {
    clear_event();
    set_has_virtual_channel_ready_event();
    event_.virtual_channel_ready_event_ = new ::dcv::extensions::VirtualChannelReadyEvent;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Event.virtual_channel_ready_event)
  return event_.virtual_channel_ready_event_;
}
::dcv::extensions::VirtualChannelReadyEvent* Event::release_virtual_channel_ready_event() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Event.virtual_channel_ready_event)
  if (has_virtual_channel_ready_event()) {
    clear_has_event();
    ::dcv::extensions::VirtualChannelReadyEvent* temp = event_.virtual_channel_ready_event_;
    event_.virtual_channel_ready_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Event::set_allocated_virtual_channel_ready_event(::dcv::extensions::VirtualChannelReadyEvent* virtual_channel_ready_event) {
  clear_event();
  if (virtual_channel_ready_event) {
    set_has_virtual_channel_ready_event();
    event_.virtual_channel_ready_event_ = virtual_channel_ready_event;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Event.virtual_channel_ready_event)
}

// optional .dcv.extensions.VirtualChannelClosedEvent virtual_channel_closed_event = 20;
bool Event::has_virtual_channel_closed_event() const {
  return event_case() == kVirtualChannelClosedEvent;
}
void Event::set_has_virtual_channel_closed_event() {
  _oneof_case_[0] = kVirtualChannelClosedEvent;
}
void Event::clear_virtual_channel_closed_event() {
  if (has_virtual_channel_closed_event()) {
    delete event_.virtual_channel_closed_event_;
    clear_has_event();
  }
}
 const ::dcv::extensions::VirtualChannelClosedEvent& Event::virtual_channel_closed_event() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Event.virtual_channel_closed_event)
  return has_virtual_channel_closed_event()
      ? *event_.virtual_channel_closed_event_
      : ::dcv::extensions::VirtualChannelClosedEvent::default_instance();
}
::dcv::extensions::VirtualChannelClosedEvent* Event::mutable_virtual_channel_closed_event() {
  if (!has_virtual_channel_closed_event()) {
    clear_event();
    set_has_virtual_channel_closed_event();
    event_.virtual_channel_closed_event_ = new ::dcv::extensions::VirtualChannelClosedEvent;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Event.virtual_channel_closed_event)
  return event_.virtual_channel_closed_event_;
}
::dcv::extensions::VirtualChannelClosedEvent* Event::release_virtual_channel_closed_event() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Event.virtual_channel_closed_event)
  if (has_virtual_channel_closed_event()) {
    clear_has_event();
    ::dcv::extensions::VirtualChannelClosedEvent* temp = event_.virtual_channel_closed_event_;
    event_.virtual_channel_closed_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Event::set_allocated_virtual_channel_closed_event(::dcv::extensions::VirtualChannelClosedEvent* virtual_channel_closed_event) {
  clear_event();
  if (virtual_channel_closed_event) {
    set_has_virtual_channel_closed_event();
    event_.virtual_channel_closed_event_ = virtual_channel_closed_event;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Event.virtual_channel_closed_event)
}

// optional .dcv.extensions.StreamingViewsChangedEvent streaming_views_changed_event = 30;
bool Event::has_streaming_views_changed_event() const {
  return event_case() == kStreamingViewsChangedEvent;
}
void Event::set_has_streaming_views_changed_event() {
  _oneof_case_[0] = kStreamingViewsChangedEvent;
}
void Event::clear_streaming_views_changed_event() {
  if (has_streaming_views_changed_event()) {
    delete event_.streaming_views_changed_event_;
    clear_has_event();
  }
}
 const ::dcv::extensions::StreamingViewsChangedEvent& Event::streaming_views_changed_event() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Event.streaming_views_changed_event)
  return has_streaming_views_changed_event()
      ? *event_.streaming_views_changed_event_
      : ::dcv::extensions::StreamingViewsChangedEvent::default_instance();
}
::dcv::extensions::StreamingViewsChangedEvent* Event::mutable_streaming_views_changed_event() {
  if (!has_streaming_views_changed_event()) {
    clear_event();
    set_has_streaming_views_changed_event();
    event_.streaming_views_changed_event_ = new ::dcv::extensions::StreamingViewsChangedEvent;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Event.streaming_views_changed_event)
  return event_.streaming_views_changed_event_;
}
::dcv::extensions::StreamingViewsChangedEvent* Event::release_streaming_views_changed_event() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Event.streaming_views_changed_event)
  if (has_streaming_views_changed_event()) {
    clear_has_event();
    ::dcv::extensions::StreamingViewsChangedEvent* temp = event_.streaming_views_changed_event_;
    event_.streaming_views_changed_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Event::set_allocated_streaming_views_changed_event(::dcv::extensions::StreamingViewsChangedEvent* streaming_views_changed_event) {
  clear_event();
  if (streaming_views_changed_event) {
    set_has_streaming_views_changed_event();
    event_.streaming_views_changed_event_ = streaming_views_changed_event;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Event.streaming_views_changed_event)
}

bool Event::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
void Event::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
Event::EventCase Event::event_case() const {
  return Event::EventCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExtensionMessage::kRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExtensionMessage::ExtensionMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.ExtensionMessage)
}

void ExtensionMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ExtensionMessage_default_oneof_instance_->request_ = const_cast< ::dcv::extensions::Request*>(&::dcv::extensions::Request::default_instance());
}

ExtensionMessage::ExtensionMessage(const ExtensionMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.ExtensionMessage)
}

void ExtensionMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_msg();
}

ExtensionMessage::~ExtensionMessage() {
  // @@protoc_insertion_point(destructor:dcv.extensions.ExtensionMessage)
  SharedDtor();
}

void ExtensionMessage::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
  if (this != default_instance_) {
  }
}

void ExtensionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtensionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtensionMessage_descriptor_;
}

const ExtensionMessage& ExtensionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

ExtensionMessage* ExtensionMessage::default_instance_ = NULL;

ExtensionMessage* ExtensionMessage::New(::google::protobuf::Arena* arena) const {
  ExtensionMessage* n = new ExtensionMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExtensionMessage::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:dcv.extensions.ExtensionMessage)
  switch(msg_case()) {
    case kRequest: {
      delete msg_.request_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void ExtensionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.ExtensionMessage)
  clear_msg();
}

bool ExtensionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.ExtensionMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dcv.extensions.Request request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.ExtensionMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.ExtensionMessage)
  return false;
#undef DO_
}

void ExtensionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.ExtensionMessage)
  // optional .dcv.extensions.Request request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *msg_.request_, output);
  }

  // @@protoc_insertion_point(serialize_end:dcv.extensions.ExtensionMessage)
}

::google::protobuf::uint8* ExtensionMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.ExtensionMessage)
  // optional .dcv.extensions.Request request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *msg_.request_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.ExtensionMessage)
  return target;
}

int ExtensionMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.ExtensionMessage)
  int total_size = 0;

  switch (msg_case()) {
    // optional .dcv.extensions.Request request = 1;
    case kRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.request_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtensionMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.ExtensionMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ExtensionMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ExtensionMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.ExtensionMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.ExtensionMessage)
    MergeFrom(*source);
  }
}

void ExtensionMessage::MergeFrom(const ExtensionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.ExtensionMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.msg_case()) {
    case kRequest: {
      mutable_request()->::dcv::extensions::Request::MergeFrom(from.request());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void ExtensionMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.ExtensionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtensionMessage::CopyFrom(const ExtensionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.ExtensionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionMessage::IsInitialized() const {

  return true;
}

void ExtensionMessage::Swap(ExtensionMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExtensionMessage::InternalSwap(ExtensionMessage* other) {
  std::swap(msg_, other->msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExtensionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtensionMessage_descriptor_;
  metadata.reflection = ExtensionMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExtensionMessage

// optional .dcv.extensions.Request request = 1;
bool ExtensionMessage::has_request() const {
  return msg_case() == kRequest;
}
void ExtensionMessage::set_has_request() {
  _oneof_case_[0] = kRequest;
}
void ExtensionMessage::clear_request() {
  if (has_request()) {
    delete msg_.request_;
    clear_has_msg();
  }
}
 const ::dcv::extensions::Request& ExtensionMessage::request() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.ExtensionMessage.request)
  return has_request()
      ? *msg_.request_
      : ::dcv::extensions::Request::default_instance();
}
::dcv::extensions::Request* ExtensionMessage::mutable_request() {
  if (!has_request()) {
    clear_msg();
    set_has_request();
    msg_.request_ = new ::dcv::extensions::Request;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.ExtensionMessage.request)
  return msg_.request_;
}
::dcv::extensions::Request* ExtensionMessage::release_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.ExtensionMessage.request)
  if (has_request()) {
    clear_has_msg();
    ::dcv::extensions::Request* temp = msg_.request_;
    msg_.request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ExtensionMessage::set_allocated_request(::dcv::extensions::Request* request) {
  clear_msg();
  if (request) {
    set_has_request();
    msg_.request_ = request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.ExtensionMessage.request)
}

bool ExtensionMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void ExtensionMessage::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
ExtensionMessage::MsgCase ExtensionMessage::msg_case() const {
  return ExtensionMessage::MsgCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DcvMessage::kResponseFieldNumber;
const int DcvMessage::kEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DcvMessage::DcvMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcv.extensions.DcvMessage)
}

void DcvMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  DcvMessage_default_oneof_instance_->response_ = const_cast< ::dcv::extensions::Response*>(&::dcv::extensions::Response::default_instance());
  DcvMessage_default_oneof_instance_->event_ = const_cast< ::dcv::extensions::Event*>(&::dcv::extensions::Event::default_instance());
}

DcvMessage::DcvMessage(const DcvMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.DcvMessage)
}

void DcvMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_msg();
}

DcvMessage::~DcvMessage() {
  // @@protoc_insertion_point(destructor:dcv.extensions.DcvMessage)
  SharedDtor();
}

void DcvMessage::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
  if (this != default_instance_) {
  }
}

void DcvMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DcvMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DcvMessage_descriptor_;
}

const DcvMessage& DcvMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_extensions_2eproto();
  return *default_instance_;
}

DcvMessage* DcvMessage::default_instance_ = NULL;

DcvMessage* DcvMessage::New(::google::protobuf::Arena* arena) const {
  DcvMessage* n = new DcvMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DcvMessage::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:dcv.extensions.DcvMessage)
  switch(msg_case()) {
    case kResponse: {
      delete msg_.response_;
      break;
    }
    case kEvent: {
      delete msg_.event_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void DcvMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.DcvMessage)
  clear_msg();
}

bool DcvMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcv.extensions.DcvMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dcv.extensions.Response response = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_event;
        break;
      }

      // optional .dcv.extensions.Event event = 3;
      case 3: {
        if (tag == 26) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcv.extensions.DcvMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcv.extensions.DcvMessage)
  return false;
#undef DO_
}

void DcvMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcv.extensions.DcvMessage)
  // optional .dcv.extensions.Response response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *msg_.response_, output);
  }

  // optional .dcv.extensions.Event event = 3;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *msg_.event_, output);
  }

  // @@protoc_insertion_point(serialize_end:dcv.extensions.DcvMessage)
}

::google::protobuf::uint8* DcvMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.DcvMessage)
  // optional .dcv.extensions.Response response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *msg_.response_, false, target);
  }

  // optional .dcv.extensions.Event event = 3;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *msg_.event_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.DcvMessage)
  return target;
}

int DcvMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.DcvMessage)
  int total_size = 0;

  switch (msg_case()) {
    // optional .dcv.extensions.Response response = 2;
    case kResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.response_);
      break;
    }
    // optional .dcv.extensions.Event event = 3;
    case kEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.event_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DcvMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.DcvMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DcvMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DcvMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.DcvMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.DcvMessage)
    MergeFrom(*source);
  }
}

void DcvMessage::MergeFrom(const DcvMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.DcvMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.msg_case()) {
    case kResponse: {
      mutable_response()->::dcv::extensions::Response::MergeFrom(from.response());
      break;
    }
    case kEvent: {
      mutable_event()->::dcv::extensions::Event::MergeFrom(from.event());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void DcvMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.DcvMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DcvMessage::CopyFrom(const DcvMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.DcvMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DcvMessage::IsInitialized() const {

  return true;
}

void DcvMessage::Swap(DcvMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DcvMessage::InternalSwap(DcvMessage* other) {
  std::swap(msg_, other->msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DcvMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DcvMessage_descriptor_;
  metadata.reflection = DcvMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DcvMessage

// optional .dcv.extensions.Response response = 2;
bool DcvMessage::has_response() const {
  return msg_case() == kResponse;
}
void DcvMessage::set_has_response() {
  _oneof_case_[0] = kResponse;
}
void DcvMessage::clear_response() {
  if (has_response()) {
    delete msg_.response_;
    clear_has_msg();
  }
}
 const ::dcv::extensions::Response& DcvMessage::response() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.DcvMessage.response)
  return has_response()
      ? *msg_.response_
      : ::dcv::extensions::Response::default_instance();
}
::dcv::extensions::Response* DcvMessage::mutable_response() {
  if (!has_response()) {
    clear_msg();
    set_has_response();
    msg_.response_ = new ::dcv::extensions::Response;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.DcvMessage.response)
  return msg_.response_;
}
::dcv::extensions::Response* DcvMessage::release_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.DcvMessage.response)
  if (has_response()) {
    clear_has_msg();
    ::dcv::extensions::Response* temp = msg_.response_;
    msg_.response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DcvMessage::set_allocated_response(::dcv::extensions::Response* response) {
  clear_msg();
  if (response) {
    set_has_response();
    msg_.response_ = response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.DcvMessage.response)
}

// optional .dcv.extensions.Event event = 3;
bool DcvMessage::has_event() const {
  return msg_case() == kEvent;
}
void DcvMessage::set_has_event() {
  _oneof_case_[0] = kEvent;
}
void DcvMessage::clear_event() {
  if (has_event()) {
    delete msg_.event_;
    clear_has_msg();
  }
}
 const ::dcv::extensions::Event& DcvMessage::event() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.DcvMessage.event)
  return has_event()
      ? *msg_.event_
      : ::dcv::extensions::Event::default_instance();
}
::dcv::extensions::Event* DcvMessage::mutable_event() {
  if (!has_event()) {
    clear_msg();
    set_has_event();
    msg_.event_ = new ::dcv::extensions::Event;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.DcvMessage.event)
  return msg_.event_;
}
::dcv::extensions::Event* DcvMessage::release_event() {
  // @@protoc_insertion_point(field_release:dcv.extensions.DcvMessage.event)
  if (has_event()) {
    clear_has_msg();
    ::dcv::extensions::Event* temp = msg_.event_;
    msg_.event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DcvMessage::set_allocated_event(::dcv::extensions::Event* event) {
  clear_msg();
  if (event) {
    set_has_event();
    msg_.event_ = event;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.DcvMessage.event)
}

bool DcvMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void DcvMessage::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
DcvMessage::MsgCase DcvMessage::msg_case() const {
  return DcvMessage::MsgCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace extensions
}  // namespace dcv

// @@protoc_insertion_point(global_scope)
