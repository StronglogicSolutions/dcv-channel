// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: extensions.proto

#ifndef PROTOBUF_extensions_2eproto__INCLUDED
#define PROTOBUF_extensions_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dcv {
namespace extensions {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_extensions_2eproto();
void protobuf_AssignDesc_extensions_2eproto();
void protobuf_ShutdownFile_extensions_2eproto();

class CloseVirtualChannelRequest;
class CloseVirtualChannelResponse;
class DcvMessage;
class Event;
class ExtensionMessage;
class GetDcvInfoRequest;
class GetDcvInfoResponse;
class GetManifestRequest;
class GetManifestResponse;
class GetStreamingViewsRequest;
class GetStreamingViewsResponse;
class IsPointInsideStreamingViewsRequest;
class IsPointInsideStreamingViewsResponse;
class Point;
class Rect;
class Request;
class Response;
class SetCursorPointRequest;
class SetCursorPointResponse;
class SetupVirtualChannelRequest;
class SetupVirtualChannelResponse;
class SoftwareInfo;
class SoftwareInfo_VersionNumber;
class StreamingViews;
class StreamingViewsChangedEvent;
class StreamingViews_StreamingView;
class VirtualChannelClosedEvent;
class VirtualChannelReadyEvent;

enum GetDcvInfoResponse_DcvRole {
  GetDcvInfoResponse_DcvRole_Server = 0,
  GetDcvInfoResponse_DcvRole_Client = 1,
  GetDcvInfoResponse_DcvRole_GetDcvInfoResponse_DcvRole_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GetDcvInfoResponse_DcvRole_GetDcvInfoResponse_DcvRole_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GetDcvInfoResponse_DcvRole_IsValid(int value);
const GetDcvInfoResponse_DcvRole GetDcvInfoResponse_DcvRole_DcvRole_MIN = GetDcvInfoResponse_DcvRole_Server;
const GetDcvInfoResponse_DcvRole GetDcvInfoResponse_DcvRole_DcvRole_MAX = GetDcvInfoResponse_DcvRole_Client;
const int GetDcvInfoResponse_DcvRole_DcvRole_ARRAYSIZE = GetDcvInfoResponse_DcvRole_DcvRole_MAX + 1;

const ::google::protobuf::EnumDescriptor* GetDcvInfoResponse_DcvRole_descriptor();
inline const ::std::string& GetDcvInfoResponse_DcvRole_Name(GetDcvInfoResponse_DcvRole value) {
  return ::google::protobuf::internal::NameOfEnum(
    GetDcvInfoResponse_DcvRole_descriptor(), value);
}
inline bool GetDcvInfoResponse_DcvRole_Parse(
    const ::std::string& name, GetDcvInfoResponse_DcvRole* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetDcvInfoResponse_DcvRole>(
    GetDcvInfoResponse_DcvRole_descriptor(), name, value);
}
enum Response_Status {
  Response_Status_NONE = 0,
  Response_Status_SUCCESS = 1,
  Response_Status_ERROR_GENERIC = 10,
  Response_Status_ERROR_ACCESS_DENIED = 11,
  Response_Status_ERROR_NOT_IMPLEMENTED = 12,
  Response_Status_ERROR_INVALID_PARAMETER = 13,
  Response_Status_ERROR_INVALID_VIRTUAL_CHANNEL_NAMESPACE_IN_MANIFEST = 14,
  Response_Status_ERROR_TOO_MANY_VIRTUAL_CHANNELS = 15,
  Response_Status_Response_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Response_Status_Response_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Response_Status_IsValid(int value);
const Response_Status Response_Status_Status_MIN = Response_Status_NONE;
const Response_Status Response_Status_Status_MAX = Response_Status_ERROR_TOO_MANY_VIRTUAL_CHANNELS;
const int Response_Status_Status_ARRAYSIZE = Response_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_Status_descriptor();
inline const ::std::string& Response_Status_Name(Response_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_Status_descriptor(), value);
}
inline bool Response_Status_Parse(
    const ::std::string& name, Response_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_Status>(
    Response_Status_descriptor(), name, value);
}
// ===================================================================

class SoftwareInfo_VersionNumber : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.SoftwareInfo.VersionNumber) */ {
 public:
  SoftwareInfo_VersionNumber();
  virtual ~SoftwareInfo_VersionNumber();

  SoftwareInfo_VersionNumber(const SoftwareInfo_VersionNumber& from);

  inline SoftwareInfo_VersionNumber& operator=(const SoftwareInfo_VersionNumber& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftwareInfo_VersionNumber& default_instance();

  void Swap(SoftwareInfo_VersionNumber* other);

  // implements Message ----------------------------------------------

  inline SoftwareInfo_VersionNumber* New() const { return New(NULL); }

  SoftwareInfo_VersionNumber* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SoftwareInfo_VersionNumber& from);
  void MergeFrom(const SoftwareInfo_VersionNumber& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SoftwareInfo_VersionNumber* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 major = 1;
  void clear_major();
  static const int kMajorFieldNumber = 1;
  ::google::protobuf::uint32 major() const;
  void set_major(::google::protobuf::uint32 value);

  // optional uint32 minor = 2;
  void clear_minor();
  static const int kMinorFieldNumber = 2;
  ::google::protobuf::uint32 minor() const;
  void set_minor(::google::protobuf::uint32 value);

  // optional uint32 revision = 3;
  void clear_revision();
  static const int kRevisionFieldNumber = 3;
  ::google::protobuf::uint32 revision() const;
  void set_revision(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dcv.extensions.SoftwareInfo.VersionNumber)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 major_;
  ::google::protobuf::uint32 minor_;
  ::google::protobuf::uint32 revision_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static SoftwareInfo_VersionNumber* default_instance_;
};
// -------------------------------------------------------------------

class SoftwareInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.SoftwareInfo) */ {
 public:
  SoftwareInfo();
  virtual ~SoftwareInfo();

  SoftwareInfo(const SoftwareInfo& from);

  inline SoftwareInfo& operator=(const SoftwareInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoftwareInfo& default_instance();

  void Swap(SoftwareInfo* other);

  // implements Message ----------------------------------------------

  inline SoftwareInfo* New() const { return New(NULL); }

  SoftwareInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SoftwareInfo& from);
  void MergeFrom(const SoftwareInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SoftwareInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SoftwareInfo_VersionNumber VersionNumber;

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .dcv.extensions.SoftwareInfo.VersionNumber version = 2;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::dcv::extensions::SoftwareInfo_VersionNumber& version() const;
  ::dcv::extensions::SoftwareInfo_VersionNumber* mutable_version();
  ::dcv::extensions::SoftwareInfo_VersionNumber* release_version();
  void set_allocated_version(::dcv::extensions::SoftwareInfo_VersionNumber* version);

  // optional string os = 3;
  void clear_os();
  static const int kOsFieldNumber = 3;
  const ::std::string& os() const;
  void set_os(const ::std::string& value);
  void set_os(const char* value);
  void set_os(const char* value, size_t size);
  ::std::string* mutable_os();
  ::std::string* release_os();
  void set_allocated_os(::std::string* os);

  // optional string arch = 4;
  void clear_arch();
  static const int kArchFieldNumber = 4;
  const ::std::string& arch() const;
  void set_arch(const ::std::string& value);
  void set_arch(const char* value);
  void set_arch(const char* value, size_t size);
  ::std::string* mutable_arch();
  ::std::string* release_arch();
  void set_allocated_arch(::std::string* arch);

  // optional string hostname = 5;
  void clear_hostname();
  static const int kHostnameFieldNumber = 5;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // @@protoc_insertion_point(class_scope:dcv.extensions.SoftwareInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::dcv::extensions::SoftwareInfo_VersionNumber* version_;
  ::google::protobuf::internal::ArenaStringPtr os_;
  ::google::protobuf::internal::ArenaStringPtr arch_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static SoftwareInfo* default_instance_;
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  inline Point* New() const { return New(NULL); }

  Point* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dcv.extensions.Point)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// -------------------------------------------------------------------

class Rect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.Rect) */ {
 public:
  Rect();
  virtual ~Rect();

  Rect(const Rect& from);

  inline Rect& operator=(const Rect& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rect& default_instance();

  void Swap(Rect* other);

  // implements Message ----------------------------------------------

  inline Rect* New() const { return New(NULL); }

  Rect* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rect& from);
  void MergeFrom(const Rect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Rect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // optional uint32 width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // optional uint32 height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dcv.extensions.Rect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static Rect* default_instance_;
};
// -------------------------------------------------------------------

class StreamingViews_StreamingView : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.StreamingViews.StreamingView) */ {
 public:
  StreamingViews_StreamingView();
  virtual ~StreamingViews_StreamingView();

  StreamingViews_StreamingView(const StreamingViews_StreamingView& from);

  inline StreamingViews_StreamingView& operator=(const StreamingViews_StreamingView& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamingViews_StreamingView& default_instance();

  void Swap(StreamingViews_StreamingView* other);

  // implements Message ----------------------------------------------

  inline StreamingViews_StreamingView* New() const { return New(NULL); }

  StreamingViews_StreamingView* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamingViews_StreamingView& from);
  void MergeFrom(const StreamingViews_StreamingView& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StreamingViews_StreamingView* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 view_id = 1;
  void clear_view_id();
  static const int kViewIdFieldNumber = 1;
  ::google::protobuf::int32 view_id() const;
  void set_view_id(::google::protobuf::int32 value);

  // optional .dcv.extensions.Rect local_area = 2;
  bool has_local_area() const;
  void clear_local_area();
  static const int kLocalAreaFieldNumber = 2;
  const ::dcv::extensions::Rect& local_area() const;
  ::dcv::extensions::Rect* mutable_local_area();
  ::dcv::extensions::Rect* release_local_area();
  void set_allocated_local_area(::dcv::extensions::Rect* local_area);

  // optional double zoom_factor = 3;
  void clear_zoom_factor();
  static const int kZoomFactorFieldNumber = 3;
  double zoom_factor() const;
  void set_zoom_factor(double value);

  // optional .dcv.extensions.Point remote_offset = 4;
  bool has_remote_offset() const;
  void clear_remote_offset();
  static const int kRemoteOffsetFieldNumber = 4;
  const ::dcv::extensions::Point& remote_offset() const;
  ::dcv::extensions::Point* mutable_remote_offset();
  ::dcv::extensions::Point* release_remote_offset();
  void set_allocated_remote_offset(::dcv::extensions::Point* remote_offset);

  // @@protoc_insertion_point(class_scope:dcv.extensions.StreamingViews.StreamingView)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dcv::extensions::Rect* local_area_;
  double zoom_factor_;
  ::dcv::extensions::Point* remote_offset_;
  ::google::protobuf::int32 view_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static StreamingViews_StreamingView* default_instance_;
};
// -------------------------------------------------------------------

class StreamingViews : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.StreamingViews) */ {
 public:
  StreamingViews();
  virtual ~StreamingViews();

  StreamingViews(const StreamingViews& from);

  inline StreamingViews& operator=(const StreamingViews& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamingViews& default_instance();

  void Swap(StreamingViews* other);

  // implements Message ----------------------------------------------

  inline StreamingViews* New() const { return New(NULL); }

  StreamingViews* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamingViews& from);
  void MergeFrom(const StreamingViews& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StreamingViews* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef StreamingViews_StreamingView StreamingView;

  // accessors -------------------------------------------------------

  // repeated .dcv.extensions.StreamingViews.StreamingView streaming_view = 1;
  int streaming_view_size() const;
  void clear_streaming_view();
  static const int kStreamingViewFieldNumber = 1;
  const ::dcv::extensions::StreamingViews_StreamingView& streaming_view(int index) const;
  ::dcv::extensions::StreamingViews_StreamingView* mutable_streaming_view(int index);
  ::dcv::extensions::StreamingViews_StreamingView* add_streaming_view();
  ::google::protobuf::RepeatedPtrField< ::dcv::extensions::StreamingViews_StreamingView >*
      mutable_streaming_view();
  const ::google::protobuf::RepeatedPtrField< ::dcv::extensions::StreamingViews_StreamingView >&
      streaming_view() const;

  // @@protoc_insertion_point(class_scope:dcv.extensions.StreamingViews)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::dcv::extensions::StreamingViews_StreamingView > streaming_view_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static StreamingViews* default_instance_;
};
// -------------------------------------------------------------------

class GetDcvInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.GetDcvInfoRequest) */ {
 public:
  GetDcvInfoRequest();
  virtual ~GetDcvInfoRequest();

  GetDcvInfoRequest(const GetDcvInfoRequest& from);

  inline GetDcvInfoRequest& operator=(const GetDcvInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDcvInfoRequest& default_instance();

  void Swap(GetDcvInfoRequest* other);

  // implements Message ----------------------------------------------

  inline GetDcvInfoRequest* New() const { return New(NULL); }

  GetDcvInfoRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetDcvInfoRequest& from);
  void MergeFrom(const GetDcvInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetDcvInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dcv.extensions.GetDcvInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static GetDcvInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetManifestRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.GetManifestRequest) */ {
 public:
  GetManifestRequest();
  virtual ~GetManifestRequest();

  GetManifestRequest(const GetManifestRequest& from);

  inline GetManifestRequest& operator=(const GetManifestRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetManifestRequest& default_instance();

  void Swap(GetManifestRequest* other);

  // implements Message ----------------------------------------------

  inline GetManifestRequest* New() const { return New(NULL); }

  GetManifestRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetManifestRequest& from);
  void MergeFrom(const GetManifestRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetManifestRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dcv.extensions.GetManifestRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static GetManifestRequest* default_instance_;
};
// -------------------------------------------------------------------

class SetupVirtualChannelRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.SetupVirtualChannelRequest) */ {
 public:
  SetupVirtualChannelRequest();
  virtual ~SetupVirtualChannelRequest();

  SetupVirtualChannelRequest(const SetupVirtualChannelRequest& from);

  inline SetupVirtualChannelRequest& operator=(const SetupVirtualChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetupVirtualChannelRequest& default_instance();

  void Swap(SetupVirtualChannelRequest* other);

  // implements Message ----------------------------------------------

  inline SetupVirtualChannelRequest* New() const { return New(NULL); }

  SetupVirtualChannelRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetupVirtualChannelRequest& from);
  void MergeFrom(const SetupVirtualChannelRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetupVirtualChannelRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string virtual_channel_name = 1;
  void clear_virtual_channel_name();
  static const int kVirtualChannelNameFieldNumber = 1;
  const ::std::string& virtual_channel_name() const;
  void set_virtual_channel_name(const ::std::string& value);
  void set_virtual_channel_name(const char* value);
  void set_virtual_channel_name(const char* value, size_t size);
  ::std::string* mutable_virtual_channel_name();
  ::std::string* release_virtual_channel_name();
  void set_allocated_virtual_channel_name(::std::string* virtual_channel_name);

  // optional int64 relay_client_process_id = 2;
  void clear_relay_client_process_id();
  static const int kRelayClientProcessIdFieldNumber = 2;
  ::google::protobuf::int64 relay_client_process_id() const;
  void set_relay_client_process_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:dcv.extensions.SetupVirtualChannelRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr virtual_channel_name_;
  ::google::protobuf::int64 relay_client_process_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static SetupVirtualChannelRequest* default_instance_;
};
// -------------------------------------------------------------------

class CloseVirtualChannelRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.CloseVirtualChannelRequest) */ {
 public:
  CloseVirtualChannelRequest();
  virtual ~CloseVirtualChannelRequest();

  CloseVirtualChannelRequest(const CloseVirtualChannelRequest& from);

  inline CloseVirtualChannelRequest& operator=(const CloseVirtualChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseVirtualChannelRequest& default_instance();

  void Swap(CloseVirtualChannelRequest* other);

  // implements Message ----------------------------------------------

  inline CloseVirtualChannelRequest* New() const { return New(NULL); }

  CloseVirtualChannelRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloseVirtualChannelRequest& from);
  void MergeFrom(const CloseVirtualChannelRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CloseVirtualChannelRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string virtual_channel_name = 1;
  void clear_virtual_channel_name();
  static const int kVirtualChannelNameFieldNumber = 1;
  const ::std::string& virtual_channel_name() const;
  void set_virtual_channel_name(const ::std::string& value);
  void set_virtual_channel_name(const char* value);
  void set_virtual_channel_name(const char* value, size_t size);
  ::std::string* mutable_virtual_channel_name();
  ::std::string* release_virtual_channel_name();
  void set_allocated_virtual_channel_name(::std::string* virtual_channel_name);

  // @@protoc_insertion_point(class_scope:dcv.extensions.CloseVirtualChannelRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr virtual_channel_name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static CloseVirtualChannelRequest* default_instance_;
};
// -------------------------------------------------------------------

class SetCursorPointRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.SetCursorPointRequest) */ {
 public:
  SetCursorPointRequest();
  virtual ~SetCursorPointRequest();

  SetCursorPointRequest(const SetCursorPointRequest& from);

  inline SetCursorPointRequest& operator=(const SetCursorPointRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetCursorPointRequest& default_instance();

  void Swap(SetCursorPointRequest* other);

  // implements Message ----------------------------------------------

  inline SetCursorPointRequest* New() const { return New(NULL); }

  SetCursorPointRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetCursorPointRequest& from);
  void MergeFrom(const SetCursorPointRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetCursorPointRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dcv.extensions.Point point = 1;
  bool has_point() const;
  void clear_point();
  static const int kPointFieldNumber = 1;
  const ::dcv::extensions::Point& point() const;
  ::dcv::extensions::Point* mutable_point();
  ::dcv::extensions::Point* release_point();
  void set_allocated_point(::dcv::extensions::Point* point);

  // @@protoc_insertion_point(class_scope:dcv.extensions.SetCursorPointRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dcv::extensions::Point* point_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static SetCursorPointRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetStreamingViewsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.GetStreamingViewsRequest) */ {
 public:
  GetStreamingViewsRequest();
  virtual ~GetStreamingViewsRequest();

  GetStreamingViewsRequest(const GetStreamingViewsRequest& from);

  inline GetStreamingViewsRequest& operator=(const GetStreamingViewsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStreamingViewsRequest& default_instance();

  void Swap(GetStreamingViewsRequest* other);

  // implements Message ----------------------------------------------

  inline GetStreamingViewsRequest* New() const { return New(NULL); }

  GetStreamingViewsRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetStreamingViewsRequest& from);
  void MergeFrom(const GetStreamingViewsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetStreamingViewsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dcv.extensions.GetStreamingViewsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static GetStreamingViewsRequest* default_instance_;
};
// -------------------------------------------------------------------

class IsPointInsideStreamingViewsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.IsPointInsideStreamingViewsRequest) */ {
 public:
  IsPointInsideStreamingViewsRequest();
  virtual ~IsPointInsideStreamingViewsRequest();

  IsPointInsideStreamingViewsRequest(const IsPointInsideStreamingViewsRequest& from);

  inline IsPointInsideStreamingViewsRequest& operator=(const IsPointInsideStreamingViewsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IsPointInsideStreamingViewsRequest& default_instance();

  void Swap(IsPointInsideStreamingViewsRequest* other);

  // implements Message ----------------------------------------------

  inline IsPointInsideStreamingViewsRequest* New() const { return New(NULL); }

  IsPointInsideStreamingViewsRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IsPointInsideStreamingViewsRequest& from);
  void MergeFrom(const IsPointInsideStreamingViewsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IsPointInsideStreamingViewsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dcv.extensions.Point point = 1;
  bool has_point() const;
  void clear_point();
  static const int kPointFieldNumber = 1;
  const ::dcv::extensions::Point& point() const;
  ::dcv::extensions::Point* mutable_point();
  ::dcv::extensions::Point* release_point();
  void set_allocated_point(::dcv::extensions::Point* point);

  // @@protoc_insertion_point(class_scope:dcv.extensions.IsPointInsideStreamingViewsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dcv::extensions::Point* point_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static IsPointInsideStreamingViewsRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetDcvInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.GetDcvInfoResponse) */ {
 public:
  GetDcvInfoResponse();
  virtual ~GetDcvInfoResponse();

  GetDcvInfoResponse(const GetDcvInfoResponse& from);

  inline GetDcvInfoResponse& operator=(const GetDcvInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDcvInfoResponse& default_instance();

  void Swap(GetDcvInfoResponse* other);

  // implements Message ----------------------------------------------

  inline GetDcvInfoResponse* New() const { return New(NULL); }

  GetDcvInfoResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetDcvInfoResponse& from);
  void MergeFrom(const GetDcvInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetDcvInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GetDcvInfoResponse_DcvRole DcvRole;
  static const DcvRole Server =
    GetDcvInfoResponse_DcvRole_Server;
  static const DcvRole Client =
    GetDcvInfoResponse_DcvRole_Client;
  static inline bool DcvRole_IsValid(int value) {
    return GetDcvInfoResponse_DcvRole_IsValid(value);
  }
  static const DcvRole DcvRole_MIN =
    GetDcvInfoResponse_DcvRole_DcvRole_MIN;
  static const DcvRole DcvRole_MAX =
    GetDcvInfoResponse_DcvRole_DcvRole_MAX;
  static const int DcvRole_ARRAYSIZE =
    GetDcvInfoResponse_DcvRole_DcvRole_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DcvRole_descriptor() {
    return GetDcvInfoResponse_DcvRole_descriptor();
  }
  static inline const ::std::string& DcvRole_Name(DcvRole value) {
    return GetDcvInfoResponse_DcvRole_Name(value);
  }
  static inline bool DcvRole_Parse(const ::std::string& name,
      DcvRole* value) {
    return GetDcvInfoResponse_DcvRole_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .dcv.extensions.GetDcvInfoResponse.DcvRole dcv_role = 1;
  void clear_dcv_role();
  static const int kDcvRoleFieldNumber = 1;
  ::dcv::extensions::GetDcvInfoResponse_DcvRole dcv_role() const;
  void set_dcv_role(::dcv::extensions::GetDcvInfoResponse_DcvRole value);

  // optional int64 dcv_process_id = 2;
  void clear_dcv_process_id();
  static const int kDcvProcessIdFieldNumber = 2;
  ::google::protobuf::int64 dcv_process_id() const;
  void set_dcv_process_id(::google::protobuf::int64 value);

  // optional .dcv.extensions.SoftwareInfo server_info = 3;
  bool has_server_info() const;
  void clear_server_info();
  static const int kServerInfoFieldNumber = 3;
  const ::dcv::extensions::SoftwareInfo& server_info() const;
  ::dcv::extensions::SoftwareInfo* mutable_server_info();
  ::dcv::extensions::SoftwareInfo* release_server_info();
  void set_allocated_server_info(::dcv::extensions::SoftwareInfo* server_info);

  // optional .dcv.extensions.SoftwareInfo client_info = 4;
  bool has_client_info() const;
  void clear_client_info();
  static const int kClientInfoFieldNumber = 4;
  const ::dcv::extensions::SoftwareInfo& client_info() const;
  ::dcv::extensions::SoftwareInfo* mutable_client_info();
  ::dcv::extensions::SoftwareInfo* release_client_info();
  void set_allocated_client_info(::dcv::extensions::SoftwareInfo* client_info);

  // @@protoc_insertion_point(class_scope:dcv.extensions.GetDcvInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 dcv_process_id_;
  ::dcv::extensions::SoftwareInfo* server_info_;
  ::dcv::extensions::SoftwareInfo* client_info_;
  int dcv_role_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static GetDcvInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetManifestResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.GetManifestResponse) */ {
 public:
  GetManifestResponse();
  virtual ~GetManifestResponse();

  GetManifestResponse(const GetManifestResponse& from);

  inline GetManifestResponse& operator=(const GetManifestResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetManifestResponse& default_instance();

  void Swap(GetManifestResponse* other);

  // implements Message ----------------------------------------------

  inline GetManifestResponse* New() const { return New(NULL); }

  GetManifestResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetManifestResponse& from);
  void MergeFrom(const GetManifestResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetManifestResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string manifest_path = 1;
  void clear_manifest_path();
  static const int kManifestPathFieldNumber = 1;
  const ::std::string& manifest_path() const;
  void set_manifest_path(const ::std::string& value);
  void set_manifest_path(const char* value);
  void set_manifest_path(const char* value, size_t size);
  ::std::string* mutable_manifest_path();
  ::std::string* release_manifest_path();
  void set_allocated_manifest_path(::std::string* manifest_path);

  // @@protoc_insertion_point(class_scope:dcv.extensions.GetManifestResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr manifest_path_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static GetManifestResponse* default_instance_;
};
// -------------------------------------------------------------------

class SetupVirtualChannelResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.SetupVirtualChannelResponse) */ {
 public:
  SetupVirtualChannelResponse();
  virtual ~SetupVirtualChannelResponse();

  SetupVirtualChannelResponse(const SetupVirtualChannelResponse& from);

  inline SetupVirtualChannelResponse& operator=(const SetupVirtualChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetupVirtualChannelResponse& default_instance();

  void Swap(SetupVirtualChannelResponse* other);

  // implements Message ----------------------------------------------

  inline SetupVirtualChannelResponse* New() const { return New(NULL); }

  SetupVirtualChannelResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetupVirtualChannelResponse& from);
  void MergeFrom(const SetupVirtualChannelResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetupVirtualChannelResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string virtual_channel_name = 1;
  void clear_virtual_channel_name();
  static const int kVirtualChannelNameFieldNumber = 1;
  const ::std::string& virtual_channel_name() const;
  void set_virtual_channel_name(const ::std::string& value);
  void set_virtual_channel_name(const char* value);
  void set_virtual_channel_name(const char* value, size_t size);
  ::std::string* mutable_virtual_channel_name();
  ::std::string* release_virtual_channel_name();
  void set_allocated_virtual_channel_name(::std::string* virtual_channel_name);

  // optional string relay_path = 2;
  void clear_relay_path();
  static const int kRelayPathFieldNumber = 2;
  const ::std::string& relay_path() const;
  void set_relay_path(const ::std::string& value);
  void set_relay_path(const char* value);
  void set_relay_path(const char* value, size_t size);
  ::std::string* mutable_relay_path();
  ::std::string* release_relay_path();
  void set_allocated_relay_path(::std::string* relay_path);

  // optional int64 relay_server_process_id = 3;
  void clear_relay_server_process_id();
  static const int kRelayServerProcessIdFieldNumber = 3;
  ::google::protobuf::int64 relay_server_process_id() const;
  void set_relay_server_process_id(::google::protobuf::int64 value);

  // optional bytes virtual_channel_auth_token = 4;
  void clear_virtual_channel_auth_token();
  static const int kVirtualChannelAuthTokenFieldNumber = 4;
  const ::std::string& virtual_channel_auth_token() const;
  void set_virtual_channel_auth_token(const ::std::string& value);
  void set_virtual_channel_auth_token(const char* value);
  void set_virtual_channel_auth_token(const void* value, size_t size);
  ::std::string* mutable_virtual_channel_auth_token();
  ::std::string* release_virtual_channel_auth_token();
  void set_allocated_virtual_channel_auth_token(::std::string* virtual_channel_auth_token);

  // @@protoc_insertion_point(class_scope:dcv.extensions.SetupVirtualChannelResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr virtual_channel_name_;
  ::google::protobuf::internal::ArenaStringPtr relay_path_;
  ::google::protobuf::int64 relay_server_process_id_;
  ::google::protobuf::internal::ArenaStringPtr virtual_channel_auth_token_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static SetupVirtualChannelResponse* default_instance_;
};
// -------------------------------------------------------------------

class CloseVirtualChannelResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.CloseVirtualChannelResponse) */ {
 public:
  CloseVirtualChannelResponse();
  virtual ~CloseVirtualChannelResponse();

  CloseVirtualChannelResponse(const CloseVirtualChannelResponse& from);

  inline CloseVirtualChannelResponse& operator=(const CloseVirtualChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseVirtualChannelResponse& default_instance();

  void Swap(CloseVirtualChannelResponse* other);

  // implements Message ----------------------------------------------

  inline CloseVirtualChannelResponse* New() const { return New(NULL); }

  CloseVirtualChannelResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloseVirtualChannelResponse& from);
  void MergeFrom(const CloseVirtualChannelResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CloseVirtualChannelResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string virtual_channel_name = 1;
  void clear_virtual_channel_name();
  static const int kVirtualChannelNameFieldNumber = 1;
  const ::std::string& virtual_channel_name() const;
  void set_virtual_channel_name(const ::std::string& value);
  void set_virtual_channel_name(const char* value);
  void set_virtual_channel_name(const char* value, size_t size);
  ::std::string* mutable_virtual_channel_name();
  ::std::string* release_virtual_channel_name();
  void set_allocated_virtual_channel_name(::std::string* virtual_channel_name);

  // @@protoc_insertion_point(class_scope:dcv.extensions.CloseVirtualChannelResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr virtual_channel_name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static CloseVirtualChannelResponse* default_instance_;
};
// -------------------------------------------------------------------

class SetCursorPointResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.SetCursorPointResponse) */ {
 public:
  SetCursorPointResponse();
  virtual ~SetCursorPointResponse();

  SetCursorPointResponse(const SetCursorPointResponse& from);

  inline SetCursorPointResponse& operator=(const SetCursorPointResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetCursorPointResponse& default_instance();

  void Swap(SetCursorPointResponse* other);

  // implements Message ----------------------------------------------

  inline SetCursorPointResponse* New() const { return New(NULL); }

  SetCursorPointResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetCursorPointResponse& from);
  void MergeFrom(const SetCursorPointResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetCursorPointResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dcv.extensions.SetCursorPointResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static SetCursorPointResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetStreamingViewsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.GetStreamingViewsResponse) */ {
 public:
  GetStreamingViewsResponse();
  virtual ~GetStreamingViewsResponse();

  GetStreamingViewsResponse(const GetStreamingViewsResponse& from);

  inline GetStreamingViewsResponse& operator=(const GetStreamingViewsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetStreamingViewsResponse& default_instance();

  void Swap(GetStreamingViewsResponse* other);

  // implements Message ----------------------------------------------

  inline GetStreamingViewsResponse* New() const { return New(NULL); }

  GetStreamingViewsResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetStreamingViewsResponse& from);
  void MergeFrom(const GetStreamingViewsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetStreamingViewsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dcv.extensions.StreamingViews streaming_views = 1;
  bool has_streaming_views() const;
  void clear_streaming_views();
  static const int kStreamingViewsFieldNumber = 1;
  const ::dcv::extensions::StreamingViews& streaming_views() const;
  ::dcv::extensions::StreamingViews* mutable_streaming_views();
  ::dcv::extensions::StreamingViews* release_streaming_views();
  void set_allocated_streaming_views(::dcv::extensions::StreamingViews* streaming_views);

  // @@protoc_insertion_point(class_scope:dcv.extensions.GetStreamingViewsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dcv::extensions::StreamingViews* streaming_views_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static GetStreamingViewsResponse* default_instance_;
};
// -------------------------------------------------------------------

class IsPointInsideStreamingViewsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.IsPointInsideStreamingViewsResponse) */ {
 public:
  IsPointInsideStreamingViewsResponse();
  virtual ~IsPointInsideStreamingViewsResponse();

  IsPointInsideStreamingViewsResponse(const IsPointInsideStreamingViewsResponse& from);

  inline IsPointInsideStreamingViewsResponse& operator=(const IsPointInsideStreamingViewsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IsPointInsideStreamingViewsResponse& default_instance();

  void Swap(IsPointInsideStreamingViewsResponse* other);

  // implements Message ----------------------------------------------

  inline IsPointInsideStreamingViewsResponse* New() const { return New(NULL); }

  IsPointInsideStreamingViewsResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IsPointInsideStreamingViewsResponse& from);
  void MergeFrom(const IsPointInsideStreamingViewsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IsPointInsideStreamingViewsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 view_id = 1;
  void clear_view_id();
  static const int kViewIdFieldNumber = 1;
  ::google::protobuf::int32 view_id() const;
  void set_view_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dcv.extensions.IsPointInsideStreamingViewsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 view_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static IsPointInsideStreamingViewsResponse* default_instance_;
};
// -------------------------------------------------------------------

class VirtualChannelReadyEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.VirtualChannelReadyEvent) */ {
 public:
  VirtualChannelReadyEvent();
  virtual ~VirtualChannelReadyEvent();

  VirtualChannelReadyEvent(const VirtualChannelReadyEvent& from);

  inline VirtualChannelReadyEvent& operator=(const VirtualChannelReadyEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VirtualChannelReadyEvent& default_instance();

  void Swap(VirtualChannelReadyEvent* other);

  // implements Message ----------------------------------------------

  inline VirtualChannelReadyEvent* New() const { return New(NULL); }

  VirtualChannelReadyEvent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VirtualChannelReadyEvent& from);
  void MergeFrom(const VirtualChannelReadyEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VirtualChannelReadyEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string virtual_channel_name = 1;
  void clear_virtual_channel_name();
  static const int kVirtualChannelNameFieldNumber = 1;
  const ::std::string& virtual_channel_name() const;
  void set_virtual_channel_name(const ::std::string& value);
  void set_virtual_channel_name(const char* value);
  void set_virtual_channel_name(const char* value, size_t size);
  ::std::string* mutable_virtual_channel_name();
  ::std::string* release_virtual_channel_name();
  void set_allocated_virtual_channel_name(::std::string* virtual_channel_name);

  // @@protoc_insertion_point(class_scope:dcv.extensions.VirtualChannelReadyEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr virtual_channel_name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static VirtualChannelReadyEvent* default_instance_;
};
// -------------------------------------------------------------------

class VirtualChannelClosedEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.VirtualChannelClosedEvent) */ {
 public:
  VirtualChannelClosedEvent();
  virtual ~VirtualChannelClosedEvent();

  VirtualChannelClosedEvent(const VirtualChannelClosedEvent& from);

  inline VirtualChannelClosedEvent& operator=(const VirtualChannelClosedEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VirtualChannelClosedEvent& default_instance();

  void Swap(VirtualChannelClosedEvent* other);

  // implements Message ----------------------------------------------

  inline VirtualChannelClosedEvent* New() const { return New(NULL); }

  VirtualChannelClosedEvent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VirtualChannelClosedEvent& from);
  void MergeFrom(const VirtualChannelClosedEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VirtualChannelClosedEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string virtual_channel_name = 1;
  void clear_virtual_channel_name();
  static const int kVirtualChannelNameFieldNumber = 1;
  const ::std::string& virtual_channel_name() const;
  void set_virtual_channel_name(const ::std::string& value);
  void set_virtual_channel_name(const char* value);
  void set_virtual_channel_name(const char* value, size_t size);
  ::std::string* mutable_virtual_channel_name();
  ::std::string* release_virtual_channel_name();
  void set_allocated_virtual_channel_name(::std::string* virtual_channel_name);

  // @@protoc_insertion_point(class_scope:dcv.extensions.VirtualChannelClosedEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr virtual_channel_name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static VirtualChannelClosedEvent* default_instance_;
};
// -------------------------------------------------------------------

class StreamingViewsChangedEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.StreamingViewsChangedEvent) */ {
 public:
  StreamingViewsChangedEvent();
  virtual ~StreamingViewsChangedEvent();

  StreamingViewsChangedEvent(const StreamingViewsChangedEvent& from);

  inline StreamingViewsChangedEvent& operator=(const StreamingViewsChangedEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamingViewsChangedEvent& default_instance();

  void Swap(StreamingViewsChangedEvent* other);

  // implements Message ----------------------------------------------

  inline StreamingViewsChangedEvent* New() const { return New(NULL); }

  StreamingViewsChangedEvent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamingViewsChangedEvent& from);
  void MergeFrom(const StreamingViewsChangedEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StreamingViewsChangedEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dcv.extensions.StreamingViews streaming_views = 1;
  bool has_streaming_views() const;
  void clear_streaming_views();
  static const int kStreamingViewsFieldNumber = 1;
  const ::dcv::extensions::StreamingViews& streaming_views() const;
  ::dcv::extensions::StreamingViews* mutable_streaming_views();
  ::dcv::extensions::StreamingViews* release_streaming_views();
  void set_allocated_streaming_views(::dcv::extensions::StreamingViews* streaming_views);

  // @@protoc_insertion_point(class_scope:dcv.extensions.StreamingViewsChangedEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::dcv::extensions::StreamingViews* streaming_views_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static StreamingViewsChangedEvent* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  enum RequestCase {
    kGetDcvInfoRequest = 10,
    kGetManifestRequest = 11,
    kSetupVirtualChannelRequest = 20,
    kCloseVirtualChannelRequest = 21,
    kSetCursorPointRequest = 30,
    kGetStreamingViewsRequest = 31,
    kIsPointInsideStreamingViewsRequest = 32,
    REQUEST_NOT_SET = 0,
  };

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  inline Request* New() const { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional .dcv.extensions.GetDcvInfoRequest get_dcv_info_request = 10;
  bool has_get_dcv_info_request() const;
  void clear_get_dcv_info_request();
  static const int kGetDcvInfoRequestFieldNumber = 10;
  const ::dcv::extensions::GetDcvInfoRequest& get_dcv_info_request() const;
  ::dcv::extensions::GetDcvInfoRequest* mutable_get_dcv_info_request();
  ::dcv::extensions::GetDcvInfoRequest* release_get_dcv_info_request();
  void set_allocated_get_dcv_info_request(::dcv::extensions::GetDcvInfoRequest* get_dcv_info_request);

  // optional .dcv.extensions.GetManifestRequest get_manifest_request = 11;
  bool has_get_manifest_request() const;
  void clear_get_manifest_request();
  static const int kGetManifestRequestFieldNumber = 11;
  const ::dcv::extensions::GetManifestRequest& get_manifest_request() const;
  ::dcv::extensions::GetManifestRequest* mutable_get_manifest_request();
  ::dcv::extensions::GetManifestRequest* release_get_manifest_request();
  void set_allocated_get_manifest_request(::dcv::extensions::GetManifestRequest* get_manifest_request);

  // optional .dcv.extensions.SetupVirtualChannelRequest setup_virtual_channel_request = 20;
  bool has_setup_virtual_channel_request() const;
  void clear_setup_virtual_channel_request();
  static const int kSetupVirtualChannelRequestFieldNumber = 20;
  const ::dcv::extensions::SetupVirtualChannelRequest& setup_virtual_channel_request() const;
  ::dcv::extensions::SetupVirtualChannelRequest* mutable_setup_virtual_channel_request();
  ::dcv::extensions::SetupVirtualChannelRequest* release_setup_virtual_channel_request();
  void set_allocated_setup_virtual_channel_request(::dcv::extensions::SetupVirtualChannelRequest* setup_virtual_channel_request);

  // optional .dcv.extensions.CloseVirtualChannelRequest close_virtual_channel_request = 21;
  bool has_close_virtual_channel_request() const;
  void clear_close_virtual_channel_request();
  static const int kCloseVirtualChannelRequestFieldNumber = 21;
  const ::dcv::extensions::CloseVirtualChannelRequest& close_virtual_channel_request() const;
  ::dcv::extensions::CloseVirtualChannelRequest* mutable_close_virtual_channel_request();
  ::dcv::extensions::CloseVirtualChannelRequest* release_close_virtual_channel_request();
  void set_allocated_close_virtual_channel_request(::dcv::extensions::CloseVirtualChannelRequest* close_virtual_channel_request);

  // optional .dcv.extensions.SetCursorPointRequest set_cursor_point_request = 30;
  bool has_set_cursor_point_request() const;
  void clear_set_cursor_point_request();
  static const int kSetCursorPointRequestFieldNumber = 30;
  const ::dcv::extensions::SetCursorPointRequest& set_cursor_point_request() const;
  ::dcv::extensions::SetCursorPointRequest* mutable_set_cursor_point_request();
  ::dcv::extensions::SetCursorPointRequest* release_set_cursor_point_request();
  void set_allocated_set_cursor_point_request(::dcv::extensions::SetCursorPointRequest* set_cursor_point_request);

  // optional .dcv.extensions.GetStreamingViewsRequest get_streaming_views_request = 31;
  bool has_get_streaming_views_request() const;
  void clear_get_streaming_views_request();
  static const int kGetStreamingViewsRequestFieldNumber = 31;
  const ::dcv::extensions::GetStreamingViewsRequest& get_streaming_views_request() const;
  ::dcv::extensions::GetStreamingViewsRequest* mutable_get_streaming_views_request();
  ::dcv::extensions::GetStreamingViewsRequest* release_get_streaming_views_request();
  void set_allocated_get_streaming_views_request(::dcv::extensions::GetStreamingViewsRequest* get_streaming_views_request);

  // optional .dcv.extensions.IsPointInsideStreamingViewsRequest is_point_inside_streaming_views_request = 32;
  bool has_is_point_inside_streaming_views_request() const;
  void clear_is_point_inside_streaming_views_request();
  static const int kIsPointInsideStreamingViewsRequestFieldNumber = 32;
  const ::dcv::extensions::IsPointInsideStreamingViewsRequest& is_point_inside_streaming_views_request() const;
  ::dcv::extensions::IsPointInsideStreamingViewsRequest* mutable_is_point_inside_streaming_views_request();
  ::dcv::extensions::IsPointInsideStreamingViewsRequest* release_is_point_inside_streaming_views_request();
  void set_allocated_is_point_inside_streaming_views_request(::dcv::extensions::IsPointInsideStreamingViewsRequest* is_point_inside_streaming_views_request);

  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:dcv.extensions.Request)
 private:
  inline void set_has_get_dcv_info_request();
  inline void set_has_get_manifest_request();
  inline void set_has_setup_virtual_channel_request();
  inline void set_has_close_virtual_channel_request();
  inline void set_has_set_cursor_point_request();
  inline void set_has_get_streaming_views_request();
  inline void set_has_is_point_inside_streaming_views_request();

  inline bool has_request() const;
  void clear_request();
  inline void clear_has_request();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  union RequestUnion {
    RequestUnion() {}
    ::dcv::extensions::GetDcvInfoRequest* get_dcv_info_request_;
    ::dcv::extensions::GetManifestRequest* get_manifest_request_;
    ::dcv::extensions::SetupVirtualChannelRequest* setup_virtual_channel_request_;
    ::dcv::extensions::CloseVirtualChannelRequest* close_virtual_channel_request_;
    ::dcv::extensions::SetCursorPointRequest* set_cursor_point_request_;
    ::dcv::extensions::GetStreamingViewsRequest* get_streaming_views_request_;
    ::dcv::extensions::IsPointInsideStreamingViewsRequest* is_point_inside_streaming_views_request_;
  } request_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  enum ResponseCase {
    kGetDcvInfoResponse = 10,
    kGetManifestResponse = 11,
    kSetupVirtualChannelResponse = 20,
    kCloseVirtualChannelResponse = 21,
    kSetCursorPointResponse = 30,
    kGetStreamingViewsResponse = 31,
    kIsPointInsideStreamingViewsResponse = 32,
    RESPONSE_NOT_SET = 0,
  };

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  inline Response* New() const { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Response_Status Status;
  static const Status NONE =
    Response_Status_NONE;
  static const Status SUCCESS =
    Response_Status_SUCCESS;
  static const Status ERROR_GENERIC =
    Response_Status_ERROR_GENERIC;
  static const Status ERROR_ACCESS_DENIED =
    Response_Status_ERROR_ACCESS_DENIED;
  static const Status ERROR_NOT_IMPLEMENTED =
    Response_Status_ERROR_NOT_IMPLEMENTED;
  static const Status ERROR_INVALID_PARAMETER =
    Response_Status_ERROR_INVALID_PARAMETER;
  static const Status ERROR_INVALID_VIRTUAL_CHANNEL_NAMESPACE_IN_MANIFEST =
    Response_Status_ERROR_INVALID_VIRTUAL_CHANNEL_NAMESPACE_IN_MANIFEST;
  static const Status ERROR_TOO_MANY_VIRTUAL_CHANNELS =
    Response_Status_ERROR_TOO_MANY_VIRTUAL_CHANNELS;
  static inline bool Status_IsValid(int value) {
    return Response_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Response_Status_Status_MIN;
  static const Status Status_MAX =
    Response_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Response_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return Response_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return Response_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return Response_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string request_id = 1;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  const ::std::string& request_id() const;
  void set_request_id(const ::std::string& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  ::std::string* mutable_request_id();
  ::std::string* release_request_id();
  void set_allocated_request_id(::std::string* request_id);

  // optional .dcv.extensions.Response.Status status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::dcv::extensions::Response_Status status() const;
  void set_status(::dcv::extensions::Response_Status value);

  // optional .dcv.extensions.GetDcvInfoResponse get_dcv_info_response = 10;
  bool has_get_dcv_info_response() const;
  void clear_get_dcv_info_response();
  static const int kGetDcvInfoResponseFieldNumber = 10;
  const ::dcv::extensions::GetDcvInfoResponse& get_dcv_info_response() const;
  ::dcv::extensions::GetDcvInfoResponse* mutable_get_dcv_info_response();
  ::dcv::extensions::GetDcvInfoResponse* release_get_dcv_info_response();
  void set_allocated_get_dcv_info_response(::dcv::extensions::GetDcvInfoResponse* get_dcv_info_response);

  // optional .dcv.extensions.GetManifestResponse get_manifest_response = 11;
  bool has_get_manifest_response() const;
  void clear_get_manifest_response();
  static const int kGetManifestResponseFieldNumber = 11;
  const ::dcv::extensions::GetManifestResponse& get_manifest_response() const;
  ::dcv::extensions::GetManifestResponse* mutable_get_manifest_response();
  ::dcv::extensions::GetManifestResponse* release_get_manifest_response();
  void set_allocated_get_manifest_response(::dcv::extensions::GetManifestResponse* get_manifest_response);

  // optional .dcv.extensions.SetupVirtualChannelResponse setup_virtual_channel_response = 20;
  bool has_setup_virtual_channel_response() const;
  void clear_setup_virtual_channel_response();
  static const int kSetupVirtualChannelResponseFieldNumber = 20;
  const ::dcv::extensions::SetupVirtualChannelResponse& setup_virtual_channel_response() const;
  ::dcv::extensions::SetupVirtualChannelResponse* mutable_setup_virtual_channel_response();
  ::dcv::extensions::SetupVirtualChannelResponse* release_setup_virtual_channel_response();
  void set_allocated_setup_virtual_channel_response(::dcv::extensions::SetupVirtualChannelResponse* setup_virtual_channel_response);

  // optional .dcv.extensions.CloseVirtualChannelResponse close_virtual_channel_response = 21;
  bool has_close_virtual_channel_response() const;
  void clear_close_virtual_channel_response();
  static const int kCloseVirtualChannelResponseFieldNumber = 21;
  const ::dcv::extensions::CloseVirtualChannelResponse& close_virtual_channel_response() const;
  ::dcv::extensions::CloseVirtualChannelResponse* mutable_close_virtual_channel_response();
  ::dcv::extensions::CloseVirtualChannelResponse* release_close_virtual_channel_response();
  void set_allocated_close_virtual_channel_response(::dcv::extensions::CloseVirtualChannelResponse* close_virtual_channel_response);

  // optional .dcv.extensions.SetCursorPointResponse set_cursor_point_response = 30;
  bool has_set_cursor_point_response() const;
  void clear_set_cursor_point_response();
  static const int kSetCursorPointResponseFieldNumber = 30;
  const ::dcv::extensions::SetCursorPointResponse& set_cursor_point_response() const;
  ::dcv::extensions::SetCursorPointResponse* mutable_set_cursor_point_response();
  ::dcv::extensions::SetCursorPointResponse* release_set_cursor_point_response();
  void set_allocated_set_cursor_point_response(::dcv::extensions::SetCursorPointResponse* set_cursor_point_response);

  // optional .dcv.extensions.GetStreamingViewsResponse get_streaming_views_response = 31;
  bool has_get_streaming_views_response() const;
  void clear_get_streaming_views_response();
  static const int kGetStreamingViewsResponseFieldNumber = 31;
  const ::dcv::extensions::GetStreamingViewsResponse& get_streaming_views_response() const;
  ::dcv::extensions::GetStreamingViewsResponse* mutable_get_streaming_views_response();
  ::dcv::extensions::GetStreamingViewsResponse* release_get_streaming_views_response();
  void set_allocated_get_streaming_views_response(::dcv::extensions::GetStreamingViewsResponse* get_streaming_views_response);

  // optional .dcv.extensions.IsPointInsideStreamingViewsResponse is_point_inside_streaming_views_response = 32;
  bool has_is_point_inside_streaming_views_response() const;
  void clear_is_point_inside_streaming_views_response();
  static const int kIsPointInsideStreamingViewsResponseFieldNumber = 32;
  const ::dcv::extensions::IsPointInsideStreamingViewsResponse& is_point_inside_streaming_views_response() const;
  ::dcv::extensions::IsPointInsideStreamingViewsResponse* mutable_is_point_inside_streaming_views_response();
  ::dcv::extensions::IsPointInsideStreamingViewsResponse* release_is_point_inside_streaming_views_response();
  void set_allocated_is_point_inside_streaming_views_response(::dcv::extensions::IsPointInsideStreamingViewsResponse* is_point_inside_streaming_views_response);

  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:dcv.extensions.Response)
 private:
  inline void set_has_get_dcv_info_response();
  inline void set_has_get_manifest_response();
  inline void set_has_setup_virtual_channel_response();
  inline void set_has_close_virtual_channel_response();
  inline void set_has_set_cursor_point_response();
  inline void set_has_get_streaming_views_response();
  inline void set_has_is_point_inside_streaming_views_response();

  inline bool has_response() const;
  void clear_response();
  inline void clear_has_response();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr request_id_;
  int status_;
  union ResponseUnion {
    ResponseUnion() {}
    ::dcv::extensions::GetDcvInfoResponse* get_dcv_info_response_;
    ::dcv::extensions::GetManifestResponse* get_manifest_response_;
    ::dcv::extensions::SetupVirtualChannelResponse* setup_virtual_channel_response_;
    ::dcv::extensions::CloseVirtualChannelResponse* close_virtual_channel_response_;
    ::dcv::extensions::SetCursorPointResponse* set_cursor_point_response_;
    ::dcv::extensions::GetStreamingViewsResponse* get_streaming_views_response_;
    ::dcv::extensions::IsPointInsideStreamingViewsResponse* is_point_inside_streaming_views_response_;
  } response_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  enum EventCase {
    kVirtualChannelReadyEvent = 10,
    kVirtualChannelClosedEvent = 20,
    kStreamingViewsChangedEvent = 30,
    EVENT_NOT_SET = 0,
  };

  void Swap(Event* other);

  // implements Message ----------------------------------------------

  inline Event* New() const { return New(NULL); }

  Event* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dcv.extensions.VirtualChannelReadyEvent virtual_channel_ready_event = 10;
  bool has_virtual_channel_ready_event() const;
  void clear_virtual_channel_ready_event();
  static const int kVirtualChannelReadyEventFieldNumber = 10;
  const ::dcv::extensions::VirtualChannelReadyEvent& virtual_channel_ready_event() const;
  ::dcv::extensions::VirtualChannelReadyEvent* mutable_virtual_channel_ready_event();
  ::dcv::extensions::VirtualChannelReadyEvent* release_virtual_channel_ready_event();
  void set_allocated_virtual_channel_ready_event(::dcv::extensions::VirtualChannelReadyEvent* virtual_channel_ready_event);

  // optional .dcv.extensions.VirtualChannelClosedEvent virtual_channel_closed_event = 20;
  bool has_virtual_channel_closed_event() const;
  void clear_virtual_channel_closed_event();
  static const int kVirtualChannelClosedEventFieldNumber = 20;
  const ::dcv::extensions::VirtualChannelClosedEvent& virtual_channel_closed_event() const;
  ::dcv::extensions::VirtualChannelClosedEvent* mutable_virtual_channel_closed_event();
  ::dcv::extensions::VirtualChannelClosedEvent* release_virtual_channel_closed_event();
  void set_allocated_virtual_channel_closed_event(::dcv::extensions::VirtualChannelClosedEvent* virtual_channel_closed_event);

  // optional .dcv.extensions.StreamingViewsChangedEvent streaming_views_changed_event = 30;
  bool has_streaming_views_changed_event() const;
  void clear_streaming_views_changed_event();
  static const int kStreamingViewsChangedEventFieldNumber = 30;
  const ::dcv::extensions::StreamingViewsChangedEvent& streaming_views_changed_event() const;
  ::dcv::extensions::StreamingViewsChangedEvent* mutable_streaming_views_changed_event();
  ::dcv::extensions::StreamingViewsChangedEvent* release_streaming_views_changed_event();
  void set_allocated_streaming_views_changed_event(::dcv::extensions::StreamingViewsChangedEvent* streaming_views_changed_event);

  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:dcv.extensions.Event)
 private:
  inline void set_has_virtual_channel_ready_event();
  inline void set_has_virtual_channel_closed_event();
  inline void set_has_streaming_views_changed_event();

  inline bool has_event() const;
  void clear_event();
  inline void clear_has_event();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union EventUnion {
    EventUnion() {}
    ::dcv::extensions::VirtualChannelReadyEvent* virtual_channel_ready_event_;
    ::dcv::extensions::VirtualChannelClosedEvent* virtual_channel_closed_event_;
    ::dcv::extensions::StreamingViewsChangedEvent* streaming_views_changed_event_;
  } event_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static Event* default_instance_;
};
// -------------------------------------------------------------------

class ExtensionMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.ExtensionMessage) */ {
 public:
  ExtensionMessage();
  virtual ~ExtensionMessage();

  ExtensionMessage(const ExtensionMessage& from);

  inline ExtensionMessage& operator=(const ExtensionMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtensionMessage& default_instance();

  enum MsgCase {
    kRequest = 1,
    MSG_NOT_SET = 0,
  };

  void Swap(ExtensionMessage* other);

  // implements Message ----------------------------------------------

  inline ExtensionMessage* New() const { return New(NULL); }

  ExtensionMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExtensionMessage& from);
  void MergeFrom(const ExtensionMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExtensionMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dcv.extensions.Request request = 1;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  const ::dcv::extensions::Request& request() const;
  ::dcv::extensions::Request* mutable_request();
  ::dcv::extensions::Request* release_request();
  void set_allocated_request(::dcv::extensions::Request* request);

  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:dcv.extensions.ExtensionMessage)
 private:
  inline void set_has_request();

  inline bool has_msg() const;
  void clear_msg();
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union MsgUnion {
    MsgUnion() {}
    ::dcv::extensions::Request* request_;
  } msg_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static ExtensionMessage* default_instance_;
};
// -------------------------------------------------------------------

class DcvMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.DcvMessage) */ {
 public:
  DcvMessage();
  virtual ~DcvMessage();

  DcvMessage(const DcvMessage& from);

  inline DcvMessage& operator=(const DcvMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DcvMessage& default_instance();

  enum MsgCase {
    kResponse = 2,
    kEvent = 3,
    MSG_NOT_SET = 0,
  };

  void Swap(DcvMessage* other);

  // implements Message ----------------------------------------------

  inline DcvMessage* New() const { return New(NULL); }

  DcvMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DcvMessage& from);
  void MergeFrom(const DcvMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DcvMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dcv.extensions.Response response = 2;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  const ::dcv::extensions::Response& response() const;
  ::dcv::extensions::Response* mutable_response();
  ::dcv::extensions::Response* release_response();
  void set_allocated_response(::dcv::extensions::Response* response);

  // optional .dcv.extensions.Event event = 3;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 3;
  const ::dcv::extensions::Event& event() const;
  ::dcv::extensions::Event* mutable_event();
  ::dcv::extensions::Event* release_event();
  void set_allocated_event(::dcv::extensions::Event* event);

  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:dcv.extensions.DcvMessage)
 private:
  inline void set_has_response();
  inline void set_has_event();

  inline bool has_msg() const;
  void clear_msg();
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union MsgUnion {
    MsgUnion() {}
    ::dcv::extensions::Response* response_;
    ::dcv::extensions::Event* event_;
  } msg_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_extensions_2eproto();
  friend void protobuf_AssignDesc_extensions_2eproto();
  friend void protobuf_ShutdownFile_extensions_2eproto();

  void InitAsDefaultInstance();
  static DcvMessage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SoftwareInfo_VersionNumber

// optional uint32 major = 1;
inline void SoftwareInfo_VersionNumber::clear_major() {
  major_ = 0u;
}
inline ::google::protobuf::uint32 SoftwareInfo_VersionNumber::major() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.VersionNumber.major)
  return major_;
}
inline void SoftwareInfo_VersionNumber::set_major(::google::protobuf::uint32 value) {
  
  major_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.VersionNumber.major)
}

// optional uint32 minor = 2;
inline void SoftwareInfo_VersionNumber::clear_minor() {
  minor_ = 0u;
}
inline ::google::protobuf::uint32 SoftwareInfo_VersionNumber::minor() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.VersionNumber.minor)
  return minor_;
}
inline void SoftwareInfo_VersionNumber::set_minor(::google::protobuf::uint32 value) {
  
  minor_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.VersionNumber.minor)
}

// optional uint32 revision = 3;
inline void SoftwareInfo_VersionNumber::clear_revision() {
  revision_ = 0u;
}
inline ::google::protobuf::uint32 SoftwareInfo_VersionNumber::revision() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.VersionNumber.revision)
  return revision_;
}
inline void SoftwareInfo_VersionNumber::set_revision(::google::protobuf::uint32 value) {
  
  revision_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.VersionNumber.revision)
}

// -------------------------------------------------------------------

// SoftwareInfo

// optional string name = 1;
inline void SoftwareInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SoftwareInfo::name() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SoftwareInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.name)
}
inline void SoftwareInfo::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.SoftwareInfo.name)
}
inline void SoftwareInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.SoftwareInfo.name)
}
inline ::std::string* SoftwareInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SoftwareInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SoftwareInfo::release_name() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SoftwareInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SoftwareInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SoftwareInfo.name)
}

// optional .dcv.extensions.SoftwareInfo.VersionNumber version = 2;
inline bool SoftwareInfo::has_version() const {
  return !_is_default_instance_ && version_ != NULL;
}
inline void SoftwareInfo::clear_version() {
  if (GetArenaNoVirtual() == NULL && version_ != NULL) delete version_;
  version_ = NULL;
}
inline const ::dcv::extensions::SoftwareInfo_VersionNumber& SoftwareInfo::version() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.version)
  return version_ != NULL ? *version_ : *default_instance_->version_;
}
inline ::dcv::extensions::SoftwareInfo_VersionNumber* SoftwareInfo::mutable_version() {
  
  if (version_ == NULL) {
    version_ = new ::dcv::extensions::SoftwareInfo_VersionNumber;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SoftwareInfo.version)
  return version_;
}
inline ::dcv::extensions::SoftwareInfo_VersionNumber* SoftwareInfo::release_version() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SoftwareInfo.version)
  
  ::dcv::extensions::SoftwareInfo_VersionNumber* temp = version_;
  version_ = NULL;
  return temp;
}
inline void SoftwareInfo::set_allocated_version(::dcv::extensions::SoftwareInfo_VersionNumber* version) {
  delete version_;
  version_ = version;
  if (version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SoftwareInfo.version)
}

// optional string os = 3;
inline void SoftwareInfo::clear_os() {
  os_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SoftwareInfo::os() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.os)
  return os_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SoftwareInfo::set_os(const ::std::string& value) {
  
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.os)
}
inline void SoftwareInfo::set_os(const char* value) {
  
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.SoftwareInfo.os)
}
inline void SoftwareInfo::set_os(const char* value, size_t size) {
  
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.SoftwareInfo.os)
}
inline ::std::string* SoftwareInfo::mutable_os() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SoftwareInfo.os)
  return os_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SoftwareInfo::release_os() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SoftwareInfo.os)
  
  return os_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SoftwareInfo::set_allocated_os(::std::string* os) {
  if (os != NULL) {
    
  } else {
    
  }
  os_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SoftwareInfo.os)
}

// optional string arch = 4;
inline void SoftwareInfo::clear_arch() {
  arch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SoftwareInfo::arch() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.arch)
  return arch_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SoftwareInfo::set_arch(const ::std::string& value) {
  
  arch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.arch)
}
inline void SoftwareInfo::set_arch(const char* value) {
  
  arch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.SoftwareInfo.arch)
}
inline void SoftwareInfo::set_arch(const char* value, size_t size) {
  
  arch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.SoftwareInfo.arch)
}
inline ::std::string* SoftwareInfo::mutable_arch() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SoftwareInfo.arch)
  return arch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SoftwareInfo::release_arch() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SoftwareInfo.arch)
  
  return arch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SoftwareInfo::set_allocated_arch(::std::string* arch) {
  if (arch != NULL) {
    
  } else {
    
  }
  arch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arch);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SoftwareInfo.arch)
}

// optional string hostname = 5;
inline void SoftwareInfo::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SoftwareInfo::hostname() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.hostname)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SoftwareInfo::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.hostname)
}
inline void SoftwareInfo::set_hostname(const char* value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.SoftwareInfo.hostname)
}
inline void SoftwareInfo::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.SoftwareInfo.hostname)
}
inline ::std::string* SoftwareInfo::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SoftwareInfo.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SoftwareInfo::release_hostname() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SoftwareInfo.hostname)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SoftwareInfo::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SoftwareInfo.hostname)
}

// -------------------------------------------------------------------

// Point

// optional int32 x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Point::x() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Point.x)
  return x_;
}
inline void Point::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.Point.x)
}

// optional int32 y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Point::y() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Point.y)
  return y_;
}
inline void Point::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.Point.y)
}

// -------------------------------------------------------------------

// Rect

// optional int32 x = 1;
inline void Rect::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Rect::x() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Rect.x)
  return x_;
}
inline void Rect::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.Rect.x)
}

// optional int32 y = 2;
inline void Rect::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Rect::y() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Rect.y)
  return y_;
}
inline void Rect::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.Rect.y)
}

// optional uint32 width = 3;
inline void Rect::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 Rect::width() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Rect.width)
  return width_;
}
inline void Rect::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.Rect.width)
}

// optional uint32 height = 4;
inline void Rect::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 Rect::height() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Rect.height)
  return height_;
}
inline void Rect::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.Rect.height)
}

// -------------------------------------------------------------------

// StreamingViews_StreamingView

// optional int32 view_id = 1;
inline void StreamingViews_StreamingView::clear_view_id() {
  view_id_ = 0;
}
inline ::google::protobuf::int32 StreamingViews_StreamingView::view_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.StreamingViews.StreamingView.view_id)
  return view_id_;
}
inline void StreamingViews_StreamingView::set_view_id(::google::protobuf::int32 value) {
  
  view_id_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.StreamingViews.StreamingView.view_id)
}

// optional .dcv.extensions.Rect local_area = 2;
inline bool StreamingViews_StreamingView::has_local_area() const {
  return !_is_default_instance_ && local_area_ != NULL;
}
inline void StreamingViews_StreamingView::clear_local_area() {
  if (GetArenaNoVirtual() == NULL && local_area_ != NULL) delete local_area_;
  local_area_ = NULL;
}
inline const ::dcv::extensions::Rect& StreamingViews_StreamingView::local_area() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.StreamingViews.StreamingView.local_area)
  return local_area_ != NULL ? *local_area_ : *default_instance_->local_area_;
}
inline ::dcv::extensions::Rect* StreamingViews_StreamingView::mutable_local_area() {
  
  if (local_area_ == NULL) {
    local_area_ = new ::dcv::extensions::Rect;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.StreamingViews.StreamingView.local_area)
  return local_area_;
}
inline ::dcv::extensions::Rect* StreamingViews_StreamingView::release_local_area() {
  // @@protoc_insertion_point(field_release:dcv.extensions.StreamingViews.StreamingView.local_area)
  
  ::dcv::extensions::Rect* temp = local_area_;
  local_area_ = NULL;
  return temp;
}
inline void StreamingViews_StreamingView::set_allocated_local_area(::dcv::extensions::Rect* local_area) {
  delete local_area_;
  local_area_ = local_area;
  if (local_area) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.StreamingViews.StreamingView.local_area)
}

// optional double zoom_factor = 3;
inline void StreamingViews_StreamingView::clear_zoom_factor() {
  zoom_factor_ = 0;
}
inline double StreamingViews_StreamingView::zoom_factor() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.StreamingViews.StreamingView.zoom_factor)
  return zoom_factor_;
}
inline void StreamingViews_StreamingView::set_zoom_factor(double value) {
  
  zoom_factor_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.StreamingViews.StreamingView.zoom_factor)
}

// optional .dcv.extensions.Point remote_offset = 4;
inline bool StreamingViews_StreamingView::has_remote_offset() const {
  return !_is_default_instance_ && remote_offset_ != NULL;
}
inline void StreamingViews_StreamingView::clear_remote_offset() {
  if (GetArenaNoVirtual() == NULL && remote_offset_ != NULL) delete remote_offset_;
  remote_offset_ = NULL;
}
inline const ::dcv::extensions::Point& StreamingViews_StreamingView::remote_offset() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.StreamingViews.StreamingView.remote_offset)
  return remote_offset_ != NULL ? *remote_offset_ : *default_instance_->remote_offset_;
}
inline ::dcv::extensions::Point* StreamingViews_StreamingView::mutable_remote_offset() {
  
  if (remote_offset_ == NULL) {
    remote_offset_ = new ::dcv::extensions::Point;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.StreamingViews.StreamingView.remote_offset)
  return remote_offset_;
}
inline ::dcv::extensions::Point* StreamingViews_StreamingView::release_remote_offset() {
  // @@protoc_insertion_point(field_release:dcv.extensions.StreamingViews.StreamingView.remote_offset)
  
  ::dcv::extensions::Point* temp = remote_offset_;
  remote_offset_ = NULL;
  return temp;
}
inline void StreamingViews_StreamingView::set_allocated_remote_offset(::dcv::extensions::Point* remote_offset) {
  delete remote_offset_;
  remote_offset_ = remote_offset;
  if (remote_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.StreamingViews.StreamingView.remote_offset)
}

// -------------------------------------------------------------------

// StreamingViews

// repeated .dcv.extensions.StreamingViews.StreamingView streaming_view = 1;
inline int StreamingViews::streaming_view_size() const {
  return streaming_view_.size();
}
inline void StreamingViews::clear_streaming_view() {
  streaming_view_.Clear();
}
inline const ::dcv::extensions::StreamingViews_StreamingView& StreamingViews::streaming_view(int index) const {
  // @@protoc_insertion_point(field_get:dcv.extensions.StreamingViews.streaming_view)
  return streaming_view_.Get(index);
}
inline ::dcv::extensions::StreamingViews_StreamingView* StreamingViews::mutable_streaming_view(int index) {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.StreamingViews.streaming_view)
  return streaming_view_.Mutable(index);
}
inline ::dcv::extensions::StreamingViews_StreamingView* StreamingViews::add_streaming_view() {
  // @@protoc_insertion_point(field_add:dcv.extensions.StreamingViews.streaming_view)
  return streaming_view_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dcv::extensions::StreamingViews_StreamingView >*
StreamingViews::mutable_streaming_view() {
  // @@protoc_insertion_point(field_mutable_list:dcv.extensions.StreamingViews.streaming_view)
  return &streaming_view_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dcv::extensions::StreamingViews_StreamingView >&
StreamingViews::streaming_view() const {
  // @@protoc_insertion_point(field_list:dcv.extensions.StreamingViews.streaming_view)
  return streaming_view_;
}

// -------------------------------------------------------------------

// GetDcvInfoRequest

// -------------------------------------------------------------------

// GetManifestRequest

// -------------------------------------------------------------------

// SetupVirtualChannelRequest

// optional string virtual_channel_name = 1;
inline void SetupVirtualChannelRequest::clear_virtual_channel_name() {
  virtual_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetupVirtualChannelRequest::virtual_channel_name() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
  return virtual_channel_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetupVirtualChannelRequest::set_virtual_channel_name(const ::std::string& value) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
}
inline void SetupVirtualChannelRequest::set_virtual_channel_name(const char* value) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
}
inline void SetupVirtualChannelRequest::set_virtual_channel_name(const char* value, size_t size) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
}
inline ::std::string* SetupVirtualChannelRequest::mutable_virtual_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
  return virtual_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetupVirtualChannelRequest::release_virtual_channel_name() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
  
  return virtual_channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetupVirtualChannelRequest::set_allocated_virtual_channel_name(::std::string* virtual_channel_name) {
  if (virtual_channel_name != NULL) {
    
  } else {
    
  }
  virtual_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), virtual_channel_name);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
}

// optional int64 relay_client_process_id = 2;
inline void SetupVirtualChannelRequest::clear_relay_client_process_id() {
  relay_client_process_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SetupVirtualChannelRequest::relay_client_process_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetupVirtualChannelRequest.relay_client_process_id)
  return relay_client_process_id_;
}
inline void SetupVirtualChannelRequest::set_relay_client_process_id(::google::protobuf::int64 value) {
  
  relay_client_process_id_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.SetupVirtualChannelRequest.relay_client_process_id)
}

// -------------------------------------------------------------------

// CloseVirtualChannelRequest

// optional string virtual_channel_name = 1;
inline void CloseVirtualChannelRequest::clear_virtual_channel_name() {
  virtual_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloseVirtualChannelRequest::virtual_channel_name() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
  return virtual_channel_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloseVirtualChannelRequest::set_virtual_channel_name(const ::std::string& value) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
}
inline void CloseVirtualChannelRequest::set_virtual_channel_name(const char* value) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
}
inline void CloseVirtualChannelRequest::set_virtual_channel_name(const char* value, size_t size) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
}
inline ::std::string* CloseVirtualChannelRequest::mutable_virtual_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
  return virtual_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloseVirtualChannelRequest::release_virtual_channel_name() {
  // @@protoc_insertion_point(field_release:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
  
  return virtual_channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloseVirtualChannelRequest::set_allocated_virtual_channel_name(::std::string* virtual_channel_name) {
  if (virtual_channel_name != NULL) {
    
  } else {
    
  }
  virtual_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), virtual_channel_name);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
}

// -------------------------------------------------------------------

// SetCursorPointRequest

// optional .dcv.extensions.Point point = 1;
inline bool SetCursorPointRequest::has_point() const {
  return !_is_default_instance_ && point_ != NULL;
}
inline void SetCursorPointRequest::clear_point() {
  if (GetArenaNoVirtual() == NULL && point_ != NULL) delete point_;
  point_ = NULL;
}
inline const ::dcv::extensions::Point& SetCursorPointRequest::point() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetCursorPointRequest.point)
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
inline ::dcv::extensions::Point* SetCursorPointRequest::mutable_point() {
  
  if (point_ == NULL) {
    point_ = new ::dcv::extensions::Point;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SetCursorPointRequest.point)
  return point_;
}
inline ::dcv::extensions::Point* SetCursorPointRequest::release_point() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SetCursorPointRequest.point)
  
  ::dcv::extensions::Point* temp = point_;
  point_ = NULL;
  return temp;
}
inline void SetCursorPointRequest::set_allocated_point(::dcv::extensions::Point* point) {
  delete point_;
  point_ = point;
  if (point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SetCursorPointRequest.point)
}

// -------------------------------------------------------------------

// GetStreamingViewsRequest

// -------------------------------------------------------------------

// IsPointInsideStreamingViewsRequest

// optional .dcv.extensions.Point point = 1;
inline bool IsPointInsideStreamingViewsRequest::has_point() const {
  return !_is_default_instance_ && point_ != NULL;
}
inline void IsPointInsideStreamingViewsRequest::clear_point() {
  if (GetArenaNoVirtual() == NULL && point_ != NULL) delete point_;
  point_ = NULL;
}
inline const ::dcv::extensions::Point& IsPointInsideStreamingViewsRequest::point() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.IsPointInsideStreamingViewsRequest.point)
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
inline ::dcv::extensions::Point* IsPointInsideStreamingViewsRequest::mutable_point() {
  
  if (point_ == NULL) {
    point_ = new ::dcv::extensions::Point;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.IsPointInsideStreamingViewsRequest.point)
  return point_;
}
inline ::dcv::extensions::Point* IsPointInsideStreamingViewsRequest::release_point() {
  // @@protoc_insertion_point(field_release:dcv.extensions.IsPointInsideStreamingViewsRequest.point)
  
  ::dcv::extensions::Point* temp = point_;
  point_ = NULL;
  return temp;
}
inline void IsPointInsideStreamingViewsRequest::set_allocated_point(::dcv::extensions::Point* point) {
  delete point_;
  point_ = point;
  if (point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.IsPointInsideStreamingViewsRequest.point)
}

// -------------------------------------------------------------------

// GetDcvInfoResponse

// optional .dcv.extensions.GetDcvInfoResponse.DcvRole dcv_role = 1;
inline void GetDcvInfoResponse::clear_dcv_role() {
  dcv_role_ = 0;
}
inline ::dcv::extensions::GetDcvInfoResponse_DcvRole GetDcvInfoResponse::dcv_role() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.GetDcvInfoResponse.dcv_role)
  return static_cast< ::dcv::extensions::GetDcvInfoResponse_DcvRole >(dcv_role_);
}
inline void GetDcvInfoResponse::set_dcv_role(::dcv::extensions::GetDcvInfoResponse_DcvRole value) {
  
  dcv_role_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.GetDcvInfoResponse.dcv_role)
}

// optional int64 dcv_process_id = 2;
inline void GetDcvInfoResponse::clear_dcv_process_id() {
  dcv_process_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetDcvInfoResponse::dcv_process_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.GetDcvInfoResponse.dcv_process_id)
  return dcv_process_id_;
}
inline void GetDcvInfoResponse::set_dcv_process_id(::google::protobuf::int64 value) {
  
  dcv_process_id_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.GetDcvInfoResponse.dcv_process_id)
}

// optional .dcv.extensions.SoftwareInfo server_info = 3;
inline bool GetDcvInfoResponse::has_server_info() const {
  return !_is_default_instance_ && server_info_ != NULL;
}
inline void GetDcvInfoResponse::clear_server_info() {
  if (GetArenaNoVirtual() == NULL && server_info_ != NULL) delete server_info_;
  server_info_ = NULL;
}
inline const ::dcv::extensions::SoftwareInfo& GetDcvInfoResponse::server_info() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.GetDcvInfoResponse.server_info)
  return server_info_ != NULL ? *server_info_ : *default_instance_->server_info_;
}
inline ::dcv::extensions::SoftwareInfo* GetDcvInfoResponse::mutable_server_info() {
  
  if (server_info_ == NULL) {
    server_info_ = new ::dcv::extensions::SoftwareInfo;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.GetDcvInfoResponse.server_info)
  return server_info_;
}
inline ::dcv::extensions::SoftwareInfo* GetDcvInfoResponse::release_server_info() {
  // @@protoc_insertion_point(field_release:dcv.extensions.GetDcvInfoResponse.server_info)
  
  ::dcv::extensions::SoftwareInfo* temp = server_info_;
  server_info_ = NULL;
  return temp;
}
inline void GetDcvInfoResponse::set_allocated_server_info(::dcv::extensions::SoftwareInfo* server_info) {
  delete server_info_;
  server_info_ = server_info;
  if (server_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.GetDcvInfoResponse.server_info)
}

// optional .dcv.extensions.SoftwareInfo client_info = 4;
inline bool GetDcvInfoResponse::has_client_info() const {
  return !_is_default_instance_ && client_info_ != NULL;
}
inline void GetDcvInfoResponse::clear_client_info() {
  if (GetArenaNoVirtual() == NULL && client_info_ != NULL) delete client_info_;
  client_info_ = NULL;
}
inline const ::dcv::extensions::SoftwareInfo& GetDcvInfoResponse::client_info() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.GetDcvInfoResponse.client_info)
  return client_info_ != NULL ? *client_info_ : *default_instance_->client_info_;
}
inline ::dcv::extensions::SoftwareInfo* GetDcvInfoResponse::mutable_client_info() {
  
  if (client_info_ == NULL) {
    client_info_ = new ::dcv::extensions::SoftwareInfo;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.GetDcvInfoResponse.client_info)
  return client_info_;
}
inline ::dcv::extensions::SoftwareInfo* GetDcvInfoResponse::release_client_info() {
  // @@protoc_insertion_point(field_release:dcv.extensions.GetDcvInfoResponse.client_info)
  
  ::dcv::extensions::SoftwareInfo* temp = client_info_;
  client_info_ = NULL;
  return temp;
}
inline void GetDcvInfoResponse::set_allocated_client_info(::dcv::extensions::SoftwareInfo* client_info) {
  delete client_info_;
  client_info_ = client_info;
  if (client_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.GetDcvInfoResponse.client_info)
}

// -------------------------------------------------------------------

// GetManifestResponse

// optional string manifest_path = 1;
inline void GetManifestResponse::clear_manifest_path() {
  manifest_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetManifestResponse::manifest_path() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.GetManifestResponse.manifest_path)
  return manifest_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetManifestResponse::set_manifest_path(const ::std::string& value) {
  
  manifest_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.GetManifestResponse.manifest_path)
}
inline void GetManifestResponse::set_manifest_path(const char* value) {
  
  manifest_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.GetManifestResponse.manifest_path)
}
inline void GetManifestResponse::set_manifest_path(const char* value, size_t size) {
  
  manifest_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.GetManifestResponse.manifest_path)
}
inline ::std::string* GetManifestResponse::mutable_manifest_path() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.GetManifestResponse.manifest_path)
  return manifest_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetManifestResponse::release_manifest_path() {
  // @@protoc_insertion_point(field_release:dcv.extensions.GetManifestResponse.manifest_path)
  
  return manifest_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetManifestResponse::set_allocated_manifest_path(::std::string* manifest_path) {
  if (manifest_path != NULL) {
    
  } else {
    
  }
  manifest_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manifest_path);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.GetManifestResponse.manifest_path)
}

// -------------------------------------------------------------------

// SetupVirtualChannelResponse

// optional string virtual_channel_name = 1;
inline void SetupVirtualChannelResponse::clear_virtual_channel_name() {
  virtual_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetupVirtualChannelResponse::virtual_channel_name() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
  return virtual_channel_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetupVirtualChannelResponse::set_virtual_channel_name(const ::std::string& value) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
}
inline void SetupVirtualChannelResponse::set_virtual_channel_name(const char* value) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
}
inline void SetupVirtualChannelResponse::set_virtual_channel_name(const char* value, size_t size) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
}
inline ::std::string* SetupVirtualChannelResponse::mutable_virtual_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
  return virtual_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetupVirtualChannelResponse::release_virtual_channel_name() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
  
  return virtual_channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetupVirtualChannelResponse::set_allocated_virtual_channel_name(::std::string* virtual_channel_name) {
  if (virtual_channel_name != NULL) {
    
  } else {
    
  }
  virtual_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), virtual_channel_name);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
}

// optional string relay_path = 2;
inline void SetupVirtualChannelResponse::clear_relay_path() {
  relay_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetupVirtualChannelResponse::relay_path() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetupVirtualChannelResponse.relay_path)
  return relay_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetupVirtualChannelResponse::set_relay_path(const ::std::string& value) {
  
  relay_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SetupVirtualChannelResponse.relay_path)
}
inline void SetupVirtualChannelResponse::set_relay_path(const char* value) {
  
  relay_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.SetupVirtualChannelResponse.relay_path)
}
inline void SetupVirtualChannelResponse::set_relay_path(const char* value, size_t size) {
  
  relay_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.SetupVirtualChannelResponse.relay_path)
}
inline ::std::string* SetupVirtualChannelResponse::mutable_relay_path() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SetupVirtualChannelResponse.relay_path)
  return relay_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetupVirtualChannelResponse::release_relay_path() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SetupVirtualChannelResponse.relay_path)
  
  return relay_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetupVirtualChannelResponse::set_allocated_relay_path(::std::string* relay_path) {
  if (relay_path != NULL) {
    
  } else {
    
  }
  relay_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), relay_path);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SetupVirtualChannelResponse.relay_path)
}

// optional int64 relay_server_process_id = 3;
inline void SetupVirtualChannelResponse::clear_relay_server_process_id() {
  relay_server_process_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SetupVirtualChannelResponse::relay_server_process_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetupVirtualChannelResponse.relay_server_process_id)
  return relay_server_process_id_;
}
inline void SetupVirtualChannelResponse::set_relay_server_process_id(::google::protobuf::int64 value) {
  
  relay_server_process_id_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.SetupVirtualChannelResponse.relay_server_process_id)
}

// optional bytes virtual_channel_auth_token = 4;
inline void SetupVirtualChannelResponse::clear_virtual_channel_auth_token() {
  virtual_channel_auth_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetupVirtualChannelResponse::virtual_channel_auth_token() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
  return virtual_channel_auth_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetupVirtualChannelResponse::set_virtual_channel_auth_token(const ::std::string& value) {
  
  virtual_channel_auth_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
}
inline void SetupVirtualChannelResponse::set_virtual_channel_auth_token(const char* value) {
  
  virtual_channel_auth_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
}
inline void SetupVirtualChannelResponse::set_virtual_channel_auth_token(const void* value, size_t size) {
  
  virtual_channel_auth_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
}
inline ::std::string* SetupVirtualChannelResponse::mutable_virtual_channel_auth_token() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
  return virtual_channel_auth_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetupVirtualChannelResponse::release_virtual_channel_auth_token() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
  
  return virtual_channel_auth_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetupVirtualChannelResponse::set_allocated_virtual_channel_auth_token(::std::string* virtual_channel_auth_token) {
  if (virtual_channel_auth_token != NULL) {
    
  } else {
    
  }
  virtual_channel_auth_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), virtual_channel_auth_token);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
}

// -------------------------------------------------------------------

// CloseVirtualChannelResponse

// optional string virtual_channel_name = 1;
inline void CloseVirtualChannelResponse::clear_virtual_channel_name() {
  virtual_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloseVirtualChannelResponse::virtual_channel_name() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
  return virtual_channel_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloseVirtualChannelResponse::set_virtual_channel_name(const ::std::string& value) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
}
inline void CloseVirtualChannelResponse::set_virtual_channel_name(const char* value) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
}
inline void CloseVirtualChannelResponse::set_virtual_channel_name(const char* value, size_t size) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
}
inline ::std::string* CloseVirtualChannelResponse::mutable_virtual_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
  return virtual_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloseVirtualChannelResponse::release_virtual_channel_name() {
  // @@protoc_insertion_point(field_release:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
  
  return virtual_channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloseVirtualChannelResponse::set_allocated_virtual_channel_name(::std::string* virtual_channel_name) {
  if (virtual_channel_name != NULL) {
    
  } else {
    
  }
  virtual_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), virtual_channel_name);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
}

// -------------------------------------------------------------------

// SetCursorPointResponse

// -------------------------------------------------------------------

// GetStreamingViewsResponse

// optional .dcv.extensions.StreamingViews streaming_views = 1;
inline bool GetStreamingViewsResponse::has_streaming_views() const {
  return !_is_default_instance_ && streaming_views_ != NULL;
}
inline void GetStreamingViewsResponse::clear_streaming_views() {
  if (GetArenaNoVirtual() == NULL && streaming_views_ != NULL) delete streaming_views_;
  streaming_views_ = NULL;
}
inline const ::dcv::extensions::StreamingViews& GetStreamingViewsResponse::streaming_views() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.GetStreamingViewsResponse.streaming_views)
  return streaming_views_ != NULL ? *streaming_views_ : *default_instance_->streaming_views_;
}
inline ::dcv::extensions::StreamingViews* GetStreamingViewsResponse::mutable_streaming_views() {
  
  if (streaming_views_ == NULL) {
    streaming_views_ = new ::dcv::extensions::StreamingViews;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.GetStreamingViewsResponse.streaming_views)
  return streaming_views_;
}
inline ::dcv::extensions::StreamingViews* GetStreamingViewsResponse::release_streaming_views() {
  // @@protoc_insertion_point(field_release:dcv.extensions.GetStreamingViewsResponse.streaming_views)
  
  ::dcv::extensions::StreamingViews* temp = streaming_views_;
  streaming_views_ = NULL;
  return temp;
}
inline void GetStreamingViewsResponse::set_allocated_streaming_views(::dcv::extensions::StreamingViews* streaming_views) {
  delete streaming_views_;
  streaming_views_ = streaming_views;
  if (streaming_views) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.GetStreamingViewsResponse.streaming_views)
}

// -------------------------------------------------------------------

// IsPointInsideStreamingViewsResponse

// optional int32 view_id = 1;
inline void IsPointInsideStreamingViewsResponse::clear_view_id() {
  view_id_ = 0;
}
inline ::google::protobuf::int32 IsPointInsideStreamingViewsResponse::view_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.IsPointInsideStreamingViewsResponse.view_id)
  return view_id_;
}
inline void IsPointInsideStreamingViewsResponse::set_view_id(::google::protobuf::int32 value) {
  
  view_id_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.IsPointInsideStreamingViewsResponse.view_id)
}

// -------------------------------------------------------------------

// VirtualChannelReadyEvent

// optional string virtual_channel_name = 1;
inline void VirtualChannelReadyEvent::clear_virtual_channel_name() {
  virtual_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VirtualChannelReadyEvent::virtual_channel_name() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
  return virtual_channel_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VirtualChannelReadyEvent::set_virtual_channel_name(const ::std::string& value) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
}
inline void VirtualChannelReadyEvent::set_virtual_channel_name(const char* value) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
}
inline void VirtualChannelReadyEvent::set_virtual_channel_name(const char* value, size_t size) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
}
inline ::std::string* VirtualChannelReadyEvent::mutable_virtual_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
  return virtual_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VirtualChannelReadyEvent::release_virtual_channel_name() {
  // @@protoc_insertion_point(field_release:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
  
  return virtual_channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VirtualChannelReadyEvent::set_allocated_virtual_channel_name(::std::string* virtual_channel_name) {
  if (virtual_channel_name != NULL) {
    
  } else {
    
  }
  virtual_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), virtual_channel_name);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
}

// -------------------------------------------------------------------

// VirtualChannelClosedEvent

// optional string virtual_channel_name = 1;
inline void VirtualChannelClosedEvent::clear_virtual_channel_name() {
  virtual_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VirtualChannelClosedEvent::virtual_channel_name() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
  return virtual_channel_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VirtualChannelClosedEvent::set_virtual_channel_name(const ::std::string& value) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
}
inline void VirtualChannelClosedEvent::set_virtual_channel_name(const char* value) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
}
inline void VirtualChannelClosedEvent::set_virtual_channel_name(const char* value, size_t size) {
  
  virtual_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
}
inline ::std::string* VirtualChannelClosedEvent::mutable_virtual_channel_name() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
  return virtual_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VirtualChannelClosedEvent::release_virtual_channel_name() {
  // @@protoc_insertion_point(field_release:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
  
  return virtual_channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VirtualChannelClosedEvent::set_allocated_virtual_channel_name(::std::string* virtual_channel_name) {
  if (virtual_channel_name != NULL) {
    
  } else {
    
  }
  virtual_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), virtual_channel_name);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
}

// -------------------------------------------------------------------

// StreamingViewsChangedEvent

// optional .dcv.extensions.StreamingViews streaming_views = 1;
inline bool StreamingViewsChangedEvent::has_streaming_views() const {
  return !_is_default_instance_ && streaming_views_ != NULL;
}
inline void StreamingViewsChangedEvent::clear_streaming_views() {
  if (GetArenaNoVirtual() == NULL && streaming_views_ != NULL) delete streaming_views_;
  streaming_views_ = NULL;
}
inline const ::dcv::extensions::StreamingViews& StreamingViewsChangedEvent::streaming_views() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.StreamingViewsChangedEvent.streaming_views)
  return streaming_views_ != NULL ? *streaming_views_ : *default_instance_->streaming_views_;
}
inline ::dcv::extensions::StreamingViews* StreamingViewsChangedEvent::mutable_streaming_views() {
  
  if (streaming_views_ == NULL) {
    streaming_views_ = new ::dcv::extensions::StreamingViews;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.StreamingViewsChangedEvent.streaming_views)
  return streaming_views_;
}
inline ::dcv::extensions::StreamingViews* StreamingViewsChangedEvent::release_streaming_views() {
  // @@protoc_insertion_point(field_release:dcv.extensions.StreamingViewsChangedEvent.streaming_views)
  
  ::dcv::extensions::StreamingViews* temp = streaming_views_;
  streaming_views_ = NULL;
  return temp;
}
inline void StreamingViewsChangedEvent::set_allocated_streaming_views(::dcv::extensions::StreamingViews* streaming_views) {
  delete streaming_views_;
  streaming_views_ = streaming_views;
  if (streaming_views) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.StreamingViewsChangedEvent.streaming_views)
}

// -------------------------------------------------------------------

// Request

// optional string request_id = 1;
inline void Request::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::request_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.Request.request_id)
}
inline void Request::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.Request.request_id)
}
inline void Request::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.Request.request_id)
}
inline ::std::string* Request::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_request_id() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.request_id)
}

// optional .dcv.extensions.GetDcvInfoRequest get_dcv_info_request = 10;
inline bool Request::has_get_dcv_info_request() const {
  return request_case() == kGetDcvInfoRequest;
}
inline void Request::set_has_get_dcv_info_request() {
  _oneof_case_[0] = kGetDcvInfoRequest;
}
inline void Request::clear_get_dcv_info_request() {
  if (has_get_dcv_info_request()) {
    delete request_.get_dcv_info_request_;
    clear_has_request();
  }
}
inline  const ::dcv::extensions::GetDcvInfoRequest& Request::get_dcv_info_request() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.get_dcv_info_request)
  return has_get_dcv_info_request()
      ? *request_.get_dcv_info_request_
      : ::dcv::extensions::GetDcvInfoRequest::default_instance();
}
inline ::dcv::extensions::GetDcvInfoRequest* Request::mutable_get_dcv_info_request() {
  if (!has_get_dcv_info_request()) {
    clear_request();
    set_has_get_dcv_info_request();
    request_.get_dcv_info_request_ = new ::dcv::extensions::GetDcvInfoRequest;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.get_dcv_info_request)
  return request_.get_dcv_info_request_;
}
inline ::dcv::extensions::GetDcvInfoRequest* Request::release_get_dcv_info_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.get_dcv_info_request)
  if (has_get_dcv_info_request()) {
    clear_has_request();
    ::dcv::extensions::GetDcvInfoRequest* temp = request_.get_dcv_info_request_;
    request_.get_dcv_info_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_get_dcv_info_request(::dcv::extensions::GetDcvInfoRequest* get_dcv_info_request) {
  clear_request();
  if (get_dcv_info_request) {
    set_has_get_dcv_info_request();
    request_.get_dcv_info_request_ = get_dcv_info_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.get_dcv_info_request)
}

// optional .dcv.extensions.GetManifestRequest get_manifest_request = 11;
inline bool Request::has_get_manifest_request() const {
  return request_case() == kGetManifestRequest;
}
inline void Request::set_has_get_manifest_request() {
  _oneof_case_[0] = kGetManifestRequest;
}
inline void Request::clear_get_manifest_request() {
  if (has_get_manifest_request()) {
    delete request_.get_manifest_request_;
    clear_has_request();
  }
}
inline  const ::dcv::extensions::GetManifestRequest& Request::get_manifest_request() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.get_manifest_request)
  return has_get_manifest_request()
      ? *request_.get_manifest_request_
      : ::dcv::extensions::GetManifestRequest::default_instance();
}
inline ::dcv::extensions::GetManifestRequest* Request::mutable_get_manifest_request() {
  if (!has_get_manifest_request()) {
    clear_request();
    set_has_get_manifest_request();
    request_.get_manifest_request_ = new ::dcv::extensions::GetManifestRequest;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.get_manifest_request)
  return request_.get_manifest_request_;
}
inline ::dcv::extensions::GetManifestRequest* Request::release_get_manifest_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.get_manifest_request)
  if (has_get_manifest_request()) {
    clear_has_request();
    ::dcv::extensions::GetManifestRequest* temp = request_.get_manifest_request_;
    request_.get_manifest_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_get_manifest_request(::dcv::extensions::GetManifestRequest* get_manifest_request) {
  clear_request();
  if (get_manifest_request) {
    set_has_get_manifest_request();
    request_.get_manifest_request_ = get_manifest_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.get_manifest_request)
}

// optional .dcv.extensions.SetupVirtualChannelRequest setup_virtual_channel_request = 20;
inline bool Request::has_setup_virtual_channel_request() const {
  return request_case() == kSetupVirtualChannelRequest;
}
inline void Request::set_has_setup_virtual_channel_request() {
  _oneof_case_[0] = kSetupVirtualChannelRequest;
}
inline void Request::clear_setup_virtual_channel_request() {
  if (has_setup_virtual_channel_request()) {
    delete request_.setup_virtual_channel_request_;
    clear_has_request();
  }
}
inline  const ::dcv::extensions::SetupVirtualChannelRequest& Request::setup_virtual_channel_request() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.setup_virtual_channel_request)
  return has_setup_virtual_channel_request()
      ? *request_.setup_virtual_channel_request_
      : ::dcv::extensions::SetupVirtualChannelRequest::default_instance();
}
inline ::dcv::extensions::SetupVirtualChannelRequest* Request::mutable_setup_virtual_channel_request() {
  if (!has_setup_virtual_channel_request()) {
    clear_request();
    set_has_setup_virtual_channel_request();
    request_.setup_virtual_channel_request_ = new ::dcv::extensions::SetupVirtualChannelRequest;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.setup_virtual_channel_request)
  return request_.setup_virtual_channel_request_;
}
inline ::dcv::extensions::SetupVirtualChannelRequest* Request::release_setup_virtual_channel_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.setup_virtual_channel_request)
  if (has_setup_virtual_channel_request()) {
    clear_has_request();
    ::dcv::extensions::SetupVirtualChannelRequest* temp = request_.setup_virtual_channel_request_;
    request_.setup_virtual_channel_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_setup_virtual_channel_request(::dcv::extensions::SetupVirtualChannelRequest* setup_virtual_channel_request) {
  clear_request();
  if (setup_virtual_channel_request) {
    set_has_setup_virtual_channel_request();
    request_.setup_virtual_channel_request_ = setup_virtual_channel_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.setup_virtual_channel_request)
}

// optional .dcv.extensions.CloseVirtualChannelRequest close_virtual_channel_request = 21;
inline bool Request::has_close_virtual_channel_request() const {
  return request_case() == kCloseVirtualChannelRequest;
}
inline void Request::set_has_close_virtual_channel_request() {
  _oneof_case_[0] = kCloseVirtualChannelRequest;
}
inline void Request::clear_close_virtual_channel_request() {
  if (has_close_virtual_channel_request()) {
    delete request_.close_virtual_channel_request_;
    clear_has_request();
  }
}
inline  const ::dcv::extensions::CloseVirtualChannelRequest& Request::close_virtual_channel_request() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.close_virtual_channel_request)
  return has_close_virtual_channel_request()
      ? *request_.close_virtual_channel_request_
      : ::dcv::extensions::CloseVirtualChannelRequest::default_instance();
}
inline ::dcv::extensions::CloseVirtualChannelRequest* Request::mutable_close_virtual_channel_request() {
  if (!has_close_virtual_channel_request()) {
    clear_request();
    set_has_close_virtual_channel_request();
    request_.close_virtual_channel_request_ = new ::dcv::extensions::CloseVirtualChannelRequest;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.close_virtual_channel_request)
  return request_.close_virtual_channel_request_;
}
inline ::dcv::extensions::CloseVirtualChannelRequest* Request::release_close_virtual_channel_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.close_virtual_channel_request)
  if (has_close_virtual_channel_request()) {
    clear_has_request();
    ::dcv::extensions::CloseVirtualChannelRequest* temp = request_.close_virtual_channel_request_;
    request_.close_virtual_channel_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_close_virtual_channel_request(::dcv::extensions::CloseVirtualChannelRequest* close_virtual_channel_request) {
  clear_request();
  if (close_virtual_channel_request) {
    set_has_close_virtual_channel_request();
    request_.close_virtual_channel_request_ = close_virtual_channel_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.close_virtual_channel_request)
}

// optional .dcv.extensions.SetCursorPointRequest set_cursor_point_request = 30;
inline bool Request::has_set_cursor_point_request() const {
  return request_case() == kSetCursorPointRequest;
}
inline void Request::set_has_set_cursor_point_request() {
  _oneof_case_[0] = kSetCursorPointRequest;
}
inline void Request::clear_set_cursor_point_request() {
  if (has_set_cursor_point_request()) {
    delete request_.set_cursor_point_request_;
    clear_has_request();
  }
}
inline  const ::dcv::extensions::SetCursorPointRequest& Request::set_cursor_point_request() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.set_cursor_point_request)
  return has_set_cursor_point_request()
      ? *request_.set_cursor_point_request_
      : ::dcv::extensions::SetCursorPointRequest::default_instance();
}
inline ::dcv::extensions::SetCursorPointRequest* Request::mutable_set_cursor_point_request() {
  if (!has_set_cursor_point_request()) {
    clear_request();
    set_has_set_cursor_point_request();
    request_.set_cursor_point_request_ = new ::dcv::extensions::SetCursorPointRequest;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.set_cursor_point_request)
  return request_.set_cursor_point_request_;
}
inline ::dcv::extensions::SetCursorPointRequest* Request::release_set_cursor_point_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.set_cursor_point_request)
  if (has_set_cursor_point_request()) {
    clear_has_request();
    ::dcv::extensions::SetCursorPointRequest* temp = request_.set_cursor_point_request_;
    request_.set_cursor_point_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_set_cursor_point_request(::dcv::extensions::SetCursorPointRequest* set_cursor_point_request) {
  clear_request();
  if (set_cursor_point_request) {
    set_has_set_cursor_point_request();
    request_.set_cursor_point_request_ = set_cursor_point_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.set_cursor_point_request)
}

// optional .dcv.extensions.GetStreamingViewsRequest get_streaming_views_request = 31;
inline bool Request::has_get_streaming_views_request() const {
  return request_case() == kGetStreamingViewsRequest;
}
inline void Request::set_has_get_streaming_views_request() {
  _oneof_case_[0] = kGetStreamingViewsRequest;
}
inline void Request::clear_get_streaming_views_request() {
  if (has_get_streaming_views_request()) {
    delete request_.get_streaming_views_request_;
    clear_has_request();
  }
}
inline  const ::dcv::extensions::GetStreamingViewsRequest& Request::get_streaming_views_request() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.get_streaming_views_request)
  return has_get_streaming_views_request()
      ? *request_.get_streaming_views_request_
      : ::dcv::extensions::GetStreamingViewsRequest::default_instance();
}
inline ::dcv::extensions::GetStreamingViewsRequest* Request::mutable_get_streaming_views_request() {
  if (!has_get_streaming_views_request()) {
    clear_request();
    set_has_get_streaming_views_request();
    request_.get_streaming_views_request_ = new ::dcv::extensions::GetStreamingViewsRequest;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.get_streaming_views_request)
  return request_.get_streaming_views_request_;
}
inline ::dcv::extensions::GetStreamingViewsRequest* Request::release_get_streaming_views_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.get_streaming_views_request)
  if (has_get_streaming_views_request()) {
    clear_has_request();
    ::dcv::extensions::GetStreamingViewsRequest* temp = request_.get_streaming_views_request_;
    request_.get_streaming_views_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_get_streaming_views_request(::dcv::extensions::GetStreamingViewsRequest* get_streaming_views_request) {
  clear_request();
  if (get_streaming_views_request) {
    set_has_get_streaming_views_request();
    request_.get_streaming_views_request_ = get_streaming_views_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.get_streaming_views_request)
}

// optional .dcv.extensions.IsPointInsideStreamingViewsRequest is_point_inside_streaming_views_request = 32;
inline bool Request::has_is_point_inside_streaming_views_request() const {
  return request_case() == kIsPointInsideStreamingViewsRequest;
}
inline void Request::set_has_is_point_inside_streaming_views_request() {
  _oneof_case_[0] = kIsPointInsideStreamingViewsRequest;
}
inline void Request::clear_is_point_inside_streaming_views_request() {
  if (has_is_point_inside_streaming_views_request()) {
    delete request_.is_point_inside_streaming_views_request_;
    clear_has_request();
  }
}
inline  const ::dcv::extensions::IsPointInsideStreamingViewsRequest& Request::is_point_inside_streaming_views_request() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.is_point_inside_streaming_views_request)
  return has_is_point_inside_streaming_views_request()
      ? *request_.is_point_inside_streaming_views_request_
      : ::dcv::extensions::IsPointInsideStreamingViewsRequest::default_instance();
}
inline ::dcv::extensions::IsPointInsideStreamingViewsRequest* Request::mutable_is_point_inside_streaming_views_request() {
  if (!has_is_point_inside_streaming_views_request()) {
    clear_request();
    set_has_is_point_inside_streaming_views_request();
    request_.is_point_inside_streaming_views_request_ = new ::dcv::extensions::IsPointInsideStreamingViewsRequest;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.is_point_inside_streaming_views_request)
  return request_.is_point_inside_streaming_views_request_;
}
inline ::dcv::extensions::IsPointInsideStreamingViewsRequest* Request::release_is_point_inside_streaming_views_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.is_point_inside_streaming_views_request)
  if (has_is_point_inside_streaming_views_request()) {
    clear_has_request();
    ::dcv::extensions::IsPointInsideStreamingViewsRequest* temp = request_.is_point_inside_streaming_views_request_;
    request_.is_point_inside_streaming_views_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_is_point_inside_streaming_views_request(::dcv::extensions::IsPointInsideStreamingViewsRequest* is_point_inside_streaming_views_request) {
  clear_request();
  if (is_point_inside_streaming_views_request) {
    set_has_is_point_inside_streaming_views_request();
    request_.is_point_inside_streaming_views_request_ = is_point_inside_streaming_views_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.is_point_inside_streaming_views_request)
}

inline bool Request::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void Request::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline Request::RequestCase Request::request_case() const {
  return Request::RequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Response

// optional string request_id = 1;
inline void Response::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::request_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.request_id)
  return request_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_request_id(const ::std::string& value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dcv.extensions.Response.request_id)
}
inline void Response::set_request_id(const char* value) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dcv.extensions.Response.request_id)
}
inline void Response::set_request_id(const char* value, size_t size) {
  
  request_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.Response.request_id)
}
inline ::std::string* Response::mutable_request_id() {
  
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.request_id)
  return request_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_request_id() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.request_id)
  
  return request_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_request_id(::std::string* request_id) {
  if (request_id != NULL) {
    
  } else {
    
  }
  request_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.request_id)
}

// optional .dcv.extensions.Response.Status status = 2;
inline void Response::clear_status() {
  status_ = 0;
}
inline ::dcv::extensions::Response_Status Response::status() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.status)
  return static_cast< ::dcv::extensions::Response_Status >(status_);
}
inline void Response::set_status(::dcv::extensions::Response_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:dcv.extensions.Response.status)
}

// optional .dcv.extensions.GetDcvInfoResponse get_dcv_info_response = 10;
inline bool Response::has_get_dcv_info_response() const {
  return response_case() == kGetDcvInfoResponse;
}
inline void Response::set_has_get_dcv_info_response() {
  _oneof_case_[0] = kGetDcvInfoResponse;
}
inline void Response::clear_get_dcv_info_response() {
  if (has_get_dcv_info_response()) {
    delete response_.get_dcv_info_response_;
    clear_has_response();
  }
}
inline  const ::dcv::extensions::GetDcvInfoResponse& Response::get_dcv_info_response() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.get_dcv_info_response)
  return has_get_dcv_info_response()
      ? *response_.get_dcv_info_response_
      : ::dcv::extensions::GetDcvInfoResponse::default_instance();
}
inline ::dcv::extensions::GetDcvInfoResponse* Response::mutable_get_dcv_info_response() {
  if (!has_get_dcv_info_response()) {
    clear_response();
    set_has_get_dcv_info_response();
    response_.get_dcv_info_response_ = new ::dcv::extensions::GetDcvInfoResponse;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.get_dcv_info_response)
  return response_.get_dcv_info_response_;
}
inline ::dcv::extensions::GetDcvInfoResponse* Response::release_get_dcv_info_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.get_dcv_info_response)
  if (has_get_dcv_info_response()) {
    clear_has_response();
    ::dcv::extensions::GetDcvInfoResponse* temp = response_.get_dcv_info_response_;
    response_.get_dcv_info_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Response::set_allocated_get_dcv_info_response(::dcv::extensions::GetDcvInfoResponse* get_dcv_info_response) {
  clear_response();
  if (get_dcv_info_response) {
    set_has_get_dcv_info_response();
    response_.get_dcv_info_response_ = get_dcv_info_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.get_dcv_info_response)
}

// optional .dcv.extensions.GetManifestResponse get_manifest_response = 11;
inline bool Response::has_get_manifest_response() const {
  return response_case() == kGetManifestResponse;
}
inline void Response::set_has_get_manifest_response() {
  _oneof_case_[0] = kGetManifestResponse;
}
inline void Response::clear_get_manifest_response() {
  if (has_get_manifest_response()) {
    delete response_.get_manifest_response_;
    clear_has_response();
  }
}
inline  const ::dcv::extensions::GetManifestResponse& Response::get_manifest_response() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.get_manifest_response)
  return has_get_manifest_response()
      ? *response_.get_manifest_response_
      : ::dcv::extensions::GetManifestResponse::default_instance();
}
inline ::dcv::extensions::GetManifestResponse* Response::mutable_get_manifest_response() {
  if (!has_get_manifest_response()) {
    clear_response();
    set_has_get_manifest_response();
    response_.get_manifest_response_ = new ::dcv::extensions::GetManifestResponse;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.get_manifest_response)
  return response_.get_manifest_response_;
}
inline ::dcv::extensions::GetManifestResponse* Response::release_get_manifest_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.get_manifest_response)
  if (has_get_manifest_response()) {
    clear_has_response();
    ::dcv::extensions::GetManifestResponse* temp = response_.get_manifest_response_;
    response_.get_manifest_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Response::set_allocated_get_manifest_response(::dcv::extensions::GetManifestResponse* get_manifest_response) {
  clear_response();
  if (get_manifest_response) {
    set_has_get_manifest_response();
    response_.get_manifest_response_ = get_manifest_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.get_manifest_response)
}

// optional .dcv.extensions.SetupVirtualChannelResponse setup_virtual_channel_response = 20;
inline bool Response::has_setup_virtual_channel_response() const {
  return response_case() == kSetupVirtualChannelResponse;
}
inline void Response::set_has_setup_virtual_channel_response() {
  _oneof_case_[0] = kSetupVirtualChannelResponse;
}
inline void Response::clear_setup_virtual_channel_response() {
  if (has_setup_virtual_channel_response()) {
    delete response_.setup_virtual_channel_response_;
    clear_has_response();
  }
}
inline  const ::dcv::extensions::SetupVirtualChannelResponse& Response::setup_virtual_channel_response() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.setup_virtual_channel_response)
  return has_setup_virtual_channel_response()
      ? *response_.setup_virtual_channel_response_
      : ::dcv::extensions::SetupVirtualChannelResponse::default_instance();
}
inline ::dcv::extensions::SetupVirtualChannelResponse* Response::mutable_setup_virtual_channel_response() {
  if (!has_setup_virtual_channel_response()) {
    clear_response();
    set_has_setup_virtual_channel_response();
    response_.setup_virtual_channel_response_ = new ::dcv::extensions::SetupVirtualChannelResponse;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.setup_virtual_channel_response)
  return response_.setup_virtual_channel_response_;
}
inline ::dcv::extensions::SetupVirtualChannelResponse* Response::release_setup_virtual_channel_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.setup_virtual_channel_response)
  if (has_setup_virtual_channel_response()) {
    clear_has_response();
    ::dcv::extensions::SetupVirtualChannelResponse* temp = response_.setup_virtual_channel_response_;
    response_.setup_virtual_channel_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Response::set_allocated_setup_virtual_channel_response(::dcv::extensions::SetupVirtualChannelResponse* setup_virtual_channel_response) {
  clear_response();
  if (setup_virtual_channel_response) {
    set_has_setup_virtual_channel_response();
    response_.setup_virtual_channel_response_ = setup_virtual_channel_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.setup_virtual_channel_response)
}

// optional .dcv.extensions.CloseVirtualChannelResponse close_virtual_channel_response = 21;
inline bool Response::has_close_virtual_channel_response() const {
  return response_case() == kCloseVirtualChannelResponse;
}
inline void Response::set_has_close_virtual_channel_response() {
  _oneof_case_[0] = kCloseVirtualChannelResponse;
}
inline void Response::clear_close_virtual_channel_response() {
  if (has_close_virtual_channel_response()) {
    delete response_.close_virtual_channel_response_;
    clear_has_response();
  }
}
inline  const ::dcv::extensions::CloseVirtualChannelResponse& Response::close_virtual_channel_response() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.close_virtual_channel_response)
  return has_close_virtual_channel_response()
      ? *response_.close_virtual_channel_response_
      : ::dcv::extensions::CloseVirtualChannelResponse::default_instance();
}
inline ::dcv::extensions::CloseVirtualChannelResponse* Response::mutable_close_virtual_channel_response() {
  if (!has_close_virtual_channel_response()) {
    clear_response();
    set_has_close_virtual_channel_response();
    response_.close_virtual_channel_response_ = new ::dcv::extensions::CloseVirtualChannelResponse;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.close_virtual_channel_response)
  return response_.close_virtual_channel_response_;
}
inline ::dcv::extensions::CloseVirtualChannelResponse* Response::release_close_virtual_channel_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.close_virtual_channel_response)
  if (has_close_virtual_channel_response()) {
    clear_has_response();
    ::dcv::extensions::CloseVirtualChannelResponse* temp = response_.close_virtual_channel_response_;
    response_.close_virtual_channel_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Response::set_allocated_close_virtual_channel_response(::dcv::extensions::CloseVirtualChannelResponse* close_virtual_channel_response) {
  clear_response();
  if (close_virtual_channel_response) {
    set_has_close_virtual_channel_response();
    response_.close_virtual_channel_response_ = close_virtual_channel_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.close_virtual_channel_response)
}

// optional .dcv.extensions.SetCursorPointResponse set_cursor_point_response = 30;
inline bool Response::has_set_cursor_point_response() const {
  return response_case() == kSetCursorPointResponse;
}
inline void Response::set_has_set_cursor_point_response() {
  _oneof_case_[0] = kSetCursorPointResponse;
}
inline void Response::clear_set_cursor_point_response() {
  if (has_set_cursor_point_response()) {
    delete response_.set_cursor_point_response_;
    clear_has_response();
  }
}
inline  const ::dcv::extensions::SetCursorPointResponse& Response::set_cursor_point_response() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.set_cursor_point_response)
  return has_set_cursor_point_response()
      ? *response_.set_cursor_point_response_
      : ::dcv::extensions::SetCursorPointResponse::default_instance();
}
inline ::dcv::extensions::SetCursorPointResponse* Response::mutable_set_cursor_point_response() {
  if (!has_set_cursor_point_response()) {
    clear_response();
    set_has_set_cursor_point_response();
    response_.set_cursor_point_response_ = new ::dcv::extensions::SetCursorPointResponse;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.set_cursor_point_response)
  return response_.set_cursor_point_response_;
}
inline ::dcv::extensions::SetCursorPointResponse* Response::release_set_cursor_point_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.set_cursor_point_response)
  if (has_set_cursor_point_response()) {
    clear_has_response();
    ::dcv::extensions::SetCursorPointResponse* temp = response_.set_cursor_point_response_;
    response_.set_cursor_point_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Response::set_allocated_set_cursor_point_response(::dcv::extensions::SetCursorPointResponse* set_cursor_point_response) {
  clear_response();
  if (set_cursor_point_response) {
    set_has_set_cursor_point_response();
    response_.set_cursor_point_response_ = set_cursor_point_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.set_cursor_point_response)
}

// optional .dcv.extensions.GetStreamingViewsResponse get_streaming_views_response = 31;
inline bool Response::has_get_streaming_views_response() const {
  return response_case() == kGetStreamingViewsResponse;
}
inline void Response::set_has_get_streaming_views_response() {
  _oneof_case_[0] = kGetStreamingViewsResponse;
}
inline void Response::clear_get_streaming_views_response() {
  if (has_get_streaming_views_response()) {
    delete response_.get_streaming_views_response_;
    clear_has_response();
  }
}
inline  const ::dcv::extensions::GetStreamingViewsResponse& Response::get_streaming_views_response() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.get_streaming_views_response)
  return has_get_streaming_views_response()
      ? *response_.get_streaming_views_response_
      : ::dcv::extensions::GetStreamingViewsResponse::default_instance();
}
inline ::dcv::extensions::GetStreamingViewsResponse* Response::mutable_get_streaming_views_response() {
  if (!has_get_streaming_views_response()) {
    clear_response();
    set_has_get_streaming_views_response();
    response_.get_streaming_views_response_ = new ::dcv::extensions::GetStreamingViewsResponse;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.get_streaming_views_response)
  return response_.get_streaming_views_response_;
}
inline ::dcv::extensions::GetStreamingViewsResponse* Response::release_get_streaming_views_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.get_streaming_views_response)
  if (has_get_streaming_views_response()) {
    clear_has_response();
    ::dcv::extensions::GetStreamingViewsResponse* temp = response_.get_streaming_views_response_;
    response_.get_streaming_views_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Response::set_allocated_get_streaming_views_response(::dcv::extensions::GetStreamingViewsResponse* get_streaming_views_response) {
  clear_response();
  if (get_streaming_views_response) {
    set_has_get_streaming_views_response();
    response_.get_streaming_views_response_ = get_streaming_views_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.get_streaming_views_response)
}

// optional .dcv.extensions.IsPointInsideStreamingViewsResponse is_point_inside_streaming_views_response = 32;
inline bool Response::has_is_point_inside_streaming_views_response() const {
  return response_case() == kIsPointInsideStreamingViewsResponse;
}
inline void Response::set_has_is_point_inside_streaming_views_response() {
  _oneof_case_[0] = kIsPointInsideStreamingViewsResponse;
}
inline void Response::clear_is_point_inside_streaming_views_response() {
  if (has_is_point_inside_streaming_views_response()) {
    delete response_.is_point_inside_streaming_views_response_;
    clear_has_response();
  }
}
inline  const ::dcv::extensions::IsPointInsideStreamingViewsResponse& Response::is_point_inside_streaming_views_response() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.is_point_inside_streaming_views_response)
  return has_is_point_inside_streaming_views_response()
      ? *response_.is_point_inside_streaming_views_response_
      : ::dcv::extensions::IsPointInsideStreamingViewsResponse::default_instance();
}
inline ::dcv::extensions::IsPointInsideStreamingViewsResponse* Response::mutable_is_point_inside_streaming_views_response() {
  if (!has_is_point_inside_streaming_views_response()) {
    clear_response();
    set_has_is_point_inside_streaming_views_response();
    response_.is_point_inside_streaming_views_response_ = new ::dcv::extensions::IsPointInsideStreamingViewsResponse;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.is_point_inside_streaming_views_response)
  return response_.is_point_inside_streaming_views_response_;
}
inline ::dcv::extensions::IsPointInsideStreamingViewsResponse* Response::release_is_point_inside_streaming_views_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.is_point_inside_streaming_views_response)
  if (has_is_point_inside_streaming_views_response()) {
    clear_has_response();
    ::dcv::extensions::IsPointInsideStreamingViewsResponse* temp = response_.is_point_inside_streaming_views_response_;
    response_.is_point_inside_streaming_views_response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Response::set_allocated_is_point_inside_streaming_views_response(::dcv::extensions::IsPointInsideStreamingViewsResponse* is_point_inside_streaming_views_response) {
  clear_response();
  if (is_point_inside_streaming_views_response) {
    set_has_is_point_inside_streaming_views_response();
    response_.is_point_inside_streaming_views_response_ = is_point_inside_streaming_views_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.is_point_inside_streaming_views_response)
}

inline bool Response::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void Response::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline Response::ResponseCase Response::response_case() const {
  return Response::ResponseCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Event

// optional .dcv.extensions.VirtualChannelReadyEvent virtual_channel_ready_event = 10;
inline bool Event::has_virtual_channel_ready_event() const {
  return event_case() == kVirtualChannelReadyEvent;
}
inline void Event::set_has_virtual_channel_ready_event() {
  _oneof_case_[0] = kVirtualChannelReadyEvent;
}
inline void Event::clear_virtual_channel_ready_event() {
  if (has_virtual_channel_ready_event()) {
    delete event_.virtual_channel_ready_event_;
    clear_has_event();
  }
}
inline  const ::dcv::extensions::VirtualChannelReadyEvent& Event::virtual_channel_ready_event() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Event.virtual_channel_ready_event)
  return has_virtual_channel_ready_event()
      ? *event_.virtual_channel_ready_event_
      : ::dcv::extensions::VirtualChannelReadyEvent::default_instance();
}
inline ::dcv::extensions::VirtualChannelReadyEvent* Event::mutable_virtual_channel_ready_event() {
  if (!has_virtual_channel_ready_event()) {
    clear_event();
    set_has_virtual_channel_ready_event();
    event_.virtual_channel_ready_event_ = new ::dcv::extensions::VirtualChannelReadyEvent;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Event.virtual_channel_ready_event)
  return event_.virtual_channel_ready_event_;
}
inline ::dcv::extensions::VirtualChannelReadyEvent* Event::release_virtual_channel_ready_event() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Event.virtual_channel_ready_event)
  if (has_virtual_channel_ready_event()) {
    clear_has_event();
    ::dcv::extensions::VirtualChannelReadyEvent* temp = event_.virtual_channel_ready_event_;
    event_.virtual_channel_ready_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Event::set_allocated_virtual_channel_ready_event(::dcv::extensions::VirtualChannelReadyEvent* virtual_channel_ready_event) {
  clear_event();
  if (virtual_channel_ready_event) {
    set_has_virtual_channel_ready_event();
    event_.virtual_channel_ready_event_ = virtual_channel_ready_event;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Event.virtual_channel_ready_event)
}

// optional .dcv.extensions.VirtualChannelClosedEvent virtual_channel_closed_event = 20;
inline bool Event::has_virtual_channel_closed_event() const {
  return event_case() == kVirtualChannelClosedEvent;
}
inline void Event::set_has_virtual_channel_closed_event() {
  _oneof_case_[0] = kVirtualChannelClosedEvent;
}
inline void Event::clear_virtual_channel_closed_event() {
  if (has_virtual_channel_closed_event()) {
    delete event_.virtual_channel_closed_event_;
    clear_has_event();
  }
}
inline  const ::dcv::extensions::VirtualChannelClosedEvent& Event::virtual_channel_closed_event() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Event.virtual_channel_closed_event)
  return has_virtual_channel_closed_event()
      ? *event_.virtual_channel_closed_event_
      : ::dcv::extensions::VirtualChannelClosedEvent::default_instance();
}
inline ::dcv::extensions::VirtualChannelClosedEvent* Event::mutable_virtual_channel_closed_event() {
  if (!has_virtual_channel_closed_event()) {
    clear_event();
    set_has_virtual_channel_closed_event();
    event_.virtual_channel_closed_event_ = new ::dcv::extensions::VirtualChannelClosedEvent;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Event.virtual_channel_closed_event)
  return event_.virtual_channel_closed_event_;
}
inline ::dcv::extensions::VirtualChannelClosedEvent* Event::release_virtual_channel_closed_event() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Event.virtual_channel_closed_event)
  if (has_virtual_channel_closed_event()) {
    clear_has_event();
    ::dcv::extensions::VirtualChannelClosedEvent* temp = event_.virtual_channel_closed_event_;
    event_.virtual_channel_closed_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Event::set_allocated_virtual_channel_closed_event(::dcv::extensions::VirtualChannelClosedEvent* virtual_channel_closed_event) {
  clear_event();
  if (virtual_channel_closed_event) {
    set_has_virtual_channel_closed_event();
    event_.virtual_channel_closed_event_ = virtual_channel_closed_event;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Event.virtual_channel_closed_event)
}

// optional .dcv.extensions.StreamingViewsChangedEvent streaming_views_changed_event = 30;
inline bool Event::has_streaming_views_changed_event() const {
  return event_case() == kStreamingViewsChangedEvent;
}
inline void Event::set_has_streaming_views_changed_event() {
  _oneof_case_[0] = kStreamingViewsChangedEvent;
}
inline void Event::clear_streaming_views_changed_event() {
  if (has_streaming_views_changed_event()) {
    delete event_.streaming_views_changed_event_;
    clear_has_event();
  }
}
inline  const ::dcv::extensions::StreamingViewsChangedEvent& Event::streaming_views_changed_event() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Event.streaming_views_changed_event)
  return has_streaming_views_changed_event()
      ? *event_.streaming_views_changed_event_
      : ::dcv::extensions::StreamingViewsChangedEvent::default_instance();
}
inline ::dcv::extensions::StreamingViewsChangedEvent* Event::mutable_streaming_views_changed_event() {
  if (!has_streaming_views_changed_event()) {
    clear_event();
    set_has_streaming_views_changed_event();
    event_.streaming_views_changed_event_ = new ::dcv::extensions::StreamingViewsChangedEvent;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Event.streaming_views_changed_event)
  return event_.streaming_views_changed_event_;
}
inline ::dcv::extensions::StreamingViewsChangedEvent* Event::release_streaming_views_changed_event() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Event.streaming_views_changed_event)
  if (has_streaming_views_changed_event()) {
    clear_has_event();
    ::dcv::extensions::StreamingViewsChangedEvent* temp = event_.streaming_views_changed_event_;
    event_.streaming_views_changed_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Event::set_allocated_streaming_views_changed_event(::dcv::extensions::StreamingViewsChangedEvent* streaming_views_changed_event) {
  clear_event();
  if (streaming_views_changed_event) {
    set_has_streaming_views_changed_event();
    event_.streaming_views_changed_event_ = streaming_views_changed_event;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Event.streaming_views_changed_event)
}

inline bool Event::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void Event::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline Event::EventCase Event::event_case() const {
  return Event::EventCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExtensionMessage

// optional .dcv.extensions.Request request = 1;
inline bool ExtensionMessage::has_request() const {
  return msg_case() == kRequest;
}
inline void ExtensionMessage::set_has_request() {
  _oneof_case_[0] = kRequest;
}
inline void ExtensionMessage::clear_request() {
  if (has_request()) {
    delete msg_.request_;
    clear_has_msg();
  }
}
inline  const ::dcv::extensions::Request& ExtensionMessage::request() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.ExtensionMessage.request)
  return has_request()
      ? *msg_.request_
      : ::dcv::extensions::Request::default_instance();
}
inline ::dcv::extensions::Request* ExtensionMessage::mutable_request() {
  if (!has_request()) {
    clear_msg();
    set_has_request();
    msg_.request_ = new ::dcv::extensions::Request;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.ExtensionMessage.request)
  return msg_.request_;
}
inline ::dcv::extensions::Request* ExtensionMessage::release_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.ExtensionMessage.request)
  if (has_request()) {
    clear_has_msg();
    ::dcv::extensions::Request* temp = msg_.request_;
    msg_.request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ExtensionMessage::set_allocated_request(::dcv::extensions::Request* request) {
  clear_msg();
  if (request) {
    set_has_request();
    msg_.request_ = request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.ExtensionMessage.request)
}

inline bool ExtensionMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void ExtensionMessage::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline ExtensionMessage::MsgCase ExtensionMessage::msg_case() const {
  return ExtensionMessage::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DcvMessage

// optional .dcv.extensions.Response response = 2;
inline bool DcvMessage::has_response() const {
  return msg_case() == kResponse;
}
inline void DcvMessage::set_has_response() {
  _oneof_case_[0] = kResponse;
}
inline void DcvMessage::clear_response() {
  if (has_response()) {
    delete msg_.response_;
    clear_has_msg();
  }
}
inline  const ::dcv::extensions::Response& DcvMessage::response() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.DcvMessage.response)
  return has_response()
      ? *msg_.response_
      : ::dcv::extensions::Response::default_instance();
}
inline ::dcv::extensions::Response* DcvMessage::mutable_response() {
  if (!has_response()) {
    clear_msg();
    set_has_response();
    msg_.response_ = new ::dcv::extensions::Response;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.DcvMessage.response)
  return msg_.response_;
}
inline ::dcv::extensions::Response* DcvMessage::release_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.DcvMessage.response)
  if (has_response()) {
    clear_has_msg();
    ::dcv::extensions::Response* temp = msg_.response_;
    msg_.response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DcvMessage::set_allocated_response(::dcv::extensions::Response* response) {
  clear_msg();
  if (response) {
    set_has_response();
    msg_.response_ = response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.DcvMessage.response)
}

// optional .dcv.extensions.Event event = 3;
inline bool DcvMessage::has_event() const {
  return msg_case() == kEvent;
}
inline void DcvMessage::set_has_event() {
  _oneof_case_[0] = kEvent;
}
inline void DcvMessage::clear_event() {
  if (has_event()) {
    delete msg_.event_;
    clear_has_msg();
  }
}
inline  const ::dcv::extensions::Event& DcvMessage::event() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.DcvMessage.event)
  return has_event()
      ? *msg_.event_
      : ::dcv::extensions::Event::default_instance();
}
inline ::dcv::extensions::Event* DcvMessage::mutable_event() {
  if (!has_event()) {
    clear_msg();
    set_has_event();
    msg_.event_ = new ::dcv::extensions::Event;
  }
  // @@protoc_insertion_point(field_mutable:dcv.extensions.DcvMessage.event)
  return msg_.event_;
}
inline ::dcv::extensions::Event* DcvMessage::release_event() {
  // @@protoc_insertion_point(field_release:dcv.extensions.DcvMessage.event)
  if (has_event()) {
    clear_has_msg();
    ::dcv::extensions::Event* temp = msg_.event_;
    msg_.event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void DcvMessage::set_allocated_event(::dcv::extensions::Event* event) {
  clear_msg();
  if (event) {
    set_has_event();
    msg_.event_ = event;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.DcvMessage.event)
}

inline bool DcvMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void DcvMessage::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline DcvMessage::MsgCase DcvMessage::msg_case() const {
  return DcvMessage::MsgCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace extensions
}  // namespace dcv

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dcv::extensions::GetDcvInfoResponse_DcvRole> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dcv::extensions::GetDcvInfoResponse_DcvRole>() {
  return ::dcv::extensions::GetDcvInfoResponse_DcvRole_descriptor();
}
template <> struct is_proto_enum< ::dcv::extensions::Response_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dcv::extensions::Response_Status>() {
  return ::dcv::extensions::Response_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_extensions_2eproto__INCLUDED
