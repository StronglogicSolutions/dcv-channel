// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: extensions.proto

#include "extensions.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace dcv {
namespace extensions {

inline constexpr VirtualChannelReadyEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : virtual_channel_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VirtualChannelReadyEvent::VirtualChannelReadyEvent(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VirtualChannelReadyEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VirtualChannelReadyEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VirtualChannelReadyEventDefaultTypeInternal() {}
  union {
    VirtualChannelReadyEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VirtualChannelReadyEventDefaultTypeInternal _VirtualChannelReadyEvent_default_instance_;

inline constexpr VirtualChannelClosedEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : virtual_channel_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VirtualChannelClosedEvent::VirtualChannelClosedEvent(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VirtualChannelClosedEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VirtualChannelClosedEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VirtualChannelClosedEventDefaultTypeInternal() {}
  union {
    VirtualChannelClosedEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VirtualChannelClosedEventDefaultTypeInternal _VirtualChannelClosedEvent_default_instance_;

inline constexpr SoftwareInfo_VersionNumber::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : major_{0u},
        minor_{0u},
        revision_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SoftwareInfo_VersionNumber::SoftwareInfo_VersionNumber(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SoftwareInfo_VersionNumberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SoftwareInfo_VersionNumberDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SoftwareInfo_VersionNumberDefaultTypeInternal() {}
  union {
    SoftwareInfo_VersionNumber _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SoftwareInfo_VersionNumberDefaultTypeInternal _SoftwareInfo_VersionNumber_default_instance_;

inline constexpr SetupVirtualChannelResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : virtual_channel_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        relay_path_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        virtual_channel_auth_token_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        relay_server_process_id_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetupVirtualChannelResponse::SetupVirtualChannelResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetupVirtualChannelResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetupVirtualChannelResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetupVirtualChannelResponseDefaultTypeInternal() {}
  union {
    SetupVirtualChannelResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetupVirtualChannelResponseDefaultTypeInternal _SetupVirtualChannelResponse_default_instance_;

inline constexpr SetupVirtualChannelRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : virtual_channel_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        relay_client_process_id_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetupVirtualChannelRequest::SetupVirtualChannelRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetupVirtualChannelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetupVirtualChannelRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetupVirtualChannelRequestDefaultTypeInternal() {}
  union {
    SetupVirtualChannelRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetupVirtualChannelRequestDefaultTypeInternal _SetupVirtualChannelRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR SetCursorPointResponse::SetCursorPointResponse(::_pbi::ConstantInitialized) {}
struct SetCursorPointResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetCursorPointResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetCursorPointResponseDefaultTypeInternal() {}
  union {
    SetCursorPointResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetCursorPointResponseDefaultTypeInternal _SetCursorPointResponse_default_instance_;

inline constexpr Rect::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        width_{0u},
        height_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Rect::Rect(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RectDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RectDefaultTypeInternal() {}
  union {
    Rect _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RectDefaultTypeInternal _Rect_default_instance_;

inline constexpr Point::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Point::Point(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointDefaultTypeInternal _Point_default_instance_;

inline constexpr IsPointInsideStreamingViewsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : view_id_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR IsPointInsideStreamingViewsResponse::IsPointInsideStreamingViewsResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct IsPointInsideStreamingViewsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IsPointInsideStreamingViewsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IsPointInsideStreamingViewsResponseDefaultTypeInternal() {}
  union {
    IsPointInsideStreamingViewsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IsPointInsideStreamingViewsResponseDefaultTypeInternal _IsPointInsideStreamingViewsResponse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR GetStreamingViewsRequest::GetStreamingViewsRequest(::_pbi::ConstantInitialized) {}
struct GetStreamingViewsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStreamingViewsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStreamingViewsRequestDefaultTypeInternal() {}
  union {
    GetStreamingViewsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStreamingViewsRequestDefaultTypeInternal _GetStreamingViewsRequest_default_instance_;

inline constexpr GetManifestResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : manifest_path_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetManifestResponse::GetManifestResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetManifestResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetManifestResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetManifestResponseDefaultTypeInternal() {}
  union {
    GetManifestResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetManifestResponseDefaultTypeInternal _GetManifestResponse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR GetManifestRequest::GetManifestRequest(::_pbi::ConstantInitialized) {}
struct GetManifestRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetManifestRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetManifestRequestDefaultTypeInternal() {}
  union {
    GetManifestRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetManifestRequestDefaultTypeInternal _GetManifestRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR GetDcvInfoRequest::GetDcvInfoRequest(::_pbi::ConstantInitialized) {}
struct GetDcvInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDcvInfoRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDcvInfoRequestDefaultTypeInternal() {}
  union {
    GetDcvInfoRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDcvInfoRequestDefaultTypeInternal _GetDcvInfoRequest_default_instance_;

inline constexpr CloseVirtualChannelResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : virtual_channel_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CloseVirtualChannelResponse::CloseVirtualChannelResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CloseVirtualChannelResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloseVirtualChannelResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloseVirtualChannelResponseDefaultTypeInternal() {}
  union {
    CloseVirtualChannelResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloseVirtualChannelResponseDefaultTypeInternal _CloseVirtualChannelResponse_default_instance_;

inline constexpr CloseVirtualChannelRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : virtual_channel_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CloseVirtualChannelRequest::CloseVirtualChannelRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CloseVirtualChannelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloseVirtualChannelRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloseVirtualChannelRequestDefaultTypeInternal() {}
  union {
    CloseVirtualChannelRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloseVirtualChannelRequestDefaultTypeInternal _CloseVirtualChannelRequest_default_instance_;

inline constexpr StreamingViews_StreamingView::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        local_area_{nullptr},
        remote_offset_{nullptr},
        zoom_factor_{0},
        view_id_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StreamingViews_StreamingView::StreamingViews_StreamingView(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StreamingViews_StreamingViewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamingViews_StreamingViewDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamingViews_StreamingViewDefaultTypeInternal() {}
  union {
    StreamingViews_StreamingView _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamingViews_StreamingViewDefaultTypeInternal _StreamingViews_StreamingView_default_instance_;

inline constexpr SoftwareInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        os_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        arch_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        hostname_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        version_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SoftwareInfo::SoftwareInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SoftwareInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SoftwareInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SoftwareInfoDefaultTypeInternal() {}
  union {
    SoftwareInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SoftwareInfoDefaultTypeInternal _SoftwareInfo_default_instance_;

inline constexpr SetCursorPointRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        point_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SetCursorPointRequest::SetCursorPointRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SetCursorPointRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetCursorPointRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetCursorPointRequestDefaultTypeInternal() {}
  union {
    SetCursorPointRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetCursorPointRequestDefaultTypeInternal _SetCursorPointRequest_default_instance_;

inline constexpr IsPointInsideStreamingViewsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        point_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR IsPointInsideStreamingViewsRequest::IsPointInsideStreamingViewsRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct IsPointInsideStreamingViewsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IsPointInsideStreamingViewsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IsPointInsideStreamingViewsRequestDefaultTypeInternal() {}
  union {
    IsPointInsideStreamingViewsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IsPointInsideStreamingViewsRequestDefaultTypeInternal _IsPointInsideStreamingViewsRequest_default_instance_;

inline constexpr StreamingViews::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : streaming_view_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StreamingViews::StreamingViews(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StreamingViewsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamingViewsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamingViewsDefaultTypeInternal() {}
  union {
    StreamingViews _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamingViewsDefaultTypeInternal _StreamingViews_default_instance_;

inline constexpr Request::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : request_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        request_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Request::Request(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestDefaultTypeInternal _Request_default_instance_;

inline constexpr GetDcvInfoResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        server_info_{nullptr},
        client_info_{nullptr},
        dcv_process_id_{::int64_t{0}},
        dcv_role_{static_cast< ::dcv::extensions::GetDcvInfoResponse_DcvRole >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR GetDcvInfoResponse::GetDcvInfoResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetDcvInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDcvInfoResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDcvInfoResponseDefaultTypeInternal() {}
  union {
    GetDcvInfoResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDcvInfoResponseDefaultTypeInternal _GetDcvInfoResponse_default_instance_;

inline constexpr StreamingViewsChangedEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        streaming_views_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR StreamingViewsChangedEvent::StreamingViewsChangedEvent(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StreamingViewsChangedEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamingViewsChangedEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamingViewsChangedEventDefaultTypeInternal() {}
  union {
    StreamingViewsChangedEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamingViewsChangedEventDefaultTypeInternal _StreamingViewsChangedEvent_default_instance_;

inline constexpr GetStreamingViewsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        streaming_views_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetStreamingViewsResponse::GetStreamingViewsResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetStreamingViewsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStreamingViewsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStreamingViewsResponseDefaultTypeInternal() {}
  union {
    GetStreamingViewsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStreamingViewsResponseDefaultTypeInternal _GetStreamingViewsResponse_default_instance_;

inline constexpr ExtensionMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : msg_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR ExtensionMessage::ExtensionMessage(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ExtensionMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtensionMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtensionMessageDefaultTypeInternal() {}
  union {
    ExtensionMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtensionMessageDefaultTypeInternal _ExtensionMessage_default_instance_;

inline constexpr Response::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : request_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        status_{static_cast< ::dcv::extensions::Response_Status >(0)},
        response_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Response::Response(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseDefaultTypeInternal _Response_default_instance_;

inline constexpr Event::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : event_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Event::Event(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDefaultTypeInternal _Event_default_instance_;

inline constexpr DcvMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : msg_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR DcvMessage::DcvMessage(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DcvMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DcvMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DcvMessageDefaultTypeInternal() {}
  union {
    DcvMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DcvMessageDefaultTypeInternal _DcvMessage_default_instance_;
}  // namespace extensions
}  // namespace dcv
static ::_pb::Metadata file_level_metadata_extensions_2eproto[28];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_extensions_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_extensions_2eproto = nullptr;
const ::uint32_t TableStruct_extensions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::SoftwareInfo_VersionNumber, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::SoftwareInfo_VersionNumber, _impl_.major_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::SoftwareInfo_VersionNumber, _impl_.minor_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::SoftwareInfo_VersionNumber, _impl_.revision_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::SoftwareInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::SoftwareInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::SoftwareInfo, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::SoftwareInfo, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::SoftwareInfo, _impl_.os_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::SoftwareInfo, _impl_.arch_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::SoftwareInfo, _impl_.hostname_),
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::Point, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::Point, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::Point, _impl_.y_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::Rect, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::Rect, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::Rect, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::Rect, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::Rect, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::StreamingViews_StreamingView, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::StreamingViews_StreamingView, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::StreamingViews_StreamingView, _impl_.view_id_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::StreamingViews_StreamingView, _impl_.local_area_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::StreamingViews_StreamingView, _impl_.zoom_factor_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::StreamingViews_StreamingView, _impl_.remote_offset_),
    ~0u,
    0,
    ~0u,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::StreamingViews, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::StreamingViews, _impl_.streaming_view_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetDcvInfoRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetManifestRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::SetupVirtualChannelRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::SetupVirtualChannelRequest, _impl_.virtual_channel_name_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::SetupVirtualChannelRequest, _impl_.relay_client_process_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::CloseVirtualChannelRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::CloseVirtualChannelRequest, _impl_.virtual_channel_name_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::SetCursorPointRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::SetCursorPointRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::SetCursorPointRequest, _impl_.point_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetStreamingViewsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::IsPointInsideStreamingViewsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::IsPointInsideStreamingViewsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::IsPointInsideStreamingViewsRequest, _impl_.point_),
    0,
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetDcvInfoResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetDcvInfoResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetDcvInfoResponse, _impl_.dcv_role_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetDcvInfoResponse, _impl_.dcv_process_id_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetDcvInfoResponse, _impl_.server_info_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetDcvInfoResponse, _impl_.client_info_),
    ~0u,
    ~0u,
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetManifestResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetManifestResponse, _impl_.manifest_path_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::SetupVirtualChannelResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::SetupVirtualChannelResponse, _impl_.virtual_channel_name_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::SetupVirtualChannelResponse, _impl_.relay_path_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::SetupVirtualChannelResponse, _impl_.relay_server_process_id_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::SetupVirtualChannelResponse, _impl_.virtual_channel_auth_token_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::CloseVirtualChannelResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::CloseVirtualChannelResponse, _impl_.virtual_channel_name_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::SetCursorPointResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetStreamingViewsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetStreamingViewsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetStreamingViewsResponse, _impl_.streaming_views_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::IsPointInsideStreamingViewsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::IsPointInsideStreamingViewsResponse, _impl_.view_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::VirtualChannelReadyEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::VirtualChannelReadyEvent, _impl_.virtual_channel_name_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::VirtualChannelClosedEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::VirtualChannelClosedEvent, _impl_.virtual_channel_name_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::StreamingViewsChangedEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::StreamingViewsChangedEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::StreamingViewsChangedEvent, _impl_.streaming_views_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::Request, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::Request, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::Request, _impl_.request_id_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::Request, _impl_.request_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::Response, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::Response, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::Response, _impl_.request_id_),
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::Response, _impl_.status_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::Response, _impl_.response_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::Event, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::Event, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::Event, _impl_.event_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::ExtensionMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::ExtensionMessage, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::ExtensionMessage, _impl_.msg_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::DcvMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::DcvMessage, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::DcvMessage, _impl_.msg_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::dcv::extensions::SoftwareInfo_VersionNumber)},
        {11, 24, -1, sizeof(::dcv::extensions::SoftwareInfo)},
        {29, -1, -1, sizeof(::dcv::extensions::Point)},
        {39, -1, -1, sizeof(::dcv::extensions::Rect)},
        {51, 63, -1, sizeof(::dcv::extensions::StreamingViews_StreamingView)},
        {67, -1, -1, sizeof(::dcv::extensions::StreamingViews)},
        {76, -1, -1, sizeof(::dcv::extensions::GetDcvInfoRequest)},
        {84, -1, -1, sizeof(::dcv::extensions::GetManifestRequest)},
        {92, -1, -1, sizeof(::dcv::extensions::SetupVirtualChannelRequest)},
        {102, -1, -1, sizeof(::dcv::extensions::CloseVirtualChannelRequest)},
        {111, 120, -1, sizeof(::dcv::extensions::SetCursorPointRequest)},
        {121, -1, -1, sizeof(::dcv::extensions::GetStreamingViewsRequest)},
        {129, 138, -1, sizeof(::dcv::extensions::IsPointInsideStreamingViewsRequest)},
        {139, 151, -1, sizeof(::dcv::extensions::GetDcvInfoResponse)},
        {155, -1, -1, sizeof(::dcv::extensions::GetManifestResponse)},
        {164, -1, -1, sizeof(::dcv::extensions::SetupVirtualChannelResponse)},
        {176, -1, -1, sizeof(::dcv::extensions::CloseVirtualChannelResponse)},
        {185, -1, -1, sizeof(::dcv::extensions::SetCursorPointResponse)},
        {193, 202, -1, sizeof(::dcv::extensions::GetStreamingViewsResponse)},
        {203, -1, -1, sizeof(::dcv::extensions::IsPointInsideStreamingViewsResponse)},
        {212, -1, -1, sizeof(::dcv::extensions::VirtualChannelReadyEvent)},
        {221, -1, -1, sizeof(::dcv::extensions::VirtualChannelClosedEvent)},
        {230, 239, -1, sizeof(::dcv::extensions::StreamingViewsChangedEvent)},
        {240, -1, -1, sizeof(::dcv::extensions::Request)},
        {257, -1, -1, sizeof(::dcv::extensions::Response)},
        {275, -1, -1, sizeof(::dcv::extensions::Event)},
        {287, -1, -1, sizeof(::dcv::extensions::ExtensionMessage)},
        {297, -1, -1, sizeof(::dcv::extensions::DcvMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::dcv::extensions::_SoftwareInfo_VersionNumber_default_instance_._instance,
    &::dcv::extensions::_SoftwareInfo_default_instance_._instance,
    &::dcv::extensions::_Point_default_instance_._instance,
    &::dcv::extensions::_Rect_default_instance_._instance,
    &::dcv::extensions::_StreamingViews_StreamingView_default_instance_._instance,
    &::dcv::extensions::_StreamingViews_default_instance_._instance,
    &::dcv::extensions::_GetDcvInfoRequest_default_instance_._instance,
    &::dcv::extensions::_GetManifestRequest_default_instance_._instance,
    &::dcv::extensions::_SetupVirtualChannelRequest_default_instance_._instance,
    &::dcv::extensions::_CloseVirtualChannelRequest_default_instance_._instance,
    &::dcv::extensions::_SetCursorPointRequest_default_instance_._instance,
    &::dcv::extensions::_GetStreamingViewsRequest_default_instance_._instance,
    &::dcv::extensions::_IsPointInsideStreamingViewsRequest_default_instance_._instance,
    &::dcv::extensions::_GetDcvInfoResponse_default_instance_._instance,
    &::dcv::extensions::_GetManifestResponse_default_instance_._instance,
    &::dcv::extensions::_SetupVirtualChannelResponse_default_instance_._instance,
    &::dcv::extensions::_CloseVirtualChannelResponse_default_instance_._instance,
    &::dcv::extensions::_SetCursorPointResponse_default_instance_._instance,
    &::dcv::extensions::_GetStreamingViewsResponse_default_instance_._instance,
    &::dcv::extensions::_IsPointInsideStreamingViewsResponse_default_instance_._instance,
    &::dcv::extensions::_VirtualChannelReadyEvent_default_instance_._instance,
    &::dcv::extensions::_VirtualChannelClosedEvent_default_instance_._instance,
    &::dcv::extensions::_StreamingViewsChangedEvent_default_instance_._instance,
    &::dcv::extensions::_Request_default_instance_._instance,
    &::dcv::extensions::_Response_default_instance_._instance,
    &::dcv::extensions::_Event_default_instance_._instance,
    &::dcv::extensions::_ExtensionMessage_default_instance_._instance,
    &::dcv::extensions::_DcvMessage_default_instance_._instance,
};
const char descriptor_table_protodef_extensions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\020extensions.proto\022\016dcv.extensions\"\306\001\n\014S"
    "oftwareInfo\022\014\n\004name\030\001 \001(\t\022;\n\007version\030\002 \001"
    "(\0132*.dcv.extensions.SoftwareInfo.Version"
    "Number\022\n\n\002os\030\003 \001(\t\022\014\n\004arch\030\004 \001(\t\022\020\n\010host"
    "name\030\005 \001(\t\032\?\n\rVersionNumber\022\r\n\005major\030\001 \001"
    "(\r\022\r\n\005minor\030\002 \001(\r\022\020\n\010revision\030\003 \001(\r\"\035\n\005P"
    "oint\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\";\n\004Rect\022\t\n\001x\030"
    "\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\r\n\005width\030\003 \001(\r\022\016\n\006heigh"
    "t\030\004 \001(\r\"\346\001\n\016StreamingViews\022D\n\016streaming_"
    "view\030\001 \003(\0132,.dcv.extensions.StreamingVie"
    "ws.StreamingView\032\215\001\n\rStreamingView\022\017\n\007vi"
    "ew_id\030\001 \001(\005\022(\n\nlocal_area\030\002 \001(\0132\024.dcv.ex"
    "tensions.Rect\022\023\n\013zoom_factor\030\003 \001(\001\022,\n\rre"
    "mote_offset\030\004 \001(\0132\025.dcv.extensions.Point"
    "\"\023\n\021GetDcvInfoRequest\"\024\n\022GetManifestRequ"
    "est\"[\n\032SetupVirtualChannelRequest\022\034\n\024vir"
    "tual_channel_name\030\001 \001(\t\022\037\n\027relay_client_"
    "process_id\030\002 \001(\003\":\n\032CloseVirtualChannelR"
    "equest\022\034\n\024virtual_channel_name\030\001 \001(\t\"=\n\025"
    "SetCursorPointRequest\022$\n\005point\030\001 \001(\0132\025.d"
    "cv.extensions.Point\"\032\n\030GetStreamingViews"
    "Request\"J\n\"IsPointInsideStreamingViewsRe"
    "quest\022$\n\005point\030\001 \001(\0132\025.dcv.extensions.Po"
    "int\"\363\001\n\022GetDcvInfoResponse\022<\n\010dcv_role\030\001"
    " \001(\0162*.dcv.extensions.GetDcvInfoResponse"
    ".DcvRole\022\026\n\016dcv_process_id\030\002 \001(\003\0221\n\013serv"
    "er_info\030\003 \001(\0132\034.dcv.extensions.SoftwareI"
    "nfo\0221\n\013client_info\030\004 \001(\0132\034.dcv.extension"
    "s.SoftwareInfo\"!\n\007DcvRole\022\n\n\006Server\020\000\022\n\n"
    "\006Client\020\001\",\n\023GetManifestResponse\022\025\n\rmani"
    "fest_path\030\001 \001(\t\"\224\001\n\033SetupVirtualChannelR"
    "esponse\022\034\n\024virtual_channel_name\030\001 \001(\t\022\022\n"
    "\nrelay_path\030\002 \001(\t\022\037\n\027relay_server_proces"
    "s_id\030\003 \001(\003\022\"\n\032virtual_channel_auth_token"
    "\030\004 \001(\014\";\n\033CloseVirtualChannelResponse\022\034\n"
    "\024virtual_channel_name\030\001 \001(\t\"\030\n\026SetCursor"
    "PointResponse\"T\n\031GetStreamingViewsRespon"
    "se\0227\n\017streaming_views\030\001 \001(\0132\036.dcv.extens"
    "ions.StreamingViews\"6\n#IsPointInsideStre"
    "amingViewsResponse\022\017\n\007view_id\030\001 \001(\005\"8\n\030V"
    "irtualChannelReadyEvent\022\034\n\024virtual_chann"
    "el_name\030\001 \001(\t\"9\n\031VirtualChannelClosedEve"
    "nt\022\034\n\024virtual_channel_name\030\001 \001(\t\"U\n\032Stre"
    "amingViewsChangedEvent\0227\n\017streaming_view"
    "s\030\001 \001(\0132\036.dcv.extensions.StreamingViews\""
    "\334\004\n\007Request\022\022\n\nrequest_id\030\001 \001(\t\022A\n\024get_d"
    "cv_info_request\030\n \001(\0132!.dcv.extensions.G"
    "etDcvInfoRequestH\000\022B\n\024get_manifest_reque"
    "st\030\013 \001(\0132\".dcv.extensions.GetManifestReq"
    "uestH\000\022S\n\035setup_virtual_channel_request\030"
    "\024 \001(\0132*.dcv.extensions.SetupVirtualChann"
    "elRequestH\000\022S\n\035close_virtual_channel_req"
    "uest\030\025 \001(\0132*.dcv.extensions.CloseVirtual"
    "ChannelRequestH\000\022I\n\030set_cursor_point_req"
    "uest\030\036 \001(\0132%.dcv.extensions.SetCursorPoi"
    "ntRequestH\000\022O\n\033get_streaming_views_reque"
    "st\030\037 \001(\0132(.dcv.extensions.GetStreamingVi"
    "ewsRequestH\000\022e\n\'is_point_inside_streamin"
    "g_views_request\030  \001(\01322.dcv.extensions.I"
    "sPointInsideStreamingViewsRequestH\000B\t\n\007r"
    "equest\"\201\007\n\010Response\022\022\n\nrequest_id\030\001 \001(\t\022"
    "/\n\006status\030\002 \001(\0162\037.dcv.extensions.Respons"
    "e.Status\022C\n\025get_dcv_info_response\030\n \001(\0132"
    "\".dcv.extensions.GetDcvInfoResponseH\000\022D\n"
    "\025get_manifest_response\030\013 \001(\0132#.dcv.exten"
    "sions.GetManifestResponseH\000\022U\n\036setup_vir"
    "tual_channel_response\030\024 \001(\0132+.dcv.extens"
    "ions.SetupVirtualChannelResponseH\000\022U\n\036cl"
    "ose_virtual_channel_response\030\025 \001(\0132+.dcv"
    ".extensions.CloseVirtualChannelResponseH"
    "\000\022K\n\031set_cursor_point_response\030\036 \001(\0132&.d"
    "cv.extensions.SetCursorPointResponseH\000\022Q"
    "\n\034get_streaming_views_response\030\037 \001(\0132).d"
    "cv.extensions.GetStreamingViewsResponseH"
    "\000\022g\n(is_point_inside_streaming_views_res"
    "ponse\030  \001(\01323.dcv.extensions.IsPointInsi"
    "deStreamingViewsResponseH\000\"\341\001\n\006Status\022\010\n"
    "\004NONE\020\000\022\013\n\007SUCCESS\020\001\022\021\n\rERROR_GENERIC\020\n\022"
    "\027\n\023ERROR_ACCESS_DENIED\020\013\022\031\n\025ERROR_NOT_IM"
    "PLEMENTED\020\014\022\033\n\027ERROR_INVALID_PARAMETER\020\r"
    "\0227\n3ERROR_INVALID_VIRTUAL_CHANNEL_NAMESP"
    "ACE_IN_MANIFEST\020\016\022#\n\037ERROR_TOO_MANY_VIRT"
    "UAL_CHANNELS\020\017B\n\n\010response\"\211\002\n\005Event\022O\n\033"
    "virtual_channel_ready_event\030\n \001(\0132(.dcv."
    "extensions.VirtualChannelReadyEventH\000\022Q\n"
    "\034virtual_channel_closed_event\030\024 \001(\0132).dc"
    "v.extensions.VirtualChannelClosedEventH\000"
    "\022S\n\035streaming_views_changed_event\030\036 \001(\0132"
    "*.dcv.extensions.StreamingViewsChangedEv"
    "entH\000B\007\n\005event\"E\n\020ExtensionMessage\022*\n\007re"
    "quest\030\001 \001(\0132\027.dcv.extensions.RequestH\000B\005"
    "\n\003msg\"i\n\nDcvMessage\022,\n\010response\030\002 \001(\0132\030."
    "dcv.extensions.ResponseH\000\022&\n\005event\030\003 \001(\013"
    "2\025.dcv.extensions.EventH\000B\005\n\003msgb\006proto3"
};
static ::absl::once_flag descriptor_table_extensions_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_extensions_2eproto = {
    false,
    false,
    3760,
    descriptor_table_protodef_extensions_2eproto,
    "extensions.proto",
    &descriptor_table_extensions_2eproto_once,
    nullptr,
    0,
    28,
    schemas,
    file_default_instances,
    TableStruct_extensions_2eproto::offsets,
    file_level_metadata_extensions_2eproto,
    file_level_enum_descriptors_extensions_2eproto,
    file_level_service_descriptors_extensions_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_extensions_2eproto_getter() {
  return &descriptor_table_extensions_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_extensions_2eproto(&descriptor_table_extensions_2eproto);
namespace dcv {
namespace extensions {
const ::google::protobuf::EnumDescriptor* GetDcvInfoResponse_DcvRole_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_extensions_2eproto);
  return file_level_enum_descriptors_extensions_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t GetDcvInfoResponse_DcvRole_internal_data_[] = {
    131072u, 0u, };
bool GetDcvInfoResponse_DcvRole_IsValid(int value) {
  return 0 <= value && value <= 1;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr GetDcvInfoResponse_DcvRole GetDcvInfoResponse::Server;
constexpr GetDcvInfoResponse_DcvRole GetDcvInfoResponse::Client;
constexpr GetDcvInfoResponse_DcvRole GetDcvInfoResponse::DcvRole_MIN;
constexpr GetDcvInfoResponse_DcvRole GetDcvInfoResponse::DcvRole_MAX;
constexpr int GetDcvInfoResponse::DcvRole_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* Response_Status_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_extensions_2eproto);
  return file_level_enum_descriptors_extensions_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t Response_Status_internal_data_[] = {
    131072u, 32u, 16128u, };
bool Response_Status_IsValid(int value) {
  return 0 <= value && value <= 15 && ((64515u >> value) & 1) != 0;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Response_Status Response::NONE;
constexpr Response_Status Response::SUCCESS;
constexpr Response_Status Response::ERROR_GENERIC;
constexpr Response_Status Response::ERROR_ACCESS_DENIED;
constexpr Response_Status Response::ERROR_NOT_IMPLEMENTED;
constexpr Response_Status Response::ERROR_INVALID_PARAMETER;
constexpr Response_Status Response::ERROR_INVALID_VIRTUAL_CHANNEL_NAMESPACE_IN_MANIFEST;
constexpr Response_Status Response::ERROR_TOO_MANY_VIRTUAL_CHANNELS;
constexpr Response_Status Response::Status_MIN;
constexpr Response_Status Response::Status_MAX;
constexpr int Response::Status_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class SoftwareInfo_VersionNumber::_Internal {
 public:
};

SoftwareInfo_VersionNumber::SoftwareInfo_VersionNumber(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.SoftwareInfo.VersionNumber)
}
SoftwareInfo_VersionNumber::SoftwareInfo_VersionNumber(
    ::google::protobuf::Arena* arena, const SoftwareInfo_VersionNumber& from)
    : SoftwareInfo_VersionNumber(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SoftwareInfo_VersionNumber::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SoftwareInfo_VersionNumber::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, major_),
           0,
           offsetof(Impl_, revision_) -
               offsetof(Impl_, major_) +
               sizeof(Impl_::revision_));
}
SoftwareInfo_VersionNumber::~SoftwareInfo_VersionNumber() {
  // @@protoc_insertion_point(destructor:dcv.extensions.SoftwareInfo.VersionNumber)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SoftwareInfo_VersionNumber::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SoftwareInfo_VersionNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.SoftwareInfo.VersionNumber)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.major_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.revision_) -
      reinterpret_cast<char*>(&_impl_.major_)) + sizeof(_impl_.revision_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SoftwareInfo_VersionNumber::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> SoftwareInfo_VersionNumber::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SoftwareInfo_VersionNumber_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 major = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SoftwareInfo_VersionNumber, _impl_.major_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SoftwareInfo_VersionNumber, _impl_.major_)}},
    // uint32 minor = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SoftwareInfo_VersionNumber, _impl_.minor_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SoftwareInfo_VersionNumber, _impl_.minor_)}},
    // uint32 revision = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SoftwareInfo_VersionNumber, _impl_.revision_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(SoftwareInfo_VersionNumber, _impl_.revision_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 major = 1;
    {PROTOBUF_FIELD_OFFSET(SoftwareInfo_VersionNumber, _impl_.major_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 minor = 2;
    {PROTOBUF_FIELD_OFFSET(SoftwareInfo_VersionNumber, _impl_.minor_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 revision = 3;
    {PROTOBUF_FIELD_OFFSET(SoftwareInfo_VersionNumber, _impl_.revision_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SoftwareInfo_VersionNumber::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.SoftwareInfo.VersionNumber)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 major = 1;
  if (this->_internal_major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_major(), target);
  }

  // uint32 minor = 2;
  if (this->_internal_minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_minor(), target);
  }

  // uint32 revision = 3;
  if (this->_internal_revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_revision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.SoftwareInfo.VersionNumber)
  return target;
}

::size_t SoftwareInfo_VersionNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.SoftwareInfo.VersionNumber)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 major = 1;
  if (this->_internal_major() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_major());
  }

  // uint32 minor = 2;
  if (this->_internal_minor() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_minor());
  }

  // uint32 revision = 3;
  if (this->_internal_revision() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_revision());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SoftwareInfo_VersionNumber::_class_data_ = {
    SoftwareInfo_VersionNumber::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SoftwareInfo_VersionNumber::GetClassData() const {
  return &_class_data_;
}

void SoftwareInfo_VersionNumber::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SoftwareInfo_VersionNumber*>(&to_msg);
  auto& from = static_cast<const SoftwareInfo_VersionNumber&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.SoftwareInfo.VersionNumber)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_major() != 0) {
    _this->_internal_set_major(from._internal_major());
  }
  if (from._internal_minor() != 0) {
    _this->_internal_set_minor(from._internal_minor());
  }
  if (from._internal_revision() != 0) {
    _this->_internal_set_revision(from._internal_revision());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SoftwareInfo_VersionNumber::CopyFrom(const SoftwareInfo_VersionNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.SoftwareInfo.VersionNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SoftwareInfo_VersionNumber::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SoftwareInfo_VersionNumber::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SoftwareInfo_VersionNumber::InternalSwap(SoftwareInfo_VersionNumber* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SoftwareInfo_VersionNumber, _impl_.revision_)
      + sizeof(SoftwareInfo_VersionNumber::_impl_.revision_)
      - PROTOBUF_FIELD_OFFSET(SoftwareInfo_VersionNumber, _impl_.major_)>(
          reinterpret_cast<char*>(&_impl_.major_),
          reinterpret_cast<char*>(&other->_impl_.major_));
}

::google::protobuf::Metadata SoftwareInfo_VersionNumber::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[0]);
}
// ===================================================================

class SoftwareInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SoftwareInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SoftwareInfo, _impl_._has_bits_);
  static const ::dcv::extensions::SoftwareInfo_VersionNumber& version(const SoftwareInfo* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dcv::extensions::SoftwareInfo_VersionNumber& SoftwareInfo::_Internal::version(const SoftwareInfo* msg) {
  return *msg->_impl_.version_;
}
SoftwareInfo::SoftwareInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.SoftwareInfo)
}
inline PROTOBUF_NDEBUG_INLINE SoftwareInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_),
        os_(arena, from.os_),
        arch_(arena, from.arch_),
        hostname_(arena, from.hostname_) {}

SoftwareInfo::SoftwareInfo(
    ::google::protobuf::Arena* arena,
    const SoftwareInfo& from)
    : ::google::protobuf::Message(arena) {
  SoftwareInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.version_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::dcv::extensions::SoftwareInfo_VersionNumber>(arena, *from._impl_.version_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:dcv.extensions.SoftwareInfo)
}
inline PROTOBUF_NDEBUG_INLINE SoftwareInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena),
        os_(arena),
        arch_(arena),
        hostname_(arena) {}

inline void SoftwareInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.version_ = {};
}
SoftwareInfo::~SoftwareInfo() {
  // @@protoc_insertion_point(destructor:dcv.extensions.SoftwareInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SoftwareInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.os_.Destroy();
  _impl_.arch_.Destroy();
  _impl_.hostname_.Destroy();
  delete _impl_.version_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SoftwareInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.SoftwareInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.os_.ClearToEmpty();
  _impl_.arch_.ClearToEmpty();
  _impl_.hostname_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.version_ != nullptr);
    _impl_.version_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SoftwareInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 54, 2> SoftwareInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SoftwareInfo, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SoftwareInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SoftwareInfo, _impl_.name_)}},
    // .dcv.extensions.SoftwareInfo.VersionNumber version = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(SoftwareInfo, _impl_.version_)}},
    // string os = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(SoftwareInfo, _impl_.os_)}},
    // string arch = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(SoftwareInfo, _impl_.arch_)}},
    // string hostname = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(SoftwareInfo, _impl_.hostname_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(SoftwareInfo, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .dcv.extensions.SoftwareInfo.VersionNumber version = 2;
    {PROTOBUF_FIELD_OFFSET(SoftwareInfo, _impl_.version_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string os = 3;
    {PROTOBUF_FIELD_OFFSET(SoftwareInfo, _impl_.os_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string arch = 4;
    {PROTOBUF_FIELD_OFFSET(SoftwareInfo, _impl_.arch_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string hostname = 5;
    {PROTOBUF_FIELD_OFFSET(SoftwareInfo, _impl_.hostname_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::dcv::extensions::SoftwareInfo_VersionNumber>()},
  }}, {{
    "\33\4\0\2\4\10\0\0"
    "dcv.extensions.SoftwareInfo"
    "name"
    "os"
    "arch"
    "hostname"
  }},
};

::uint8_t* SoftwareInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.SoftwareInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dcv.extensions.SoftwareInfo.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .dcv.extensions.SoftwareInfo.VersionNumber version = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  // string os = 3;
  if (!this->_internal_os().empty()) {
    const std::string& _s = this->_internal_os();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dcv.extensions.SoftwareInfo.os");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string arch = 4;
  if (!this->_internal_arch().empty()) {
    const std::string& _s = this->_internal_arch();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dcv.extensions.SoftwareInfo.arch");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string hostname = 5;
  if (!this->_internal_hostname().empty()) {
    const std::string& _s = this->_internal_hostname();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dcv.extensions.SoftwareInfo.hostname");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.SoftwareInfo)
  return target;
}

::size_t SoftwareInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.SoftwareInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string os = 3;
  if (!this->_internal_os().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_os());
  }

  // string arch = 4;
  if (!this->_internal_arch().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_arch());
  }

  // string hostname = 5;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_hostname());
  }

  // .dcv.extensions.SoftwareInfo.VersionNumber version = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.version_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SoftwareInfo::_class_data_ = {
    SoftwareInfo::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SoftwareInfo::GetClassData() const {
  return &_class_data_;
}

void SoftwareInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SoftwareInfo*>(&to_msg);
  auto& from = static_cast<const SoftwareInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.SoftwareInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_os().empty()) {
    _this->_internal_set_os(from._internal_os());
  }
  if (!from._internal_arch().empty()) {
    _this->_internal_set_arch(from._internal_arch());
  }
  if (!from._internal_hostname().empty()) {
    _this->_internal_set_hostname(from._internal_hostname());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_version()->::dcv::extensions::SoftwareInfo_VersionNumber::MergeFrom(
        from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SoftwareInfo::CopyFrom(const SoftwareInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.SoftwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SoftwareInfo::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SoftwareInfo::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SoftwareInfo::InternalSwap(SoftwareInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.os_, &other->_impl_.os_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.arch_, &other->_impl_.arch_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hostname_, &other->_impl_.hostname_, arena);
  swap(_impl_.version_, other->_impl_.version_);
}

::google::protobuf::Metadata SoftwareInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[1]);
}
// ===================================================================

class Point::_Internal {
 public:
};

Point::Point(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.Point)
}
Point::Point(
    ::google::protobuf::Arena* arena, const Point& from)
    : Point(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Point::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Point::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, y_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::y_));
}
Point::~Point() {
  // @@protoc_insertion_point(destructor:dcv.extensions.Point)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Point::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.Point)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Point::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Point::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Point_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 y = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Point, _impl_.y_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Point, _impl_.y_)}},
    // int32 x = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Point, _impl_.x_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Point, _impl_.x_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 x = 1;
    {PROTOBUF_FIELD_OFFSET(Point, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 y = 2;
    {PROTOBUF_FIELD_OFFSET(Point, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Point::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.Point)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.Point)
  return target;
}

::size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.Point)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Point::_class_data_ = {
    Point::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Point::GetClassData() const {
  return &_class_data_;
}

void Point::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Point*>(&to_msg);
  auto& from = static_cast<const Point&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.Point)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Point::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Point::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Point::InternalSwap(Point* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, _impl_.y_)
      + sizeof(Point::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Point, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Point::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[2]);
}
// ===================================================================

class Rect::_Internal {
 public:
};

Rect::Rect(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.Rect)
}
Rect::Rect(
    ::google::protobuf::Arena* arena, const Rect& from)
    : Rect(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Rect::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Rect::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, height_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::height_));
}
Rect::~Rect() {
  // @@protoc_insertion_point(destructor:dcv.extensions.Rect)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Rect::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.Rect)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Rect::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> Rect::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Rect_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 height = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Rect, _impl_.height_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Rect, _impl_.height_)}},
    // int32 x = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Rect, _impl_.x_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Rect, _impl_.x_)}},
    // int32 y = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Rect, _impl_.y_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Rect, _impl_.y_)}},
    // uint32 width = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Rect, _impl_.width_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Rect, _impl_.width_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 x = 1;
    {PROTOBUF_FIELD_OFFSET(Rect, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 y = 2;
    {PROTOBUF_FIELD_OFFSET(Rect, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // uint32 width = 3;
    {PROTOBUF_FIELD_OFFSET(Rect, _impl_.width_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 height = 4;
    {PROTOBUF_FIELD_OFFSET(Rect, _impl_.height_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Rect::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.Rect)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_y(), target);
  }

  // uint32 width = 3;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_width(), target);
  }

  // uint32 height = 4;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.Rect)
  return target;
}

::size_t Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.Rect)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_y());
  }

  // uint32 width = 3;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_width());
  }

  // uint32 height = 4;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Rect::_class_data_ = {
    Rect::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Rect::GetClassData() const {
  return &_class_data_;
}

void Rect::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Rect*>(&to_msg);
  auto& from = static_cast<const Rect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.Rect)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Rect::CopyFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Rect::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Rect::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Rect::InternalSwap(Rect* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rect, _impl_.height_)
      + sizeof(Rect::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(Rect, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Rect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[3]);
}
// ===================================================================

class StreamingViews_StreamingView::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamingViews_StreamingView>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StreamingViews_StreamingView, _impl_._has_bits_);
  static const ::dcv::extensions::Rect& local_area(const StreamingViews_StreamingView* msg);
  static void set_has_local_area(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::dcv::extensions::Point& remote_offset(const StreamingViews_StreamingView* msg);
  static void set_has_remote_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::dcv::extensions::Rect& StreamingViews_StreamingView::_Internal::local_area(const StreamingViews_StreamingView* msg) {
  return *msg->_impl_.local_area_;
}
const ::dcv::extensions::Point& StreamingViews_StreamingView::_Internal::remote_offset(const StreamingViews_StreamingView* msg) {
  return *msg->_impl_.remote_offset_;
}
StreamingViews_StreamingView::StreamingViews_StreamingView(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.StreamingViews.StreamingView)
}
inline PROTOBUF_NDEBUG_INLINE StreamingViews_StreamingView::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

StreamingViews_StreamingView::StreamingViews_StreamingView(
    ::google::protobuf::Arena* arena,
    const StreamingViews_StreamingView& from)
    : ::google::protobuf::Message(arena) {
  StreamingViews_StreamingView* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.local_area_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::dcv::extensions::Rect>(arena, *from._impl_.local_area_)
                : nullptr;
  _impl_.remote_offset_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::dcv::extensions::Point>(arena, *from._impl_.remote_offset_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, zoom_factor_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, zoom_factor_),
           offsetof(Impl_, view_id_) -
               offsetof(Impl_, zoom_factor_) +
               sizeof(Impl_::view_id_));

  // @@protoc_insertion_point(copy_constructor:dcv.extensions.StreamingViews.StreamingView)
}
inline PROTOBUF_NDEBUG_INLINE StreamingViews_StreamingView::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void StreamingViews_StreamingView::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, local_area_),
           0,
           offsetof(Impl_, view_id_) -
               offsetof(Impl_, local_area_) +
               sizeof(Impl_::view_id_));
}
StreamingViews_StreamingView::~StreamingViews_StreamingView() {
  // @@protoc_insertion_point(destructor:dcv.extensions.StreamingViews.StreamingView)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StreamingViews_StreamingView::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.local_area_;
  delete _impl_.remote_offset_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void StreamingViews_StreamingView::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.StreamingViews.StreamingView)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.local_area_ != nullptr);
      _impl_.local_area_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.remote_offset_ != nullptr);
      _impl_.remote_offset_->Clear();
    }
  }
  ::memset(&_impl_.zoom_factor_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.view_id_) -
      reinterpret_cast<char*>(&_impl_.zoom_factor_)) + sizeof(_impl_.view_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StreamingViews_StreamingView::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> StreamingViews_StreamingView::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StreamingViews_StreamingView, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_StreamingViews_StreamingView_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .dcv.extensions.Point remote_offset = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(StreamingViews_StreamingView, _impl_.remote_offset_)}},
    // int32 view_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StreamingViews_StreamingView, _impl_.view_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(StreamingViews_StreamingView, _impl_.view_id_)}},
    // .dcv.extensions.Rect local_area = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(StreamingViews_StreamingView, _impl_.local_area_)}},
    // double zoom_factor = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(StreamingViews_StreamingView, _impl_.zoom_factor_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 view_id = 1;
    {PROTOBUF_FIELD_OFFSET(StreamingViews_StreamingView, _impl_.view_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .dcv.extensions.Rect local_area = 2;
    {PROTOBUF_FIELD_OFFSET(StreamingViews_StreamingView, _impl_.local_area_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double zoom_factor = 3;
    {PROTOBUF_FIELD_OFFSET(StreamingViews_StreamingView, _impl_.zoom_factor_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // .dcv.extensions.Point remote_offset = 4;
    {PROTOBUF_FIELD_OFFSET(StreamingViews_StreamingView, _impl_.remote_offset_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::dcv::extensions::Rect>()},
    {::_pbi::TcParser::GetTable<::dcv::extensions::Point>()},
  }}, {{
  }},
};

::uint8_t* StreamingViews_StreamingView::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.StreamingViews.StreamingView)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 view_id = 1;
  if (this->_internal_view_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_view_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .dcv.extensions.Rect local_area = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::local_area(this),
        _Internal::local_area(this).GetCachedSize(), target, stream);
  }

  // double zoom_factor = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_zoom_factor = this->_internal_zoom_factor();
  ::uint64_t raw_zoom_factor;
  memcpy(&raw_zoom_factor, &tmp_zoom_factor, sizeof(tmp_zoom_factor));
  if (raw_zoom_factor != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_zoom_factor(), target);
  }

  // .dcv.extensions.Point remote_offset = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::remote_offset(this),
        _Internal::remote_offset(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.StreamingViews.StreamingView)
  return target;
}

::size_t StreamingViews_StreamingView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.StreamingViews.StreamingView)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .dcv.extensions.Rect local_area = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.local_area_);
    }

    // .dcv.extensions.Point remote_offset = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.remote_offset_);
    }

  }
  // double zoom_factor = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_zoom_factor = this->_internal_zoom_factor();
  ::uint64_t raw_zoom_factor;
  memcpy(&raw_zoom_factor, &tmp_zoom_factor, sizeof(tmp_zoom_factor));
  if (raw_zoom_factor != 0) {
    total_size += 9;
  }

  // int32 view_id = 1;
  if (this->_internal_view_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_view_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StreamingViews_StreamingView::_class_data_ = {
    StreamingViews_StreamingView::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* StreamingViews_StreamingView::GetClassData() const {
  return &_class_data_;
}

void StreamingViews_StreamingView::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StreamingViews_StreamingView*>(&to_msg);
  auto& from = static_cast<const StreamingViews_StreamingView&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.StreamingViews.StreamingView)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_local_area()->::dcv::extensions::Rect::MergeFrom(
          from._internal_local_area());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_remote_offset()->::dcv::extensions::Point::MergeFrom(
          from._internal_remote_offset());
    }
  }
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_zoom_factor = from._internal_zoom_factor();
  ::uint64_t raw_zoom_factor;
  memcpy(&raw_zoom_factor, &tmp_zoom_factor, sizeof(tmp_zoom_factor));
  if (raw_zoom_factor != 0) {
    _this->_internal_set_zoom_factor(from._internal_zoom_factor());
  }
  if (from._internal_view_id() != 0) {
    _this->_internal_set_view_id(from._internal_view_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamingViews_StreamingView::CopyFrom(const StreamingViews_StreamingView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.StreamingViews.StreamingView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StreamingViews_StreamingView::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* StreamingViews_StreamingView::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void StreamingViews_StreamingView::InternalSwap(StreamingViews_StreamingView* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamingViews_StreamingView, _impl_.view_id_)
      + sizeof(StreamingViews_StreamingView::_impl_.view_id_)
      - PROTOBUF_FIELD_OFFSET(StreamingViews_StreamingView, _impl_.local_area_)>(
          reinterpret_cast<char*>(&_impl_.local_area_),
          reinterpret_cast<char*>(&other->_impl_.local_area_));
}

::google::protobuf::Metadata StreamingViews_StreamingView::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[4]);
}
// ===================================================================

class StreamingViews::_Internal {
 public:
};

StreamingViews::StreamingViews(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.StreamingViews)
}
inline PROTOBUF_NDEBUG_INLINE StreamingViews::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : streaming_view_{visibility, arena, from.streaming_view_},
        _cached_size_{0} {}

StreamingViews::StreamingViews(
    ::google::protobuf::Arena* arena,
    const StreamingViews& from)
    : ::google::protobuf::Message(arena) {
  StreamingViews* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:dcv.extensions.StreamingViews)
}
inline PROTOBUF_NDEBUG_INLINE StreamingViews::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : streaming_view_{visibility, arena},
        _cached_size_{0} {}

inline void StreamingViews::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
StreamingViews::~StreamingViews() {
  // @@protoc_insertion_point(destructor:dcv.extensions.StreamingViews)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StreamingViews::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void StreamingViews::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.StreamingViews)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.streaming_view_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StreamingViews::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> StreamingViews::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_StreamingViews_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .dcv.extensions.StreamingViews.StreamingView streaming_view = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(StreamingViews, _impl_.streaming_view_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .dcv.extensions.StreamingViews.StreamingView streaming_view = 1;
    {PROTOBUF_FIELD_OFFSET(StreamingViews, _impl_.streaming_view_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::dcv::extensions::StreamingViews_StreamingView>()},
  }}, {{
  }},
};

::uint8_t* StreamingViews::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.StreamingViews)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .dcv.extensions.StreamingViews.StreamingView streaming_view = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_streaming_view_size()); i < n; i++) {
    const auto& repfield = this->_internal_streaming_view().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.StreamingViews)
  return target;
}

::size_t StreamingViews::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.StreamingViews)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dcv.extensions.StreamingViews.StreamingView streaming_view = 1;
  total_size += 1UL * this->_internal_streaming_view_size();
  for (const auto& msg : this->_internal_streaming_view()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StreamingViews::_class_data_ = {
    StreamingViews::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* StreamingViews::GetClassData() const {
  return &_class_data_;
}

void StreamingViews::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StreamingViews*>(&to_msg);
  auto& from = static_cast<const StreamingViews&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.StreamingViews)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_streaming_view()->MergeFrom(
      from._internal_streaming_view());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamingViews::CopyFrom(const StreamingViews& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.StreamingViews)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StreamingViews::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* StreamingViews::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void StreamingViews::InternalSwap(StreamingViews* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.streaming_view_.InternalSwap(&other->_impl_.streaming_view_);
}

::google::protobuf::Metadata StreamingViews::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[5]);
}
// ===================================================================

class GetDcvInfoRequest::_Internal {
 public:
};

GetDcvInfoRequest::GetDcvInfoRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.GetDcvInfoRequest)
}
GetDcvInfoRequest::GetDcvInfoRequest(
    ::google::protobuf::Arena* arena,
    const GetDcvInfoRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  GetDcvInfoRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:dcv.extensions.GetDcvInfoRequest)
}









::google::protobuf::Metadata GetDcvInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[6]);
}
// ===================================================================

class GetManifestRequest::_Internal {
 public:
};

GetManifestRequest::GetManifestRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.GetManifestRequest)
}
GetManifestRequest::GetManifestRequest(
    ::google::protobuf::Arena* arena,
    const GetManifestRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  GetManifestRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:dcv.extensions.GetManifestRequest)
}









::google::protobuf::Metadata GetManifestRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[7]);
}
// ===================================================================

class SetupVirtualChannelRequest::_Internal {
 public:
};

SetupVirtualChannelRequest::SetupVirtualChannelRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.SetupVirtualChannelRequest)
}
inline PROTOBUF_NDEBUG_INLINE SetupVirtualChannelRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : virtual_channel_name_(arena, from.virtual_channel_name_),
        _cached_size_{0} {}

SetupVirtualChannelRequest::SetupVirtualChannelRequest(
    ::google::protobuf::Arena* arena,
    const SetupVirtualChannelRequest& from)
    : ::google::protobuf::Message(arena) {
  SetupVirtualChannelRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.relay_client_process_id_ = from._impl_.relay_client_process_id_;

  // @@protoc_insertion_point(copy_constructor:dcv.extensions.SetupVirtualChannelRequest)
}
inline PROTOBUF_NDEBUG_INLINE SetupVirtualChannelRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : virtual_channel_name_(arena),
        _cached_size_{0} {}

inline void SetupVirtualChannelRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.relay_client_process_id_ = {};
}
SetupVirtualChannelRequest::~SetupVirtualChannelRequest() {
  // @@protoc_insertion_point(destructor:dcv.extensions.SetupVirtualChannelRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetupVirtualChannelRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.virtual_channel_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetupVirtualChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.SetupVirtualChannelRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.virtual_channel_name_.ClearToEmpty();
  _impl_.relay_client_process_id_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetupVirtualChannelRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 70, 2> SetupVirtualChannelRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetupVirtualChannelRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int64 relay_client_process_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SetupVirtualChannelRequest, _impl_.relay_client_process_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SetupVirtualChannelRequest, _impl_.relay_client_process_id_)}},
    // string virtual_channel_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SetupVirtualChannelRequest, _impl_.virtual_channel_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string virtual_channel_name = 1;
    {PROTOBUF_FIELD_OFFSET(SetupVirtualChannelRequest, _impl_.virtual_channel_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 relay_client_process_id = 2;
    {PROTOBUF_FIELD_OFFSET(SetupVirtualChannelRequest, _impl_.relay_client_process_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
    "\51\24\0\0\0\0\0\0"
    "dcv.extensions.SetupVirtualChannelRequest"
    "virtual_channel_name"
  }},
};

::uint8_t* SetupVirtualChannelRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.SetupVirtualChannelRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string virtual_channel_name = 1;
  if (!this->_internal_virtual_channel_name().empty()) {
    const std::string& _s = this->_internal_virtual_channel_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int64 relay_client_process_id = 2;
  if (this->_internal_relay_client_process_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_relay_client_process_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.SetupVirtualChannelRequest)
  return target;
}

::size_t SetupVirtualChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.SetupVirtualChannelRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string virtual_channel_name = 1;
  if (!this->_internal_virtual_channel_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_virtual_channel_name());
  }

  // int64 relay_client_process_id = 2;
  if (this->_internal_relay_client_process_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_relay_client_process_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetupVirtualChannelRequest::_class_data_ = {
    SetupVirtualChannelRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetupVirtualChannelRequest::GetClassData() const {
  return &_class_data_;
}

void SetupVirtualChannelRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetupVirtualChannelRequest*>(&to_msg);
  auto& from = static_cast<const SetupVirtualChannelRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.SetupVirtualChannelRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_virtual_channel_name().empty()) {
    _this->_internal_set_virtual_channel_name(from._internal_virtual_channel_name());
  }
  if (from._internal_relay_client_process_id() != 0) {
    _this->_internal_set_relay_client_process_id(from._internal_relay_client_process_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetupVirtualChannelRequest::CopyFrom(const SetupVirtualChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.SetupVirtualChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetupVirtualChannelRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetupVirtualChannelRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetupVirtualChannelRequest::InternalSwap(SetupVirtualChannelRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.virtual_channel_name_, &other->_impl_.virtual_channel_name_, arena);
        swap(_impl_.relay_client_process_id_, other->_impl_.relay_client_process_id_);
}

::google::protobuf::Metadata SetupVirtualChannelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[8]);
}
// ===================================================================

class CloseVirtualChannelRequest::_Internal {
 public:
};

CloseVirtualChannelRequest::CloseVirtualChannelRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.CloseVirtualChannelRequest)
}
inline PROTOBUF_NDEBUG_INLINE CloseVirtualChannelRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : virtual_channel_name_(arena, from.virtual_channel_name_),
        _cached_size_{0} {}

CloseVirtualChannelRequest::CloseVirtualChannelRequest(
    ::google::protobuf::Arena* arena,
    const CloseVirtualChannelRequest& from)
    : ::google::protobuf::Message(arena) {
  CloseVirtualChannelRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:dcv.extensions.CloseVirtualChannelRequest)
}
inline PROTOBUF_NDEBUG_INLINE CloseVirtualChannelRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : virtual_channel_name_(arena),
        _cached_size_{0} {}

inline void CloseVirtualChannelRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CloseVirtualChannelRequest::~CloseVirtualChannelRequest() {
  // @@protoc_insertion_point(destructor:dcv.extensions.CloseVirtualChannelRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CloseVirtualChannelRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.virtual_channel_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CloseVirtualChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.CloseVirtualChannelRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.virtual_channel_name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CloseVirtualChannelRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 70, 2> CloseVirtualChannelRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CloseVirtualChannelRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string virtual_channel_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CloseVirtualChannelRequest, _impl_.virtual_channel_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string virtual_channel_name = 1;
    {PROTOBUF_FIELD_OFFSET(CloseVirtualChannelRequest, _impl_.virtual_channel_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\51\24\0\0\0\0\0\0"
    "dcv.extensions.CloseVirtualChannelRequest"
    "virtual_channel_name"
  }},
};

::uint8_t* CloseVirtualChannelRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.CloseVirtualChannelRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string virtual_channel_name = 1;
  if (!this->_internal_virtual_channel_name().empty()) {
    const std::string& _s = this->_internal_virtual_channel_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.CloseVirtualChannelRequest)
  return target;
}

::size_t CloseVirtualChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.CloseVirtualChannelRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string virtual_channel_name = 1;
  if (!this->_internal_virtual_channel_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_virtual_channel_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CloseVirtualChannelRequest::_class_data_ = {
    CloseVirtualChannelRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CloseVirtualChannelRequest::GetClassData() const {
  return &_class_data_;
}

void CloseVirtualChannelRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CloseVirtualChannelRequest*>(&to_msg);
  auto& from = static_cast<const CloseVirtualChannelRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.CloseVirtualChannelRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_virtual_channel_name().empty()) {
    _this->_internal_set_virtual_channel_name(from._internal_virtual_channel_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CloseVirtualChannelRequest::CopyFrom(const CloseVirtualChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.CloseVirtualChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CloseVirtualChannelRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CloseVirtualChannelRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CloseVirtualChannelRequest::InternalSwap(CloseVirtualChannelRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.virtual_channel_name_, &other->_impl_.virtual_channel_name_, arena);
}

::google::protobuf::Metadata CloseVirtualChannelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[9]);
}
// ===================================================================

class SetCursorPointRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetCursorPointRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetCursorPointRequest, _impl_._has_bits_);
  static const ::dcv::extensions::Point& point(const SetCursorPointRequest* msg);
  static void set_has_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dcv::extensions::Point& SetCursorPointRequest::_Internal::point(const SetCursorPointRequest* msg) {
  return *msg->_impl_.point_;
}
SetCursorPointRequest::SetCursorPointRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.SetCursorPointRequest)
}
inline PROTOBUF_NDEBUG_INLINE SetCursorPointRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SetCursorPointRequest::SetCursorPointRequest(
    ::google::protobuf::Arena* arena,
    const SetCursorPointRequest& from)
    : ::google::protobuf::Message(arena) {
  SetCursorPointRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.point_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::dcv::extensions::Point>(arena, *from._impl_.point_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:dcv.extensions.SetCursorPointRequest)
}
inline PROTOBUF_NDEBUG_INLINE SetCursorPointRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SetCursorPointRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.point_ = {};
}
SetCursorPointRequest::~SetCursorPointRequest() {
  // @@protoc_insertion_point(destructor:dcv.extensions.SetCursorPointRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetCursorPointRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.point_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetCursorPointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.SetCursorPointRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.point_ != nullptr);
    _impl_.point_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetCursorPointRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SetCursorPointRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SetCursorPointRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SetCursorPointRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .dcv.extensions.Point point = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SetCursorPointRequest, _impl_.point_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .dcv.extensions.Point point = 1;
    {PROTOBUF_FIELD_OFFSET(SetCursorPointRequest, _impl_.point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::dcv::extensions::Point>()},
  }}, {{
  }},
};

::uint8_t* SetCursorPointRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.SetCursorPointRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .dcv.extensions.Point point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::point(this),
        _Internal::point(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.SetCursorPointRequest)
  return target;
}

::size_t SetCursorPointRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.SetCursorPointRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dcv.extensions.Point point = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.point_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetCursorPointRequest::_class_data_ = {
    SetCursorPointRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetCursorPointRequest::GetClassData() const {
  return &_class_data_;
}

void SetCursorPointRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetCursorPointRequest*>(&to_msg);
  auto& from = static_cast<const SetCursorPointRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.SetCursorPointRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_point()->::dcv::extensions::Point::MergeFrom(
        from._internal_point());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetCursorPointRequest::CopyFrom(const SetCursorPointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.SetCursorPointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetCursorPointRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetCursorPointRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetCursorPointRequest::InternalSwap(SetCursorPointRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.point_, other->_impl_.point_);
}

::google::protobuf::Metadata SetCursorPointRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[10]);
}
// ===================================================================

class GetStreamingViewsRequest::_Internal {
 public:
};

GetStreamingViewsRequest::GetStreamingViewsRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.GetStreamingViewsRequest)
}
GetStreamingViewsRequest::GetStreamingViewsRequest(
    ::google::protobuf::Arena* arena,
    const GetStreamingViewsRequest& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  GetStreamingViewsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:dcv.extensions.GetStreamingViewsRequest)
}









::google::protobuf::Metadata GetStreamingViewsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[11]);
}
// ===================================================================

class IsPointInsideStreamingViewsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<IsPointInsideStreamingViewsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(IsPointInsideStreamingViewsRequest, _impl_._has_bits_);
  static const ::dcv::extensions::Point& point(const IsPointInsideStreamingViewsRequest* msg);
  static void set_has_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dcv::extensions::Point& IsPointInsideStreamingViewsRequest::_Internal::point(const IsPointInsideStreamingViewsRequest* msg) {
  return *msg->_impl_.point_;
}
IsPointInsideStreamingViewsRequest::IsPointInsideStreamingViewsRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.IsPointInsideStreamingViewsRequest)
}
inline PROTOBUF_NDEBUG_INLINE IsPointInsideStreamingViewsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

IsPointInsideStreamingViewsRequest::IsPointInsideStreamingViewsRequest(
    ::google::protobuf::Arena* arena,
    const IsPointInsideStreamingViewsRequest& from)
    : ::google::protobuf::Message(arena) {
  IsPointInsideStreamingViewsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.point_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::dcv::extensions::Point>(arena, *from._impl_.point_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:dcv.extensions.IsPointInsideStreamingViewsRequest)
}
inline PROTOBUF_NDEBUG_INLINE IsPointInsideStreamingViewsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void IsPointInsideStreamingViewsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.point_ = {};
}
IsPointInsideStreamingViewsRequest::~IsPointInsideStreamingViewsRequest() {
  // @@protoc_insertion_point(destructor:dcv.extensions.IsPointInsideStreamingViewsRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void IsPointInsideStreamingViewsRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.point_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void IsPointInsideStreamingViewsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.IsPointInsideStreamingViewsRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.point_ != nullptr);
    _impl_.point_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* IsPointInsideStreamingViewsRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> IsPointInsideStreamingViewsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(IsPointInsideStreamingViewsRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_IsPointInsideStreamingViewsRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .dcv.extensions.Point point = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(IsPointInsideStreamingViewsRequest, _impl_.point_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .dcv.extensions.Point point = 1;
    {PROTOBUF_FIELD_OFFSET(IsPointInsideStreamingViewsRequest, _impl_.point_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::dcv::extensions::Point>()},
  }}, {{
  }},
};

::uint8_t* IsPointInsideStreamingViewsRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.IsPointInsideStreamingViewsRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .dcv.extensions.Point point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::point(this),
        _Internal::point(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.IsPointInsideStreamingViewsRequest)
  return target;
}

::size_t IsPointInsideStreamingViewsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.IsPointInsideStreamingViewsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dcv.extensions.Point point = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.point_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData IsPointInsideStreamingViewsRequest::_class_data_ = {
    IsPointInsideStreamingViewsRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* IsPointInsideStreamingViewsRequest::GetClassData() const {
  return &_class_data_;
}

void IsPointInsideStreamingViewsRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<IsPointInsideStreamingViewsRequest*>(&to_msg);
  auto& from = static_cast<const IsPointInsideStreamingViewsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.IsPointInsideStreamingViewsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_point()->::dcv::extensions::Point::MergeFrom(
        from._internal_point());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IsPointInsideStreamingViewsRequest::CopyFrom(const IsPointInsideStreamingViewsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.IsPointInsideStreamingViewsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool IsPointInsideStreamingViewsRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* IsPointInsideStreamingViewsRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void IsPointInsideStreamingViewsRequest::InternalSwap(IsPointInsideStreamingViewsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.point_, other->_impl_.point_);
}

::google::protobuf::Metadata IsPointInsideStreamingViewsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[12]);
}
// ===================================================================

class GetDcvInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetDcvInfoResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetDcvInfoResponse, _impl_._has_bits_);
  static const ::dcv::extensions::SoftwareInfo& server_info(const GetDcvInfoResponse* msg);
  static void set_has_server_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::dcv::extensions::SoftwareInfo& client_info(const GetDcvInfoResponse* msg);
  static void set_has_client_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::dcv::extensions::SoftwareInfo& GetDcvInfoResponse::_Internal::server_info(const GetDcvInfoResponse* msg) {
  return *msg->_impl_.server_info_;
}
const ::dcv::extensions::SoftwareInfo& GetDcvInfoResponse::_Internal::client_info(const GetDcvInfoResponse* msg) {
  return *msg->_impl_.client_info_;
}
GetDcvInfoResponse::GetDcvInfoResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.GetDcvInfoResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetDcvInfoResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GetDcvInfoResponse::GetDcvInfoResponse(
    ::google::protobuf::Arena* arena,
    const GetDcvInfoResponse& from)
    : ::google::protobuf::Message(arena) {
  GetDcvInfoResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.server_info_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::dcv::extensions::SoftwareInfo>(arena, *from._impl_.server_info_)
                : nullptr;
  _impl_.client_info_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::dcv::extensions::SoftwareInfo>(arena, *from._impl_.client_info_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, dcv_process_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, dcv_process_id_),
           offsetof(Impl_, dcv_role_) -
               offsetof(Impl_, dcv_process_id_) +
               sizeof(Impl_::dcv_role_));

  // @@protoc_insertion_point(copy_constructor:dcv.extensions.GetDcvInfoResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetDcvInfoResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetDcvInfoResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, server_info_),
           0,
           offsetof(Impl_, dcv_role_) -
               offsetof(Impl_, server_info_) +
               sizeof(Impl_::dcv_role_));
}
GetDcvInfoResponse::~GetDcvInfoResponse() {
  // @@protoc_insertion_point(destructor:dcv.extensions.GetDcvInfoResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetDcvInfoResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.server_info_;
  delete _impl_.client_info_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetDcvInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.GetDcvInfoResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.server_info_ != nullptr);
      _impl_.server_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.client_info_ != nullptr);
      _impl_.client_info_->Clear();
    }
  }
  ::memset(&_impl_.dcv_process_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.dcv_role_) -
      reinterpret_cast<char*>(&_impl_.dcv_process_id_)) + sizeof(_impl_.dcv_role_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetDcvInfoResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 0, 2> GetDcvInfoResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetDcvInfoResponse, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetDcvInfoResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .dcv.extensions.SoftwareInfo client_info = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(GetDcvInfoResponse, _impl_.client_info_)}},
    // .dcv.extensions.GetDcvInfoResponse.DcvRole dcv_role = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetDcvInfoResponse, _impl_.dcv_role_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GetDcvInfoResponse, _impl_.dcv_role_)}},
    // int64 dcv_process_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(GetDcvInfoResponse, _impl_.dcv_process_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GetDcvInfoResponse, _impl_.dcv_process_id_)}},
    // .dcv.extensions.SoftwareInfo server_info = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GetDcvInfoResponse, _impl_.server_info_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .dcv.extensions.GetDcvInfoResponse.DcvRole dcv_role = 1;
    {PROTOBUF_FIELD_OFFSET(GetDcvInfoResponse, _impl_.dcv_role_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int64 dcv_process_id = 2;
    {PROTOBUF_FIELD_OFFSET(GetDcvInfoResponse, _impl_.dcv_process_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .dcv.extensions.SoftwareInfo server_info = 3;
    {PROTOBUF_FIELD_OFFSET(GetDcvInfoResponse, _impl_.server_info_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .dcv.extensions.SoftwareInfo client_info = 4;
    {PROTOBUF_FIELD_OFFSET(GetDcvInfoResponse, _impl_.client_info_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::dcv::extensions::SoftwareInfo>()},
    {::_pbi::TcParser::GetTable<::dcv::extensions::SoftwareInfo>()},
  }}, {{
  }},
};

::uint8_t* GetDcvInfoResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.GetDcvInfoResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .dcv.extensions.GetDcvInfoResponse.DcvRole dcv_role = 1;
  if (this->_internal_dcv_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_dcv_role(), target);
  }

  // int64 dcv_process_id = 2;
  if (this->_internal_dcv_process_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_dcv_process_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .dcv.extensions.SoftwareInfo server_info = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::server_info(this),
        _Internal::server_info(this).GetCachedSize(), target, stream);
  }

  // .dcv.extensions.SoftwareInfo client_info = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::client_info(this),
        _Internal::client_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.GetDcvInfoResponse)
  return target;
}

::size_t GetDcvInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.GetDcvInfoResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .dcv.extensions.SoftwareInfo server_info = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.server_info_);
    }

    // .dcv.extensions.SoftwareInfo client_info = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.client_info_);
    }

  }
  // int64 dcv_process_id = 2;
  if (this->_internal_dcv_process_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_dcv_process_id());
  }

  // .dcv.extensions.GetDcvInfoResponse.DcvRole dcv_role = 1;
  if (this->_internal_dcv_role() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_dcv_role());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetDcvInfoResponse::_class_data_ = {
    GetDcvInfoResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetDcvInfoResponse::GetClassData() const {
  return &_class_data_;
}

void GetDcvInfoResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetDcvInfoResponse*>(&to_msg);
  auto& from = static_cast<const GetDcvInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.GetDcvInfoResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_server_info()->::dcv::extensions::SoftwareInfo::MergeFrom(
          from._internal_server_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_client_info()->::dcv::extensions::SoftwareInfo::MergeFrom(
          from._internal_client_info());
    }
  }
  if (from._internal_dcv_process_id() != 0) {
    _this->_internal_set_dcv_process_id(from._internal_dcv_process_id());
  }
  if (from._internal_dcv_role() != 0) {
    _this->_internal_set_dcv_role(from._internal_dcv_role());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetDcvInfoResponse::CopyFrom(const GetDcvInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.GetDcvInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetDcvInfoResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetDcvInfoResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetDcvInfoResponse::InternalSwap(GetDcvInfoResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDcvInfoResponse, _impl_.dcv_role_)
      + sizeof(GetDcvInfoResponse::_impl_.dcv_role_)
      - PROTOBUF_FIELD_OFFSET(GetDcvInfoResponse, _impl_.server_info_)>(
          reinterpret_cast<char*>(&_impl_.server_info_),
          reinterpret_cast<char*>(&other->_impl_.server_info_));
}

::google::protobuf::Metadata GetDcvInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[13]);
}
// ===================================================================

class GetManifestResponse::_Internal {
 public:
};

GetManifestResponse::GetManifestResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.GetManifestResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetManifestResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : manifest_path_(arena, from.manifest_path_),
        _cached_size_{0} {}

GetManifestResponse::GetManifestResponse(
    ::google::protobuf::Arena* arena,
    const GetManifestResponse& from)
    : ::google::protobuf::Message(arena) {
  GetManifestResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:dcv.extensions.GetManifestResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetManifestResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : manifest_path_(arena),
        _cached_size_{0} {}

inline void GetManifestResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetManifestResponse::~GetManifestResponse() {
  // @@protoc_insertion_point(destructor:dcv.extensions.GetManifestResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetManifestResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.manifest_path_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetManifestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.GetManifestResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.manifest_path_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetManifestResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 56, 2> GetManifestResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GetManifestResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string manifest_path = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetManifestResponse, _impl_.manifest_path_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string manifest_path = 1;
    {PROTOBUF_FIELD_OFFSET(GetManifestResponse, _impl_.manifest_path_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\42\15\0\0\0\0\0\0"
    "dcv.extensions.GetManifestResponse"
    "manifest_path"
  }},
};

::uint8_t* GetManifestResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.GetManifestResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string manifest_path = 1;
  if (!this->_internal_manifest_path().empty()) {
    const std::string& _s = this->_internal_manifest_path();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dcv.extensions.GetManifestResponse.manifest_path");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.GetManifestResponse)
  return target;
}

::size_t GetManifestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.GetManifestResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string manifest_path = 1;
  if (!this->_internal_manifest_path().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_manifest_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetManifestResponse::_class_data_ = {
    GetManifestResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetManifestResponse::GetClassData() const {
  return &_class_data_;
}

void GetManifestResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetManifestResponse*>(&to_msg);
  auto& from = static_cast<const GetManifestResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.GetManifestResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_manifest_path().empty()) {
    _this->_internal_set_manifest_path(from._internal_manifest_path());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetManifestResponse::CopyFrom(const GetManifestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.GetManifestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetManifestResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetManifestResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetManifestResponse::InternalSwap(GetManifestResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.manifest_path_, &other->_impl_.manifest_path_, arena);
}

::google::protobuf::Metadata GetManifestResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[14]);
}
// ===================================================================

class SetupVirtualChannelResponse::_Internal {
 public:
};

SetupVirtualChannelResponse::SetupVirtualChannelResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.SetupVirtualChannelResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetupVirtualChannelResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : virtual_channel_name_(arena, from.virtual_channel_name_),
        relay_path_(arena, from.relay_path_),
        virtual_channel_auth_token_(arena, from.virtual_channel_auth_token_),
        _cached_size_{0} {}

SetupVirtualChannelResponse::SetupVirtualChannelResponse(
    ::google::protobuf::Arena* arena,
    const SetupVirtualChannelResponse& from)
    : ::google::protobuf::Message(arena) {
  SetupVirtualChannelResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.relay_server_process_id_ = from._impl_.relay_server_process_id_;

  // @@protoc_insertion_point(copy_constructor:dcv.extensions.SetupVirtualChannelResponse)
}
inline PROTOBUF_NDEBUG_INLINE SetupVirtualChannelResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : virtual_channel_name_(arena),
        relay_path_(arena),
        virtual_channel_auth_token_(arena),
        _cached_size_{0} {}

inline void SetupVirtualChannelResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.relay_server_process_id_ = {};
}
SetupVirtualChannelResponse::~SetupVirtualChannelResponse() {
  // @@protoc_insertion_point(destructor:dcv.extensions.SetupVirtualChannelResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SetupVirtualChannelResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.virtual_channel_name_.Destroy();
  _impl_.relay_path_.Destroy();
  _impl_.virtual_channel_auth_token_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SetupVirtualChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.SetupVirtualChannelResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.virtual_channel_name_.ClearToEmpty();
  _impl_.relay_path_.ClearToEmpty();
  _impl_.virtual_channel_auth_token_.ClearToEmpty();
  _impl_.relay_server_process_id_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SetupVirtualChannelResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 81, 2> SetupVirtualChannelResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SetupVirtualChannelResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bytes virtual_channel_auth_token = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(SetupVirtualChannelResponse, _impl_.virtual_channel_auth_token_)}},
    // string virtual_channel_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SetupVirtualChannelResponse, _impl_.virtual_channel_name_)}},
    // string relay_path = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SetupVirtualChannelResponse, _impl_.relay_path_)}},
    // int64 relay_server_process_id = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SetupVirtualChannelResponse, _impl_.relay_server_process_id_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(SetupVirtualChannelResponse, _impl_.relay_server_process_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string virtual_channel_name = 1;
    {PROTOBUF_FIELD_OFFSET(SetupVirtualChannelResponse, _impl_.virtual_channel_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string relay_path = 2;
    {PROTOBUF_FIELD_OFFSET(SetupVirtualChannelResponse, _impl_.relay_path_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 relay_server_process_id = 3;
    {PROTOBUF_FIELD_OFFSET(SetupVirtualChannelResponse, _impl_.relay_server_process_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bytes virtual_channel_auth_token = 4;
    {PROTOBUF_FIELD_OFFSET(SetupVirtualChannelResponse, _impl_.virtual_channel_auth_token_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\52\24\12\0\0\0\0\0"
    "dcv.extensions.SetupVirtualChannelResponse"
    "virtual_channel_name"
    "relay_path"
  }},
};

::uint8_t* SetupVirtualChannelResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.SetupVirtualChannelResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string virtual_channel_name = 1;
  if (!this->_internal_virtual_channel_name().empty()) {
    const std::string& _s = this->_internal_virtual_channel_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string relay_path = 2;
  if (!this->_internal_relay_path().empty()) {
    const std::string& _s = this->_internal_relay_path();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dcv.extensions.SetupVirtualChannelResponse.relay_path");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int64 relay_server_process_id = 3;
  if (this->_internal_relay_server_process_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_relay_server_process_id(), target);
  }

  // bytes virtual_channel_auth_token = 4;
  if (!this->_internal_virtual_channel_auth_token().empty()) {
    const std::string& _s = this->_internal_virtual_channel_auth_token();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.SetupVirtualChannelResponse)
  return target;
}

::size_t SetupVirtualChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.SetupVirtualChannelResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string virtual_channel_name = 1;
  if (!this->_internal_virtual_channel_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_virtual_channel_name());
  }

  // string relay_path = 2;
  if (!this->_internal_relay_path().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_relay_path());
  }

  // bytes virtual_channel_auth_token = 4;
  if (!this->_internal_virtual_channel_auth_token().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_virtual_channel_auth_token());
  }

  // int64 relay_server_process_id = 3;
  if (this->_internal_relay_server_process_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_relay_server_process_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SetupVirtualChannelResponse::_class_data_ = {
    SetupVirtualChannelResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SetupVirtualChannelResponse::GetClassData() const {
  return &_class_data_;
}

void SetupVirtualChannelResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SetupVirtualChannelResponse*>(&to_msg);
  auto& from = static_cast<const SetupVirtualChannelResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.SetupVirtualChannelResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_virtual_channel_name().empty()) {
    _this->_internal_set_virtual_channel_name(from._internal_virtual_channel_name());
  }
  if (!from._internal_relay_path().empty()) {
    _this->_internal_set_relay_path(from._internal_relay_path());
  }
  if (!from._internal_virtual_channel_auth_token().empty()) {
    _this->_internal_set_virtual_channel_auth_token(from._internal_virtual_channel_auth_token());
  }
  if (from._internal_relay_server_process_id() != 0) {
    _this->_internal_set_relay_server_process_id(from._internal_relay_server_process_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetupVirtualChannelResponse::CopyFrom(const SetupVirtualChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.SetupVirtualChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SetupVirtualChannelResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SetupVirtualChannelResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SetupVirtualChannelResponse::InternalSwap(SetupVirtualChannelResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.virtual_channel_name_, &other->_impl_.virtual_channel_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.relay_path_, &other->_impl_.relay_path_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.virtual_channel_auth_token_, &other->_impl_.virtual_channel_auth_token_, arena);
        swap(_impl_.relay_server_process_id_, other->_impl_.relay_server_process_id_);
}

::google::protobuf::Metadata SetupVirtualChannelResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[15]);
}
// ===================================================================

class CloseVirtualChannelResponse::_Internal {
 public:
};

CloseVirtualChannelResponse::CloseVirtualChannelResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.CloseVirtualChannelResponse)
}
inline PROTOBUF_NDEBUG_INLINE CloseVirtualChannelResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : virtual_channel_name_(arena, from.virtual_channel_name_),
        _cached_size_{0} {}

CloseVirtualChannelResponse::CloseVirtualChannelResponse(
    ::google::protobuf::Arena* arena,
    const CloseVirtualChannelResponse& from)
    : ::google::protobuf::Message(arena) {
  CloseVirtualChannelResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:dcv.extensions.CloseVirtualChannelResponse)
}
inline PROTOBUF_NDEBUG_INLINE CloseVirtualChannelResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : virtual_channel_name_(arena),
        _cached_size_{0} {}

inline void CloseVirtualChannelResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CloseVirtualChannelResponse::~CloseVirtualChannelResponse() {
  // @@protoc_insertion_point(destructor:dcv.extensions.CloseVirtualChannelResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CloseVirtualChannelResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.virtual_channel_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CloseVirtualChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.CloseVirtualChannelResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.virtual_channel_name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CloseVirtualChannelResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 71, 2> CloseVirtualChannelResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CloseVirtualChannelResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string virtual_channel_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CloseVirtualChannelResponse, _impl_.virtual_channel_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string virtual_channel_name = 1;
    {PROTOBUF_FIELD_OFFSET(CloseVirtualChannelResponse, _impl_.virtual_channel_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\52\24\0\0\0\0\0\0"
    "dcv.extensions.CloseVirtualChannelResponse"
    "virtual_channel_name"
  }},
};

::uint8_t* CloseVirtualChannelResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.CloseVirtualChannelResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string virtual_channel_name = 1;
  if (!this->_internal_virtual_channel_name().empty()) {
    const std::string& _s = this->_internal_virtual_channel_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.CloseVirtualChannelResponse)
  return target;
}

::size_t CloseVirtualChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.CloseVirtualChannelResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string virtual_channel_name = 1;
  if (!this->_internal_virtual_channel_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_virtual_channel_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CloseVirtualChannelResponse::_class_data_ = {
    CloseVirtualChannelResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CloseVirtualChannelResponse::GetClassData() const {
  return &_class_data_;
}

void CloseVirtualChannelResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CloseVirtualChannelResponse*>(&to_msg);
  auto& from = static_cast<const CloseVirtualChannelResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.CloseVirtualChannelResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_virtual_channel_name().empty()) {
    _this->_internal_set_virtual_channel_name(from._internal_virtual_channel_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CloseVirtualChannelResponse::CopyFrom(const CloseVirtualChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.CloseVirtualChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CloseVirtualChannelResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CloseVirtualChannelResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CloseVirtualChannelResponse::InternalSwap(CloseVirtualChannelResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.virtual_channel_name_, &other->_impl_.virtual_channel_name_, arena);
}

::google::protobuf::Metadata CloseVirtualChannelResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[16]);
}
// ===================================================================

class SetCursorPointResponse::_Internal {
 public:
};

SetCursorPointResponse::SetCursorPointResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.SetCursorPointResponse)
}
SetCursorPointResponse::SetCursorPointResponse(
    ::google::protobuf::Arena* arena,
    const SetCursorPointResponse& from)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  SetCursorPointResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:dcv.extensions.SetCursorPointResponse)
}









::google::protobuf::Metadata SetCursorPointResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[17]);
}
// ===================================================================

class GetStreamingViewsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetStreamingViewsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetStreamingViewsResponse, _impl_._has_bits_);
  static const ::dcv::extensions::StreamingViews& streaming_views(const GetStreamingViewsResponse* msg);
  static void set_has_streaming_views(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dcv::extensions::StreamingViews& GetStreamingViewsResponse::_Internal::streaming_views(const GetStreamingViewsResponse* msg) {
  return *msg->_impl_.streaming_views_;
}
GetStreamingViewsResponse::GetStreamingViewsResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.GetStreamingViewsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetStreamingViewsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GetStreamingViewsResponse::GetStreamingViewsResponse(
    ::google::protobuf::Arena* arena,
    const GetStreamingViewsResponse& from)
    : ::google::protobuf::Message(arena) {
  GetStreamingViewsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.streaming_views_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::dcv::extensions::StreamingViews>(arena, *from._impl_.streaming_views_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:dcv.extensions.GetStreamingViewsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetStreamingViewsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetStreamingViewsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.streaming_views_ = {};
}
GetStreamingViewsResponse::~GetStreamingViewsResponse() {
  // @@protoc_insertion_point(destructor:dcv.extensions.GetStreamingViewsResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetStreamingViewsResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.streaming_views_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetStreamingViewsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.GetStreamingViewsResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.streaming_views_ != nullptr);
    _impl_.streaming_views_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetStreamingViewsResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetStreamingViewsResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetStreamingViewsResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetStreamingViewsResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .dcv.extensions.StreamingViews streaming_views = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetStreamingViewsResponse, _impl_.streaming_views_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .dcv.extensions.StreamingViews streaming_views = 1;
    {PROTOBUF_FIELD_OFFSET(GetStreamingViewsResponse, _impl_.streaming_views_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::dcv::extensions::StreamingViews>()},
  }}, {{
  }},
};

::uint8_t* GetStreamingViewsResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.GetStreamingViewsResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .dcv.extensions.StreamingViews streaming_views = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::streaming_views(this),
        _Internal::streaming_views(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.GetStreamingViewsResponse)
  return target;
}

::size_t GetStreamingViewsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.GetStreamingViewsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dcv.extensions.StreamingViews streaming_views = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.streaming_views_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetStreamingViewsResponse::_class_data_ = {
    GetStreamingViewsResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetStreamingViewsResponse::GetClassData() const {
  return &_class_data_;
}

void GetStreamingViewsResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetStreamingViewsResponse*>(&to_msg);
  auto& from = static_cast<const GetStreamingViewsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.GetStreamingViewsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_streaming_views()->::dcv::extensions::StreamingViews::MergeFrom(
        from._internal_streaming_views());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetStreamingViewsResponse::CopyFrom(const GetStreamingViewsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.GetStreamingViewsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetStreamingViewsResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetStreamingViewsResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetStreamingViewsResponse::InternalSwap(GetStreamingViewsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.streaming_views_, other->_impl_.streaming_views_);
}

::google::protobuf::Metadata GetStreamingViewsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[18]);
}
// ===================================================================

class IsPointInsideStreamingViewsResponse::_Internal {
 public:
};

IsPointInsideStreamingViewsResponse::IsPointInsideStreamingViewsResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.IsPointInsideStreamingViewsResponse)
}
IsPointInsideStreamingViewsResponse::IsPointInsideStreamingViewsResponse(
    ::google::protobuf::Arena* arena, const IsPointInsideStreamingViewsResponse& from)
    : IsPointInsideStreamingViewsResponse(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE IsPointInsideStreamingViewsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void IsPointInsideStreamingViewsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.view_id_ = {};
}
IsPointInsideStreamingViewsResponse::~IsPointInsideStreamingViewsResponse() {
  // @@protoc_insertion_point(destructor:dcv.extensions.IsPointInsideStreamingViewsResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void IsPointInsideStreamingViewsResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void IsPointInsideStreamingViewsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.IsPointInsideStreamingViewsResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.view_id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* IsPointInsideStreamingViewsResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> IsPointInsideStreamingViewsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_IsPointInsideStreamingViewsResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 view_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(IsPointInsideStreamingViewsResponse, _impl_.view_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(IsPointInsideStreamingViewsResponse, _impl_.view_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 view_id = 1;
    {PROTOBUF_FIELD_OFFSET(IsPointInsideStreamingViewsResponse, _impl_.view_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* IsPointInsideStreamingViewsResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.IsPointInsideStreamingViewsResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 view_id = 1;
  if (this->_internal_view_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_view_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.IsPointInsideStreamingViewsResponse)
  return target;
}

::size_t IsPointInsideStreamingViewsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.IsPointInsideStreamingViewsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 view_id = 1;
  if (this->_internal_view_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_view_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData IsPointInsideStreamingViewsResponse::_class_data_ = {
    IsPointInsideStreamingViewsResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* IsPointInsideStreamingViewsResponse::GetClassData() const {
  return &_class_data_;
}

void IsPointInsideStreamingViewsResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<IsPointInsideStreamingViewsResponse*>(&to_msg);
  auto& from = static_cast<const IsPointInsideStreamingViewsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.IsPointInsideStreamingViewsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_view_id() != 0) {
    _this->_internal_set_view_id(from._internal_view_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IsPointInsideStreamingViewsResponse::CopyFrom(const IsPointInsideStreamingViewsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.IsPointInsideStreamingViewsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool IsPointInsideStreamingViewsResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* IsPointInsideStreamingViewsResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void IsPointInsideStreamingViewsResponse::InternalSwap(IsPointInsideStreamingViewsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.view_id_, other->_impl_.view_id_);
}

::google::protobuf::Metadata IsPointInsideStreamingViewsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[19]);
}
// ===================================================================

class VirtualChannelReadyEvent::_Internal {
 public:
};

VirtualChannelReadyEvent::VirtualChannelReadyEvent(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.VirtualChannelReadyEvent)
}
inline PROTOBUF_NDEBUG_INLINE VirtualChannelReadyEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : virtual_channel_name_(arena, from.virtual_channel_name_),
        _cached_size_{0} {}

VirtualChannelReadyEvent::VirtualChannelReadyEvent(
    ::google::protobuf::Arena* arena,
    const VirtualChannelReadyEvent& from)
    : ::google::protobuf::Message(arena) {
  VirtualChannelReadyEvent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:dcv.extensions.VirtualChannelReadyEvent)
}
inline PROTOBUF_NDEBUG_INLINE VirtualChannelReadyEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : virtual_channel_name_(arena),
        _cached_size_{0} {}

inline void VirtualChannelReadyEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
VirtualChannelReadyEvent::~VirtualChannelReadyEvent() {
  // @@protoc_insertion_point(destructor:dcv.extensions.VirtualChannelReadyEvent)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VirtualChannelReadyEvent::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.virtual_channel_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void VirtualChannelReadyEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.VirtualChannelReadyEvent)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.virtual_channel_name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* VirtualChannelReadyEvent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 68, 2> VirtualChannelReadyEvent::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_VirtualChannelReadyEvent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string virtual_channel_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(VirtualChannelReadyEvent, _impl_.virtual_channel_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string virtual_channel_name = 1;
    {PROTOBUF_FIELD_OFFSET(VirtualChannelReadyEvent, _impl_.virtual_channel_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\47\24\0\0\0\0\0\0"
    "dcv.extensions.VirtualChannelReadyEvent"
    "virtual_channel_name"
  }},
};

::uint8_t* VirtualChannelReadyEvent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.VirtualChannelReadyEvent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string virtual_channel_name = 1;
  if (!this->_internal_virtual_channel_name().empty()) {
    const std::string& _s = this->_internal_virtual_channel_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.VirtualChannelReadyEvent)
  return target;
}

::size_t VirtualChannelReadyEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.VirtualChannelReadyEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string virtual_channel_name = 1;
  if (!this->_internal_virtual_channel_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_virtual_channel_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData VirtualChannelReadyEvent::_class_data_ = {
    VirtualChannelReadyEvent::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* VirtualChannelReadyEvent::GetClassData() const {
  return &_class_data_;
}

void VirtualChannelReadyEvent::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<VirtualChannelReadyEvent*>(&to_msg);
  auto& from = static_cast<const VirtualChannelReadyEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.VirtualChannelReadyEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_virtual_channel_name().empty()) {
    _this->_internal_set_virtual_channel_name(from._internal_virtual_channel_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualChannelReadyEvent::CopyFrom(const VirtualChannelReadyEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.VirtualChannelReadyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VirtualChannelReadyEvent::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* VirtualChannelReadyEvent::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void VirtualChannelReadyEvent::InternalSwap(VirtualChannelReadyEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.virtual_channel_name_, &other->_impl_.virtual_channel_name_, arena);
}

::google::protobuf::Metadata VirtualChannelReadyEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[20]);
}
// ===================================================================

class VirtualChannelClosedEvent::_Internal {
 public:
};

VirtualChannelClosedEvent::VirtualChannelClosedEvent(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.VirtualChannelClosedEvent)
}
inline PROTOBUF_NDEBUG_INLINE VirtualChannelClosedEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : virtual_channel_name_(arena, from.virtual_channel_name_),
        _cached_size_{0} {}

VirtualChannelClosedEvent::VirtualChannelClosedEvent(
    ::google::protobuf::Arena* arena,
    const VirtualChannelClosedEvent& from)
    : ::google::protobuf::Message(arena) {
  VirtualChannelClosedEvent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:dcv.extensions.VirtualChannelClosedEvent)
}
inline PROTOBUF_NDEBUG_INLINE VirtualChannelClosedEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : virtual_channel_name_(arena),
        _cached_size_{0} {}

inline void VirtualChannelClosedEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
VirtualChannelClosedEvent::~VirtualChannelClosedEvent() {
  // @@protoc_insertion_point(destructor:dcv.extensions.VirtualChannelClosedEvent)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VirtualChannelClosedEvent::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.virtual_channel_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void VirtualChannelClosedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.VirtualChannelClosedEvent)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.virtual_channel_name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* VirtualChannelClosedEvent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 69, 2> VirtualChannelClosedEvent::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_VirtualChannelClosedEvent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string virtual_channel_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(VirtualChannelClosedEvent, _impl_.virtual_channel_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string virtual_channel_name = 1;
    {PROTOBUF_FIELD_OFFSET(VirtualChannelClosedEvent, _impl_.virtual_channel_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\50\24\0\0\0\0\0\0"
    "dcv.extensions.VirtualChannelClosedEvent"
    "virtual_channel_name"
  }},
};

::uint8_t* VirtualChannelClosedEvent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.VirtualChannelClosedEvent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string virtual_channel_name = 1;
  if (!this->_internal_virtual_channel_name().empty()) {
    const std::string& _s = this->_internal_virtual_channel_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.VirtualChannelClosedEvent)
  return target;
}

::size_t VirtualChannelClosedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.VirtualChannelClosedEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string virtual_channel_name = 1;
  if (!this->_internal_virtual_channel_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_virtual_channel_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData VirtualChannelClosedEvent::_class_data_ = {
    VirtualChannelClosedEvent::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* VirtualChannelClosedEvent::GetClassData() const {
  return &_class_data_;
}

void VirtualChannelClosedEvent::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<VirtualChannelClosedEvent*>(&to_msg);
  auto& from = static_cast<const VirtualChannelClosedEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.VirtualChannelClosedEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_virtual_channel_name().empty()) {
    _this->_internal_set_virtual_channel_name(from._internal_virtual_channel_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VirtualChannelClosedEvent::CopyFrom(const VirtualChannelClosedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.VirtualChannelClosedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VirtualChannelClosedEvent::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* VirtualChannelClosedEvent::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void VirtualChannelClosedEvent::InternalSwap(VirtualChannelClosedEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.virtual_channel_name_, &other->_impl_.virtual_channel_name_, arena);
}

::google::protobuf::Metadata VirtualChannelClosedEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[21]);
}
// ===================================================================

class StreamingViewsChangedEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<StreamingViewsChangedEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StreamingViewsChangedEvent, _impl_._has_bits_);
  static const ::dcv::extensions::StreamingViews& streaming_views(const StreamingViewsChangedEvent* msg);
  static void set_has_streaming_views(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::dcv::extensions::StreamingViews& StreamingViewsChangedEvent::_Internal::streaming_views(const StreamingViewsChangedEvent* msg) {
  return *msg->_impl_.streaming_views_;
}
StreamingViewsChangedEvent::StreamingViewsChangedEvent(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.StreamingViewsChangedEvent)
}
inline PROTOBUF_NDEBUG_INLINE StreamingViewsChangedEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

StreamingViewsChangedEvent::StreamingViewsChangedEvent(
    ::google::protobuf::Arena* arena,
    const StreamingViewsChangedEvent& from)
    : ::google::protobuf::Message(arena) {
  StreamingViewsChangedEvent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.streaming_views_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::dcv::extensions::StreamingViews>(arena, *from._impl_.streaming_views_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:dcv.extensions.StreamingViewsChangedEvent)
}
inline PROTOBUF_NDEBUG_INLINE StreamingViewsChangedEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void StreamingViewsChangedEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.streaming_views_ = {};
}
StreamingViewsChangedEvent::~StreamingViewsChangedEvent() {
  // @@protoc_insertion_point(destructor:dcv.extensions.StreamingViewsChangedEvent)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StreamingViewsChangedEvent::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.streaming_views_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void StreamingViewsChangedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.StreamingViewsChangedEvent)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.streaming_views_ != nullptr);
    _impl_.streaming_views_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StreamingViewsChangedEvent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> StreamingViewsChangedEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StreamingViewsChangedEvent, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_StreamingViewsChangedEvent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .dcv.extensions.StreamingViews streaming_views = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(StreamingViewsChangedEvent, _impl_.streaming_views_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .dcv.extensions.StreamingViews streaming_views = 1;
    {PROTOBUF_FIELD_OFFSET(StreamingViewsChangedEvent, _impl_.streaming_views_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::dcv::extensions::StreamingViews>()},
  }}, {{
  }},
};

::uint8_t* StreamingViewsChangedEvent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.StreamingViewsChangedEvent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .dcv.extensions.StreamingViews streaming_views = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::streaming_views(this),
        _Internal::streaming_views(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.StreamingViewsChangedEvent)
  return target;
}

::size_t StreamingViewsChangedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.StreamingViewsChangedEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dcv.extensions.StreamingViews streaming_views = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.streaming_views_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StreamingViewsChangedEvent::_class_data_ = {
    StreamingViewsChangedEvent::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* StreamingViewsChangedEvent::GetClassData() const {
  return &_class_data_;
}

void StreamingViewsChangedEvent::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StreamingViewsChangedEvent*>(&to_msg);
  auto& from = static_cast<const StreamingViewsChangedEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.StreamingViewsChangedEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_streaming_views()->::dcv::extensions::StreamingViews::MergeFrom(
        from._internal_streaming_views());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamingViewsChangedEvent::CopyFrom(const StreamingViewsChangedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.StreamingViewsChangedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StreamingViewsChangedEvent::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* StreamingViewsChangedEvent::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void StreamingViewsChangedEvent::InternalSwap(StreamingViewsChangedEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.streaming_views_, other->_impl_.streaming_views_);
}

::google::protobuf::Metadata StreamingViewsChangedEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[22]);
}
// ===================================================================

class Request::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::Request, _impl_._oneof_case_);
  static const ::dcv::extensions::GetDcvInfoRequest& get_dcv_info_request(const Request* msg);
  static const ::dcv::extensions::GetManifestRequest& get_manifest_request(const Request* msg);
  static const ::dcv::extensions::SetupVirtualChannelRequest& setup_virtual_channel_request(const Request* msg);
  static const ::dcv::extensions::CloseVirtualChannelRequest& close_virtual_channel_request(const Request* msg);
  static const ::dcv::extensions::SetCursorPointRequest& set_cursor_point_request(const Request* msg);
  static const ::dcv::extensions::GetStreamingViewsRequest& get_streaming_views_request(const Request* msg);
  static const ::dcv::extensions::IsPointInsideStreamingViewsRequest& is_point_inside_streaming_views_request(const Request* msg);
};

const ::dcv::extensions::GetDcvInfoRequest& Request::_Internal::get_dcv_info_request(const Request* msg) {
  return *msg->_impl_.request_.get_dcv_info_request_;
}
const ::dcv::extensions::GetManifestRequest& Request::_Internal::get_manifest_request(const Request* msg) {
  return *msg->_impl_.request_.get_manifest_request_;
}
const ::dcv::extensions::SetupVirtualChannelRequest& Request::_Internal::setup_virtual_channel_request(const Request* msg) {
  return *msg->_impl_.request_.setup_virtual_channel_request_;
}
const ::dcv::extensions::CloseVirtualChannelRequest& Request::_Internal::close_virtual_channel_request(const Request* msg) {
  return *msg->_impl_.request_.close_virtual_channel_request_;
}
const ::dcv::extensions::SetCursorPointRequest& Request::_Internal::set_cursor_point_request(const Request* msg) {
  return *msg->_impl_.request_.set_cursor_point_request_;
}
const ::dcv::extensions::GetStreamingViewsRequest& Request::_Internal::get_streaming_views_request(const Request* msg) {
  return *msg->_impl_.request_.get_streaming_views_request_;
}
const ::dcv::extensions::IsPointInsideStreamingViewsRequest& Request::_Internal::is_point_inside_streaming_views_request(const Request* msg) {
  return *msg->_impl_.request_.is_point_inside_streaming_views_request_;
}
void Request::set_allocated_get_dcv_info_request(::dcv::extensions::GetDcvInfoRequest* get_dcv_info_request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_request();
  if (get_dcv_info_request) {
    ::google::protobuf::Arena* submessage_arena = get_dcv_info_request->GetArena();
    if (message_arena != submessage_arena) {
      get_dcv_info_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, get_dcv_info_request, submessage_arena);
    }
    set_has_get_dcv_info_request();
    _impl_.request_.get_dcv_info_request_ = get_dcv_info_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.get_dcv_info_request)
}
void Request::set_allocated_get_manifest_request(::dcv::extensions::GetManifestRequest* get_manifest_request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_request();
  if (get_manifest_request) {
    ::google::protobuf::Arena* submessage_arena = get_manifest_request->GetArena();
    if (message_arena != submessage_arena) {
      get_manifest_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, get_manifest_request, submessage_arena);
    }
    set_has_get_manifest_request();
    _impl_.request_.get_manifest_request_ = get_manifest_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.get_manifest_request)
}
void Request::set_allocated_setup_virtual_channel_request(::dcv::extensions::SetupVirtualChannelRequest* setup_virtual_channel_request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_request();
  if (setup_virtual_channel_request) {
    ::google::protobuf::Arena* submessage_arena = setup_virtual_channel_request->GetArena();
    if (message_arena != submessage_arena) {
      setup_virtual_channel_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, setup_virtual_channel_request, submessage_arena);
    }
    set_has_setup_virtual_channel_request();
    _impl_.request_.setup_virtual_channel_request_ = setup_virtual_channel_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.setup_virtual_channel_request)
}
void Request::set_allocated_close_virtual_channel_request(::dcv::extensions::CloseVirtualChannelRequest* close_virtual_channel_request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_request();
  if (close_virtual_channel_request) {
    ::google::protobuf::Arena* submessage_arena = close_virtual_channel_request->GetArena();
    if (message_arena != submessage_arena) {
      close_virtual_channel_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, close_virtual_channel_request, submessage_arena);
    }
    set_has_close_virtual_channel_request();
    _impl_.request_.close_virtual_channel_request_ = close_virtual_channel_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.close_virtual_channel_request)
}
void Request::set_allocated_set_cursor_point_request(::dcv::extensions::SetCursorPointRequest* set_cursor_point_request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_request();
  if (set_cursor_point_request) {
    ::google::protobuf::Arena* submessage_arena = set_cursor_point_request->GetArena();
    if (message_arena != submessage_arena) {
      set_cursor_point_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, set_cursor_point_request, submessage_arena);
    }
    set_has_set_cursor_point_request();
    _impl_.request_.set_cursor_point_request_ = set_cursor_point_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.set_cursor_point_request)
}
void Request::set_allocated_get_streaming_views_request(::dcv::extensions::GetStreamingViewsRequest* get_streaming_views_request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_request();
  if (get_streaming_views_request) {
    ::google::protobuf::Arena* submessage_arena = get_streaming_views_request->GetArena();
    if (message_arena != submessage_arena) {
      get_streaming_views_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, get_streaming_views_request, submessage_arena);
    }
    set_has_get_streaming_views_request();
    _impl_.request_.get_streaming_views_request_ = get_streaming_views_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.get_streaming_views_request)
}
void Request::set_allocated_is_point_inside_streaming_views_request(::dcv::extensions::IsPointInsideStreamingViewsRequest* is_point_inside_streaming_views_request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_request();
  if (is_point_inside_streaming_views_request) {
    ::google::protobuf::Arena* submessage_arena = is_point_inside_streaming_views_request->GetArena();
    if (message_arena != submessage_arena) {
      is_point_inside_streaming_views_request = ::google::protobuf::internal::GetOwnedMessage(message_arena, is_point_inside_streaming_views_request, submessage_arena);
    }
    set_has_is_point_inside_streaming_views_request();
    _impl_.request_.is_point_inside_streaming_views_request_ = is_point_inside_streaming_views_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.is_point_inside_streaming_views_request)
}
Request::Request(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.Request)
}
inline PROTOBUF_NDEBUG_INLINE Request::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : request_id_(arena, from.request_id_),
        request_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

Request::Request(
    ::google::protobuf::Arena* arena,
    const Request& from)
    : ::google::protobuf::Message(arena) {
  Request* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (request_case()) {
    case REQUEST_NOT_SET:
      break;
      case kGetDcvInfoRequest:
        _impl_.request_.get_dcv_info_request_ = CreateMaybeMessage<::dcv::extensions::GetDcvInfoRequest>(arena, *from._impl_.request_.get_dcv_info_request_);
        break;
      case kGetManifestRequest:
        _impl_.request_.get_manifest_request_ = CreateMaybeMessage<::dcv::extensions::GetManifestRequest>(arena, *from._impl_.request_.get_manifest_request_);
        break;
      case kSetupVirtualChannelRequest:
        _impl_.request_.setup_virtual_channel_request_ = CreateMaybeMessage<::dcv::extensions::SetupVirtualChannelRequest>(arena, *from._impl_.request_.setup_virtual_channel_request_);
        break;
      case kCloseVirtualChannelRequest:
        _impl_.request_.close_virtual_channel_request_ = CreateMaybeMessage<::dcv::extensions::CloseVirtualChannelRequest>(arena, *from._impl_.request_.close_virtual_channel_request_);
        break;
      case kSetCursorPointRequest:
        _impl_.request_.set_cursor_point_request_ = CreateMaybeMessage<::dcv::extensions::SetCursorPointRequest>(arena, *from._impl_.request_.set_cursor_point_request_);
        break;
      case kGetStreamingViewsRequest:
        _impl_.request_.get_streaming_views_request_ = CreateMaybeMessage<::dcv::extensions::GetStreamingViewsRequest>(arena, *from._impl_.request_.get_streaming_views_request_);
        break;
      case kIsPointInsideStreamingViewsRequest:
        _impl_.request_.is_point_inside_streaming_views_request_ = CreateMaybeMessage<::dcv::extensions::IsPointInsideStreamingViewsRequest>(arena, *from._impl_.request_.is_point_inside_streaming_views_request_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:dcv.extensions.Request)
}
inline PROTOBUF_NDEBUG_INLINE Request::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : request_id_(arena),
        request_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void Request::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Request::~Request() {
  // @@protoc_insertion_point(destructor:dcv.extensions.Request)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Request::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.request_id_.Destroy();
  if (has_request()) {
    clear_request();
  }
  _impl_.~Impl_();
}

void Request::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:dcv.extensions.Request)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (request_case()) {
    case kGetDcvInfoRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.request_.get_dcv_info_request_;
      }
      break;
    }
    case kGetManifestRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.request_.get_manifest_request_;
      }
      break;
    }
    case kSetupVirtualChannelRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.request_.setup_virtual_channel_request_;
      }
      break;
    }
    case kCloseVirtualChannelRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.request_.close_virtual_channel_request_;
      }
      break;
    }
    case kSetCursorPointRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.request_.set_cursor_point_request_;
      }
      break;
    }
    case kGetStreamingViewsRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.request_.get_streaming_views_request_;
      }
      break;
    }
    case kIsPointInsideStreamingViewsRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.request_.is_point_inside_streaming_views_request_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}


PROTOBUF_NOINLINE void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.Request)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  clear_request();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Request::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 8, 7, 49, 2> Request::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    32, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    535296510,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    7,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Request_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string request_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Request, _impl_.request_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string request_id = 1;
    {PROTOBUF_FIELD_OFFSET(Request, _impl_.request_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .dcv.extensions.GetDcvInfoRequest get_dcv_info_request = 10;
    {PROTOBUF_FIELD_OFFSET(Request, _impl_.request_.get_dcv_info_request_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvDefault)},
    // .dcv.extensions.GetManifestRequest get_manifest_request = 11;
    {PROTOBUF_FIELD_OFFSET(Request, _impl_.request_.get_manifest_request_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvDefault)},
    // .dcv.extensions.SetupVirtualChannelRequest setup_virtual_channel_request = 20;
    {PROTOBUF_FIELD_OFFSET(Request, _impl_.request_.setup_virtual_channel_request_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .dcv.extensions.CloseVirtualChannelRequest close_virtual_channel_request = 21;
    {PROTOBUF_FIELD_OFFSET(Request, _impl_.request_.close_virtual_channel_request_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .dcv.extensions.SetCursorPointRequest set_cursor_point_request = 30;
    {PROTOBUF_FIELD_OFFSET(Request, _impl_.request_.set_cursor_point_request_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .dcv.extensions.GetStreamingViewsRequest get_streaming_views_request = 31;
    {PROTOBUF_FIELD_OFFSET(Request, _impl_.request_.get_streaming_views_request_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvDefault)},
    // .dcv.extensions.IsPointInsideStreamingViewsRequest is_point_inside_streaming_views_request = 32;
    {PROTOBUF_FIELD_OFFSET(Request, _impl_.request_.is_point_inside_streaming_views_request_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::FieldAuxDefaultMessage{}, &::dcv::extensions::_GetDcvInfoRequest_default_instance_},
    {::_pbi::FieldAuxDefaultMessage{}, &::dcv::extensions::_GetManifestRequest_default_instance_},
    {::_pbi::TcParser::GetTable<::dcv::extensions::SetupVirtualChannelRequest>()},
    {::_pbi::TcParser::GetTable<::dcv::extensions::CloseVirtualChannelRequest>()},
    {::_pbi::TcParser::GetTable<::dcv::extensions::SetCursorPointRequest>()},
    {::_pbi::FieldAuxDefaultMessage{}, &::dcv::extensions::_GetStreamingViewsRequest_default_instance_},
    {::_pbi::TcParser::GetTable<::dcv::extensions::IsPointInsideStreamingViewsRequest>()},
  }}, {{
    "\26\12\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "dcv.extensions.Request"
    "request_id"
  }},
};

::uint8_t* Request::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.Request)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    const std::string& _s = this->_internal_request_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dcv.extensions.Request.request_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  switch (request_case()) {
    case kGetDcvInfoRequest: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          10, _Internal::get_dcv_info_request(this),
          _Internal::get_dcv_info_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kGetManifestRequest: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          11, _Internal::get_manifest_request(this),
          _Internal::get_manifest_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kSetupVirtualChannelRequest: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          20, _Internal::setup_virtual_channel_request(this),
          _Internal::setup_virtual_channel_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kCloseVirtualChannelRequest: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          21, _Internal::close_virtual_channel_request(this),
          _Internal::close_virtual_channel_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kSetCursorPointRequest: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          30, _Internal::set_cursor_point_request(this),
          _Internal::set_cursor_point_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kGetStreamingViewsRequest: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          31, _Internal::get_streaming_views_request(this),
          _Internal::get_streaming_views_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kIsPointInsideStreamingViewsRequest: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          32, _Internal::is_point_inside_streaming_views_request(this),
          _Internal::is_point_inside_streaming_views_request(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.Request)
  return target;
}

::size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.Request)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_request_id());
  }

  switch (request_case()) {
    // .dcv.extensions.GetDcvInfoRequest get_dcv_info_request = 10;
    case kGetDcvInfoRequest: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.request_.get_dcv_info_request_);
      break;
    }
    // .dcv.extensions.GetManifestRequest get_manifest_request = 11;
    case kGetManifestRequest: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.request_.get_manifest_request_);
      break;
    }
    // .dcv.extensions.SetupVirtualChannelRequest setup_virtual_channel_request = 20;
    case kSetupVirtualChannelRequest: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.request_.setup_virtual_channel_request_);
      break;
    }
    // .dcv.extensions.CloseVirtualChannelRequest close_virtual_channel_request = 21;
    case kCloseVirtualChannelRequest: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.request_.close_virtual_channel_request_);
      break;
    }
    // .dcv.extensions.SetCursorPointRequest set_cursor_point_request = 30;
    case kSetCursorPointRequest: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.request_.set_cursor_point_request_);
      break;
    }
    // .dcv.extensions.GetStreamingViewsRequest get_streaming_views_request = 31;
    case kGetStreamingViewsRequest: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.request_.get_streaming_views_request_);
      break;
    }
    // .dcv.extensions.IsPointInsideStreamingViewsRequest is_point_inside_streaming_views_request = 32;
    case kIsPointInsideStreamingViewsRequest: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.request_.is_point_inside_streaming_views_request_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Request::_class_data_ = {
    Request::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Request::GetClassData() const {
  return &_class_data_;
}

void Request::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Request*>(&to_msg);
  auto& from = static_cast<const Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.Request)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  switch (from.request_case()) {
    case kGetDcvInfoRequest: {
      _this->_internal_mutable_get_dcv_info_request()->::dcv::extensions::GetDcvInfoRequest::MergeFrom(
          from._internal_get_dcv_info_request());
      break;
    }
    case kGetManifestRequest: {
      _this->_internal_mutable_get_manifest_request()->::dcv::extensions::GetManifestRequest::MergeFrom(
          from._internal_get_manifest_request());
      break;
    }
    case kSetupVirtualChannelRequest: {
      _this->_internal_mutable_setup_virtual_channel_request()->::dcv::extensions::SetupVirtualChannelRequest::MergeFrom(
          from._internal_setup_virtual_channel_request());
      break;
    }
    case kCloseVirtualChannelRequest: {
      _this->_internal_mutable_close_virtual_channel_request()->::dcv::extensions::CloseVirtualChannelRequest::MergeFrom(
          from._internal_close_virtual_channel_request());
      break;
    }
    case kSetCursorPointRequest: {
      _this->_internal_mutable_set_cursor_point_request()->::dcv::extensions::SetCursorPointRequest::MergeFrom(
          from._internal_set_cursor_point_request());
      break;
    }
    case kGetStreamingViewsRequest: {
      _this->_internal_mutable_get_streaming_views_request()->::dcv::extensions::GetStreamingViewsRequest::MergeFrom(
          from._internal_get_streaming_views_request());
      break;
    }
    case kIsPointInsideStreamingViewsRequest: {
      _this->_internal_mutable_is_point_inside_streaming_views_request()->::dcv::extensions::IsPointInsideStreamingViewsRequest::MergeFrom(
          from._internal_is_point_inside_streaming_views_request());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Request::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Request::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Request::InternalSwap(Request* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.request_id_, &other->_impl_.request_id_, arena);
  swap(_impl_.request_, other->_impl_.request_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[23]);
}
// ===================================================================

class Response::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::Response, _impl_._oneof_case_);
  static const ::dcv::extensions::GetDcvInfoResponse& get_dcv_info_response(const Response* msg);
  static const ::dcv::extensions::GetManifestResponse& get_manifest_response(const Response* msg);
  static const ::dcv::extensions::SetupVirtualChannelResponse& setup_virtual_channel_response(const Response* msg);
  static const ::dcv::extensions::CloseVirtualChannelResponse& close_virtual_channel_response(const Response* msg);
  static const ::dcv::extensions::SetCursorPointResponse& set_cursor_point_response(const Response* msg);
  static const ::dcv::extensions::GetStreamingViewsResponse& get_streaming_views_response(const Response* msg);
  static const ::dcv::extensions::IsPointInsideStreamingViewsResponse& is_point_inside_streaming_views_response(const Response* msg);
};

const ::dcv::extensions::GetDcvInfoResponse& Response::_Internal::get_dcv_info_response(const Response* msg) {
  return *msg->_impl_.response_.get_dcv_info_response_;
}
const ::dcv::extensions::GetManifestResponse& Response::_Internal::get_manifest_response(const Response* msg) {
  return *msg->_impl_.response_.get_manifest_response_;
}
const ::dcv::extensions::SetupVirtualChannelResponse& Response::_Internal::setup_virtual_channel_response(const Response* msg) {
  return *msg->_impl_.response_.setup_virtual_channel_response_;
}
const ::dcv::extensions::CloseVirtualChannelResponse& Response::_Internal::close_virtual_channel_response(const Response* msg) {
  return *msg->_impl_.response_.close_virtual_channel_response_;
}
const ::dcv::extensions::SetCursorPointResponse& Response::_Internal::set_cursor_point_response(const Response* msg) {
  return *msg->_impl_.response_.set_cursor_point_response_;
}
const ::dcv::extensions::GetStreamingViewsResponse& Response::_Internal::get_streaming_views_response(const Response* msg) {
  return *msg->_impl_.response_.get_streaming_views_response_;
}
const ::dcv::extensions::IsPointInsideStreamingViewsResponse& Response::_Internal::is_point_inside_streaming_views_response(const Response* msg) {
  return *msg->_impl_.response_.is_point_inside_streaming_views_response_;
}
void Response::set_allocated_get_dcv_info_response(::dcv::extensions::GetDcvInfoResponse* get_dcv_info_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (get_dcv_info_response) {
    ::google::protobuf::Arena* submessage_arena = get_dcv_info_response->GetArena();
    if (message_arena != submessage_arena) {
      get_dcv_info_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, get_dcv_info_response, submessage_arena);
    }
    set_has_get_dcv_info_response();
    _impl_.response_.get_dcv_info_response_ = get_dcv_info_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.get_dcv_info_response)
}
void Response::set_allocated_get_manifest_response(::dcv::extensions::GetManifestResponse* get_manifest_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (get_manifest_response) {
    ::google::protobuf::Arena* submessage_arena = get_manifest_response->GetArena();
    if (message_arena != submessage_arena) {
      get_manifest_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, get_manifest_response, submessage_arena);
    }
    set_has_get_manifest_response();
    _impl_.response_.get_manifest_response_ = get_manifest_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.get_manifest_response)
}
void Response::set_allocated_setup_virtual_channel_response(::dcv::extensions::SetupVirtualChannelResponse* setup_virtual_channel_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (setup_virtual_channel_response) {
    ::google::protobuf::Arena* submessage_arena = setup_virtual_channel_response->GetArena();
    if (message_arena != submessage_arena) {
      setup_virtual_channel_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, setup_virtual_channel_response, submessage_arena);
    }
    set_has_setup_virtual_channel_response();
    _impl_.response_.setup_virtual_channel_response_ = setup_virtual_channel_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.setup_virtual_channel_response)
}
void Response::set_allocated_close_virtual_channel_response(::dcv::extensions::CloseVirtualChannelResponse* close_virtual_channel_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (close_virtual_channel_response) {
    ::google::protobuf::Arena* submessage_arena = close_virtual_channel_response->GetArena();
    if (message_arena != submessage_arena) {
      close_virtual_channel_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, close_virtual_channel_response, submessage_arena);
    }
    set_has_close_virtual_channel_response();
    _impl_.response_.close_virtual_channel_response_ = close_virtual_channel_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.close_virtual_channel_response)
}
void Response::set_allocated_set_cursor_point_response(::dcv::extensions::SetCursorPointResponse* set_cursor_point_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (set_cursor_point_response) {
    ::google::protobuf::Arena* submessage_arena = set_cursor_point_response->GetArena();
    if (message_arena != submessage_arena) {
      set_cursor_point_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, set_cursor_point_response, submessage_arena);
    }
    set_has_set_cursor_point_response();
    _impl_.response_.set_cursor_point_response_ = set_cursor_point_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.set_cursor_point_response)
}
void Response::set_allocated_get_streaming_views_response(::dcv::extensions::GetStreamingViewsResponse* get_streaming_views_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (get_streaming_views_response) {
    ::google::protobuf::Arena* submessage_arena = get_streaming_views_response->GetArena();
    if (message_arena != submessage_arena) {
      get_streaming_views_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, get_streaming_views_response, submessage_arena);
    }
    set_has_get_streaming_views_response();
    _impl_.response_.get_streaming_views_response_ = get_streaming_views_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.get_streaming_views_response)
}
void Response::set_allocated_is_point_inside_streaming_views_response(::dcv::extensions::IsPointInsideStreamingViewsResponse* is_point_inside_streaming_views_response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_response();
  if (is_point_inside_streaming_views_response) {
    ::google::protobuf::Arena* submessage_arena = is_point_inside_streaming_views_response->GetArena();
    if (message_arena != submessage_arena) {
      is_point_inside_streaming_views_response = ::google::protobuf::internal::GetOwnedMessage(message_arena, is_point_inside_streaming_views_response, submessage_arena);
    }
    set_has_is_point_inside_streaming_views_response();
    _impl_.response_.is_point_inside_streaming_views_response_ = is_point_inside_streaming_views_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.is_point_inside_streaming_views_response)
}
Response::Response(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.Response)
}
inline PROTOBUF_NDEBUG_INLINE Response::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : request_id_(arena, from.request_id_),
        response_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

Response::Response(
    ::google::protobuf::Arena* arena,
    const Response& from)
    : ::google::protobuf::Message(arena) {
  Response* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.status_ = from._impl_.status_;
  switch (response_case()) {
    case RESPONSE_NOT_SET:
      break;
      case kGetDcvInfoResponse:
        _impl_.response_.get_dcv_info_response_ = CreateMaybeMessage<::dcv::extensions::GetDcvInfoResponse>(arena, *from._impl_.response_.get_dcv_info_response_);
        break;
      case kGetManifestResponse:
        _impl_.response_.get_manifest_response_ = CreateMaybeMessage<::dcv::extensions::GetManifestResponse>(arena, *from._impl_.response_.get_manifest_response_);
        break;
      case kSetupVirtualChannelResponse:
        _impl_.response_.setup_virtual_channel_response_ = CreateMaybeMessage<::dcv::extensions::SetupVirtualChannelResponse>(arena, *from._impl_.response_.setup_virtual_channel_response_);
        break;
      case kCloseVirtualChannelResponse:
        _impl_.response_.close_virtual_channel_response_ = CreateMaybeMessage<::dcv::extensions::CloseVirtualChannelResponse>(arena, *from._impl_.response_.close_virtual_channel_response_);
        break;
      case kSetCursorPointResponse:
        _impl_.response_.set_cursor_point_response_ = CreateMaybeMessage<::dcv::extensions::SetCursorPointResponse>(arena, *from._impl_.response_.set_cursor_point_response_);
        break;
      case kGetStreamingViewsResponse:
        _impl_.response_.get_streaming_views_response_ = CreateMaybeMessage<::dcv::extensions::GetStreamingViewsResponse>(arena, *from._impl_.response_.get_streaming_views_response_);
        break;
      case kIsPointInsideStreamingViewsResponse:
        _impl_.response_.is_point_inside_streaming_views_response_ = CreateMaybeMessage<::dcv::extensions::IsPointInsideStreamingViewsResponse>(arena, *from._impl_.response_.is_point_inside_streaming_views_response_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:dcv.extensions.Response)
}
inline PROTOBUF_NDEBUG_INLINE Response::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : request_id_(arena),
        response_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void Response::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.status_ = {};
}
Response::~Response() {
  // @@protoc_insertion_point(destructor:dcv.extensions.Response)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Response::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.request_id_.Destroy();
  if (has_response()) {
    clear_response();
  }
  _impl_.~Impl_();
}

void Response::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:dcv.extensions.Response)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (response_case()) {
    case kGetDcvInfoResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.get_dcv_info_response_;
      }
      break;
    }
    case kGetManifestResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.get_manifest_response_;
      }
      break;
    }
    case kSetupVirtualChannelResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.setup_virtual_channel_response_;
      }
      break;
    }
    case kCloseVirtualChannelResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.close_virtual_channel_response_;
      }
      break;
    }
    case kSetCursorPointResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.set_cursor_point_response_;
      }
      break;
    }
    case kGetStreamingViewsResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.get_streaming_views_response_;
      }
      break;
    }
    case kIsPointInsideStreamingViewsResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.response_.is_point_inside_streaming_views_response_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}


PROTOBUF_NOINLINE void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.Response)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.status_ = 0;
  clear_response();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Response::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 9, 7, 50, 2> Response::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    32, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    535296508,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    7,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Response_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .dcv.extensions.Response.Status status = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Response, _impl_.status_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Response, _impl_.status_)}},
    // string request_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Response, _impl_.request_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string request_id = 1;
    {PROTOBUF_FIELD_OFFSET(Response, _impl_.request_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .dcv.extensions.Response.Status status = 2;
    {PROTOBUF_FIELD_OFFSET(Response, _impl_.status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .dcv.extensions.GetDcvInfoResponse get_dcv_info_response = 10;
    {PROTOBUF_FIELD_OFFSET(Response, _impl_.response_.get_dcv_info_response_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .dcv.extensions.GetManifestResponse get_manifest_response = 11;
    {PROTOBUF_FIELD_OFFSET(Response, _impl_.response_.get_manifest_response_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .dcv.extensions.SetupVirtualChannelResponse setup_virtual_channel_response = 20;
    {PROTOBUF_FIELD_OFFSET(Response, _impl_.response_.setup_virtual_channel_response_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .dcv.extensions.CloseVirtualChannelResponse close_virtual_channel_response = 21;
    {PROTOBUF_FIELD_OFFSET(Response, _impl_.response_.close_virtual_channel_response_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .dcv.extensions.SetCursorPointResponse set_cursor_point_response = 30;
    {PROTOBUF_FIELD_OFFSET(Response, _impl_.response_.set_cursor_point_response_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvDefault)},
    // .dcv.extensions.GetStreamingViewsResponse get_streaming_views_response = 31;
    {PROTOBUF_FIELD_OFFSET(Response, _impl_.response_.get_streaming_views_response_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .dcv.extensions.IsPointInsideStreamingViewsResponse is_point_inside_streaming_views_response = 32;
    {PROTOBUF_FIELD_OFFSET(Response, _impl_.response_.is_point_inside_streaming_views_response_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::dcv::extensions::GetDcvInfoResponse>()},
    {::_pbi::TcParser::GetTable<::dcv::extensions::GetManifestResponse>()},
    {::_pbi::TcParser::GetTable<::dcv::extensions::SetupVirtualChannelResponse>()},
    {::_pbi::TcParser::GetTable<::dcv::extensions::CloseVirtualChannelResponse>()},
    {::_pbi::FieldAuxDefaultMessage{}, &::dcv::extensions::_SetCursorPointResponse_default_instance_},
    {::_pbi::TcParser::GetTable<::dcv::extensions::GetStreamingViewsResponse>()},
    {::_pbi::TcParser::GetTable<::dcv::extensions::IsPointInsideStreamingViewsResponse>()},
  }}, {{
    "\27\12\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "dcv.extensions.Response"
    "request_id"
  }},
};

::uint8_t* Response::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.Response)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    const std::string& _s = this->_internal_request_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "dcv.extensions.Response.request_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .dcv.extensions.Response.Status status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_status(), target);
  }

  switch (response_case()) {
    case kGetDcvInfoResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          10, _Internal::get_dcv_info_response(this),
          _Internal::get_dcv_info_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kGetManifestResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          11, _Internal::get_manifest_response(this),
          _Internal::get_manifest_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kSetupVirtualChannelResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          20, _Internal::setup_virtual_channel_response(this),
          _Internal::setup_virtual_channel_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kCloseVirtualChannelResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          21, _Internal::close_virtual_channel_response(this),
          _Internal::close_virtual_channel_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kSetCursorPointResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          30, _Internal::set_cursor_point_response(this),
          _Internal::set_cursor_point_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kGetStreamingViewsResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          31, _Internal::get_streaming_views_response(this),
          _Internal::get_streaming_views_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kIsPointInsideStreamingViewsResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          32, _Internal::is_point_inside_streaming_views_response(this),
          _Internal::is_point_inside_streaming_views_response(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.Response)
  return target;
}

::size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.Response)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_request_id());
  }

  // .dcv.extensions.Response.Status status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  switch (response_case()) {
    // .dcv.extensions.GetDcvInfoResponse get_dcv_info_response = 10;
    case kGetDcvInfoResponse: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.response_.get_dcv_info_response_);
      break;
    }
    // .dcv.extensions.GetManifestResponse get_manifest_response = 11;
    case kGetManifestResponse: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.response_.get_manifest_response_);
      break;
    }
    // .dcv.extensions.SetupVirtualChannelResponse setup_virtual_channel_response = 20;
    case kSetupVirtualChannelResponse: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.response_.setup_virtual_channel_response_);
      break;
    }
    // .dcv.extensions.CloseVirtualChannelResponse close_virtual_channel_response = 21;
    case kCloseVirtualChannelResponse: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.response_.close_virtual_channel_response_);
      break;
    }
    // .dcv.extensions.SetCursorPointResponse set_cursor_point_response = 30;
    case kSetCursorPointResponse: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.response_.set_cursor_point_response_);
      break;
    }
    // .dcv.extensions.GetStreamingViewsResponse get_streaming_views_response = 31;
    case kGetStreamingViewsResponse: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.response_.get_streaming_views_response_);
      break;
    }
    // .dcv.extensions.IsPointInsideStreamingViewsResponse is_point_inside_streaming_views_response = 32;
    case kIsPointInsideStreamingViewsResponse: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.response_.is_point_inside_streaming_views_response_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Response::_class_data_ = {
    Response::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Response::GetClassData() const {
  return &_class_data_;
}

void Response::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Response*>(&to_msg);
  auto& from = static_cast<const Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.Response)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  switch (from.response_case()) {
    case kGetDcvInfoResponse: {
      _this->_internal_mutable_get_dcv_info_response()->::dcv::extensions::GetDcvInfoResponse::MergeFrom(
          from._internal_get_dcv_info_response());
      break;
    }
    case kGetManifestResponse: {
      _this->_internal_mutable_get_manifest_response()->::dcv::extensions::GetManifestResponse::MergeFrom(
          from._internal_get_manifest_response());
      break;
    }
    case kSetupVirtualChannelResponse: {
      _this->_internal_mutable_setup_virtual_channel_response()->::dcv::extensions::SetupVirtualChannelResponse::MergeFrom(
          from._internal_setup_virtual_channel_response());
      break;
    }
    case kCloseVirtualChannelResponse: {
      _this->_internal_mutable_close_virtual_channel_response()->::dcv::extensions::CloseVirtualChannelResponse::MergeFrom(
          from._internal_close_virtual_channel_response());
      break;
    }
    case kSetCursorPointResponse: {
      _this->_internal_mutable_set_cursor_point_response()->::dcv::extensions::SetCursorPointResponse::MergeFrom(
          from._internal_set_cursor_point_response());
      break;
    }
    case kGetStreamingViewsResponse: {
      _this->_internal_mutable_get_streaming_views_response()->::dcv::extensions::GetStreamingViewsResponse::MergeFrom(
          from._internal_get_streaming_views_response());
      break;
    }
    case kIsPointInsideStreamingViewsResponse: {
      _this->_internal_mutable_is_point_inside_streaming_views_response()->::dcv::extensions::IsPointInsideStreamingViewsResponse::MergeFrom(
          from._internal_is_point_inside_streaming_views_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Response::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Response::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Response::InternalSwap(Response* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.request_id_, &other->_impl_.request_id_, arena);
  swap(_impl_.status_, other->_impl_.status_);
  swap(_impl_.response_, other->_impl_.response_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[24]);
}
// ===================================================================

class Event::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::Event, _impl_._oneof_case_);
  static const ::dcv::extensions::VirtualChannelReadyEvent& virtual_channel_ready_event(const Event* msg);
  static const ::dcv::extensions::VirtualChannelClosedEvent& virtual_channel_closed_event(const Event* msg);
  static const ::dcv::extensions::StreamingViewsChangedEvent& streaming_views_changed_event(const Event* msg);
};

const ::dcv::extensions::VirtualChannelReadyEvent& Event::_Internal::virtual_channel_ready_event(const Event* msg) {
  return *msg->_impl_.event_.virtual_channel_ready_event_;
}
const ::dcv::extensions::VirtualChannelClosedEvent& Event::_Internal::virtual_channel_closed_event(const Event* msg) {
  return *msg->_impl_.event_.virtual_channel_closed_event_;
}
const ::dcv::extensions::StreamingViewsChangedEvent& Event::_Internal::streaming_views_changed_event(const Event* msg) {
  return *msg->_impl_.event_.streaming_views_changed_event_;
}
void Event::set_allocated_virtual_channel_ready_event(::dcv::extensions::VirtualChannelReadyEvent* virtual_channel_ready_event) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (virtual_channel_ready_event) {
    ::google::protobuf::Arena* submessage_arena = virtual_channel_ready_event->GetArena();
    if (message_arena != submessage_arena) {
      virtual_channel_ready_event = ::google::protobuf::internal::GetOwnedMessage(message_arena, virtual_channel_ready_event, submessage_arena);
    }
    set_has_virtual_channel_ready_event();
    _impl_.event_.virtual_channel_ready_event_ = virtual_channel_ready_event;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Event.virtual_channel_ready_event)
}
void Event::set_allocated_virtual_channel_closed_event(::dcv::extensions::VirtualChannelClosedEvent* virtual_channel_closed_event) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (virtual_channel_closed_event) {
    ::google::protobuf::Arena* submessage_arena = virtual_channel_closed_event->GetArena();
    if (message_arena != submessage_arena) {
      virtual_channel_closed_event = ::google::protobuf::internal::GetOwnedMessage(message_arena, virtual_channel_closed_event, submessage_arena);
    }
    set_has_virtual_channel_closed_event();
    _impl_.event_.virtual_channel_closed_event_ = virtual_channel_closed_event;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Event.virtual_channel_closed_event)
}
void Event::set_allocated_streaming_views_changed_event(::dcv::extensions::StreamingViewsChangedEvent* streaming_views_changed_event) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event();
  if (streaming_views_changed_event) {
    ::google::protobuf::Arena* submessage_arena = streaming_views_changed_event->GetArena();
    if (message_arena != submessage_arena) {
      streaming_views_changed_event = ::google::protobuf::internal::GetOwnedMessage(message_arena, streaming_views_changed_event, submessage_arena);
    }
    set_has_streaming_views_changed_event();
    _impl_.event_.streaming_views_changed_event_ = streaming_views_changed_event;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Event.streaming_views_changed_event)
}
Event::Event(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.Event)
}
inline PROTOBUF_NDEBUG_INLINE Event::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : event_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

Event::Event(
    ::google::protobuf::Arena* arena,
    const Event& from)
    : ::google::protobuf::Message(arena) {
  Event* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (event_case()) {
    case EVENT_NOT_SET:
      break;
      case kVirtualChannelReadyEvent:
        _impl_.event_.virtual_channel_ready_event_ = CreateMaybeMessage<::dcv::extensions::VirtualChannelReadyEvent>(arena, *from._impl_.event_.virtual_channel_ready_event_);
        break;
      case kVirtualChannelClosedEvent:
        _impl_.event_.virtual_channel_closed_event_ = CreateMaybeMessage<::dcv::extensions::VirtualChannelClosedEvent>(arena, *from._impl_.event_.virtual_channel_closed_event_);
        break;
      case kStreamingViewsChangedEvent:
        _impl_.event_.streaming_views_changed_event_ = CreateMaybeMessage<::dcv::extensions::StreamingViewsChangedEvent>(arena, *from._impl_.event_.streaming_views_changed_event_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:dcv.extensions.Event)
}
inline PROTOBUF_NDEBUG_INLINE Event::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : event_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void Event::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Event::~Event() {
  // @@protoc_insertion_point(destructor:dcv.extensions.Event)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Event::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_event()) {
    clear_event();
  }
  _impl_.~Impl_();
}

void Event::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:dcv.extensions.Event)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (event_case()) {
    case kVirtualChannelReadyEvent: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.virtual_channel_ready_event_;
      }
      break;
    }
    case kVirtualChannelClosedEvent: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.virtual_channel_closed_event_;
      }
      break;
    }
    case kStreamingViewsChangedEvent: {
      if (GetArena() == nullptr) {
        delete _impl_.event_.streaming_views_changed_event_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}


PROTOBUF_NOINLINE void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.Event)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_event();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Event::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 3, 3, 0, 2> Event::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    30, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    3757571583,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Event_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .dcv.extensions.VirtualChannelReadyEvent virtual_channel_ready_event = 10;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.event_.virtual_channel_ready_event_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .dcv.extensions.VirtualChannelClosedEvent virtual_channel_closed_event = 20;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.event_.virtual_channel_closed_event_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .dcv.extensions.StreamingViewsChangedEvent streaming_views_changed_event = 30;
    {PROTOBUF_FIELD_OFFSET(Event, _impl_.event_.streaming_views_changed_event_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::dcv::extensions::VirtualChannelReadyEvent>()},
    {::_pbi::TcParser::GetTable<::dcv::extensions::VirtualChannelClosedEvent>()},
    {::_pbi::TcParser::GetTable<::dcv::extensions::StreamingViewsChangedEvent>()},
  }}, {{
  }},
};

::uint8_t* Event::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.Event)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (event_case()) {
    case kVirtualChannelReadyEvent: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          10, _Internal::virtual_channel_ready_event(this),
          _Internal::virtual_channel_ready_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kVirtualChannelClosedEvent: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          20, _Internal::virtual_channel_closed_event(this),
          _Internal::virtual_channel_closed_event(this).GetCachedSize(), target, stream);
      break;
    }
    case kStreamingViewsChangedEvent: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          30, _Internal::streaming_views_changed_event(this),
          _Internal::streaming_views_changed_event(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.Event)
  return target;
}

::size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.Event)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (event_case()) {
    // .dcv.extensions.VirtualChannelReadyEvent virtual_channel_ready_event = 10;
    case kVirtualChannelReadyEvent: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.event_.virtual_channel_ready_event_);
      break;
    }
    // .dcv.extensions.VirtualChannelClosedEvent virtual_channel_closed_event = 20;
    case kVirtualChannelClosedEvent: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.event_.virtual_channel_closed_event_);
      break;
    }
    // .dcv.extensions.StreamingViewsChangedEvent streaming_views_changed_event = 30;
    case kStreamingViewsChangedEvent: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.event_.streaming_views_changed_event_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Event::_class_data_ = {
    Event::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Event::GetClassData() const {
  return &_class_data_;
}

void Event::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Event*>(&to_msg);
  auto& from = static_cast<const Event&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.Event)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.event_case()) {
    case kVirtualChannelReadyEvent: {
      _this->_internal_mutable_virtual_channel_ready_event()->::dcv::extensions::VirtualChannelReadyEvent::MergeFrom(
          from._internal_virtual_channel_ready_event());
      break;
    }
    case kVirtualChannelClosedEvent: {
      _this->_internal_mutable_virtual_channel_closed_event()->::dcv::extensions::VirtualChannelClosedEvent::MergeFrom(
          from._internal_virtual_channel_closed_event());
      break;
    }
    case kStreamingViewsChangedEvent: {
      _this->_internal_mutable_streaming_views_changed_event()->::dcv::extensions::StreamingViewsChangedEvent::MergeFrom(
          from._internal_streaming_views_changed_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Event::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Event::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Event::InternalSwap(Event* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.event_, other->_impl_.event_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Event::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[25]);
}
// ===================================================================

class ExtensionMessage::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::ExtensionMessage, _impl_._oneof_case_);
  static const ::dcv::extensions::Request& request(const ExtensionMessage* msg);
};

const ::dcv::extensions::Request& ExtensionMessage::_Internal::request(const ExtensionMessage* msg) {
  return *msg->_impl_.msg_.request_;
}
void ExtensionMessage::set_allocated_request(::dcv::extensions::Request* request) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg();
  if (request) {
    ::google::protobuf::Arena* submessage_arena = request->GetArena();
    if (message_arena != submessage_arena) {
      request = ::google::protobuf::internal::GetOwnedMessage(message_arena, request, submessage_arena);
    }
    set_has_request();
    _impl_.msg_.request_ = request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.ExtensionMessage.request)
}
ExtensionMessage::ExtensionMessage(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.ExtensionMessage)
}
inline PROTOBUF_NDEBUG_INLINE ExtensionMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : msg_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

ExtensionMessage::ExtensionMessage(
    ::google::protobuf::Arena* arena,
    const ExtensionMessage& from)
    : ::google::protobuf::Message(arena) {
  ExtensionMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (msg_case()) {
    case MSG_NOT_SET:
      break;
      case kRequest:
        _impl_.msg_.request_ = CreateMaybeMessage<::dcv::extensions::Request>(arena, *from._impl_.msg_.request_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:dcv.extensions.ExtensionMessage)
}
inline PROTOBUF_NDEBUG_INLINE ExtensionMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : msg_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void ExtensionMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ExtensionMessage::~ExtensionMessage() {
  // @@protoc_insertion_point(destructor:dcv.extensions.ExtensionMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ExtensionMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
  _impl_.~Impl_();
}

void ExtensionMessage::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:dcv.extensions.ExtensionMessage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (msg_case()) {
    case kRequest: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_.request_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}


PROTOBUF_NOINLINE void ExtensionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.ExtensionMessage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ExtensionMessage::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ExtensionMessage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ExtensionMessage_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .dcv.extensions.Request request = 1;
    {PROTOBUF_FIELD_OFFSET(ExtensionMessage, _impl_.msg_.request_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::dcv::extensions::Request>()},
  }}, {{
  }},
};

::uint8_t* ExtensionMessage::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.ExtensionMessage)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .dcv.extensions.Request request = 1;
  if (msg_case() == kRequest) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.ExtensionMessage)
  return target;
}

::size_t ExtensionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.ExtensionMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (msg_case()) {
    // .dcv.extensions.Request request = 1;
    case kRequest: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.msg_.request_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ExtensionMessage::_class_data_ = {
    ExtensionMessage::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ExtensionMessage::GetClassData() const {
  return &_class_data_;
}

void ExtensionMessage::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ExtensionMessage*>(&to_msg);
  auto& from = static_cast<const ExtensionMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.ExtensionMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kRequest: {
      _this->_internal_mutable_request()->::dcv::extensions::Request::MergeFrom(
          from._internal_request());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ExtensionMessage::CopyFrom(const ExtensionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.ExtensionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ExtensionMessage::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ExtensionMessage::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ExtensionMessage::InternalSwap(ExtensionMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.msg_, other->_impl_.msg_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata ExtensionMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[26]);
}
// ===================================================================

class DcvMessage::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::dcv::extensions::DcvMessage, _impl_._oneof_case_);
  static const ::dcv::extensions::Response& response(const DcvMessage* msg);
  static const ::dcv::extensions::Event& event(const DcvMessage* msg);
};

const ::dcv::extensions::Response& DcvMessage::_Internal::response(const DcvMessage* msg) {
  return *msg->_impl_.msg_.response_;
}
const ::dcv::extensions::Event& DcvMessage::_Internal::event(const DcvMessage* msg) {
  return *msg->_impl_.msg_.event_;
}
void DcvMessage::set_allocated_response(::dcv::extensions::Response* response) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg();
  if (response) {
    ::google::protobuf::Arena* submessage_arena = response->GetArena();
    if (message_arena != submessage_arena) {
      response = ::google::protobuf::internal::GetOwnedMessage(message_arena, response, submessage_arena);
    }
    set_has_response();
    _impl_.msg_.response_ = response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.DcvMessage.response)
}
void DcvMessage::set_allocated_event(::dcv::extensions::Event* event) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_msg();
  if (event) {
    ::google::protobuf::Arena* submessage_arena = event->GetArena();
    if (message_arena != submessage_arena) {
      event = ::google::protobuf::internal::GetOwnedMessage(message_arena, event, submessage_arena);
    }
    set_has_event();
    _impl_.msg_.event_ = event;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.DcvMessage.event)
}
DcvMessage::DcvMessage(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.DcvMessage)
}
inline PROTOBUF_NDEBUG_INLINE DcvMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : msg_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

DcvMessage::DcvMessage(
    ::google::protobuf::Arena* arena,
    const DcvMessage& from)
    : ::google::protobuf::Message(arena) {
  DcvMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (msg_case()) {
    case MSG_NOT_SET:
      break;
      case kResponse:
        _impl_.msg_.response_ = CreateMaybeMessage<::dcv::extensions::Response>(arena, *from._impl_.msg_.response_);
        break;
      case kEvent:
        _impl_.msg_.event_ = CreateMaybeMessage<::dcv::extensions::Event>(arena, *from._impl_.msg_.event_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:dcv.extensions.DcvMessage)
}
inline PROTOBUF_NDEBUG_INLINE DcvMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : msg_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void DcvMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DcvMessage::~DcvMessage() {
  // @@protoc_insertion_point(destructor:dcv.extensions.DcvMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DcvMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
  _impl_.~Impl_();
}

void DcvMessage::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:dcv.extensions.DcvMessage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (msg_case()) {
    case kResponse: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_.response_;
      }
      break;
    }
    case kEvent: {
      if (GetArena() == nullptr) {
        delete _impl_.msg_.event_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}


PROTOBUF_NOINLINE void DcvMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.DcvMessage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DcvMessage::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 2, 0, 2> DcvMessage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967289,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DcvMessage_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .dcv.extensions.Response response = 2;
    {PROTOBUF_FIELD_OFFSET(DcvMessage, _impl_.msg_.response_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .dcv.extensions.Event event = 3;
    {PROTOBUF_FIELD_OFFSET(DcvMessage, _impl_.msg_.event_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::dcv::extensions::Response>()},
    {::_pbi::TcParser::GetTable<::dcv::extensions::Event>()},
  }}, {{
  }},
};

::uint8_t* DcvMessage::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.DcvMessage)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (msg_case()) {
    case kResponse: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, _Internal::response(this),
          _Internal::response(this).GetCachedSize(), target, stream);
      break;
    }
    case kEvent: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, _Internal::event(this),
          _Internal::event(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.DcvMessage)
  return target;
}

::size_t DcvMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.DcvMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (msg_case()) {
    // .dcv.extensions.Response response = 2;
    case kResponse: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.msg_.response_);
      break;
    }
    // .dcv.extensions.Event event = 3;
    case kEvent: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.msg_.event_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DcvMessage::_class_data_ = {
    DcvMessage::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* DcvMessage::GetClassData() const {
  return &_class_data_;
}

void DcvMessage::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DcvMessage*>(&to_msg);
  auto& from = static_cast<const DcvMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.DcvMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kResponse: {
      _this->_internal_mutable_response()->::dcv::extensions::Response::MergeFrom(
          from._internal_response());
      break;
    }
    case kEvent: {
      _this->_internal_mutable_event()->::dcv::extensions::Event::MergeFrom(
          from._internal_event());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DcvMessage::CopyFrom(const DcvMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.DcvMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DcvMessage::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DcvMessage::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DcvMessage::InternalSwap(DcvMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.msg_, other->_impl_.msg_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata DcvMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_extensions_2eproto_getter, &descriptor_table_extensions_2eproto_once,
      file_level_metadata_extensions_2eproto[27]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace extensions
}  // namespace dcv
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
