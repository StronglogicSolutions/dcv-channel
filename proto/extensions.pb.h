// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: extensions.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_extensions_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_extensions_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_extensions_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_extensions_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_extensions_2eproto;
namespace dcv {
namespace extensions {
class CloseVirtualChannelRequest;
struct CloseVirtualChannelRequestDefaultTypeInternal;
extern CloseVirtualChannelRequestDefaultTypeInternal _CloseVirtualChannelRequest_default_instance_;
class CloseVirtualChannelResponse;
struct CloseVirtualChannelResponseDefaultTypeInternal;
extern CloseVirtualChannelResponseDefaultTypeInternal _CloseVirtualChannelResponse_default_instance_;
class DcvMessage;
struct DcvMessageDefaultTypeInternal;
extern DcvMessageDefaultTypeInternal _DcvMessage_default_instance_;
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class ExtensionMessage;
struct ExtensionMessageDefaultTypeInternal;
extern ExtensionMessageDefaultTypeInternal _ExtensionMessage_default_instance_;
class GetDcvInfoRequest;
struct GetDcvInfoRequestDefaultTypeInternal;
extern GetDcvInfoRequestDefaultTypeInternal _GetDcvInfoRequest_default_instance_;
class GetDcvInfoResponse;
struct GetDcvInfoResponseDefaultTypeInternal;
extern GetDcvInfoResponseDefaultTypeInternal _GetDcvInfoResponse_default_instance_;
class GetManifestRequest;
struct GetManifestRequestDefaultTypeInternal;
extern GetManifestRequestDefaultTypeInternal _GetManifestRequest_default_instance_;
class GetManifestResponse;
struct GetManifestResponseDefaultTypeInternal;
extern GetManifestResponseDefaultTypeInternal _GetManifestResponse_default_instance_;
class GetStreamingViewsRequest;
struct GetStreamingViewsRequestDefaultTypeInternal;
extern GetStreamingViewsRequestDefaultTypeInternal _GetStreamingViewsRequest_default_instance_;
class GetStreamingViewsResponse;
struct GetStreamingViewsResponseDefaultTypeInternal;
extern GetStreamingViewsResponseDefaultTypeInternal _GetStreamingViewsResponse_default_instance_;
class IsPointInsideStreamingViewsRequest;
struct IsPointInsideStreamingViewsRequestDefaultTypeInternal;
extern IsPointInsideStreamingViewsRequestDefaultTypeInternal _IsPointInsideStreamingViewsRequest_default_instance_;
class IsPointInsideStreamingViewsResponse;
struct IsPointInsideStreamingViewsResponseDefaultTypeInternal;
extern IsPointInsideStreamingViewsResponseDefaultTypeInternal _IsPointInsideStreamingViewsResponse_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Rect;
struct RectDefaultTypeInternal;
extern RectDefaultTypeInternal _Rect_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class SetCursorPointRequest;
struct SetCursorPointRequestDefaultTypeInternal;
extern SetCursorPointRequestDefaultTypeInternal _SetCursorPointRequest_default_instance_;
class SetCursorPointResponse;
struct SetCursorPointResponseDefaultTypeInternal;
extern SetCursorPointResponseDefaultTypeInternal _SetCursorPointResponse_default_instance_;
class SetupVirtualChannelRequest;
struct SetupVirtualChannelRequestDefaultTypeInternal;
extern SetupVirtualChannelRequestDefaultTypeInternal _SetupVirtualChannelRequest_default_instance_;
class SetupVirtualChannelResponse;
struct SetupVirtualChannelResponseDefaultTypeInternal;
extern SetupVirtualChannelResponseDefaultTypeInternal _SetupVirtualChannelResponse_default_instance_;
class SoftwareInfo;
struct SoftwareInfoDefaultTypeInternal;
extern SoftwareInfoDefaultTypeInternal _SoftwareInfo_default_instance_;
class SoftwareInfo_VersionNumber;
struct SoftwareInfo_VersionNumberDefaultTypeInternal;
extern SoftwareInfo_VersionNumberDefaultTypeInternal _SoftwareInfo_VersionNumber_default_instance_;
class StreamingViews;
struct StreamingViewsDefaultTypeInternal;
extern StreamingViewsDefaultTypeInternal _StreamingViews_default_instance_;
class StreamingViewsChangedEvent;
struct StreamingViewsChangedEventDefaultTypeInternal;
extern StreamingViewsChangedEventDefaultTypeInternal _StreamingViewsChangedEvent_default_instance_;
class StreamingViews_StreamingView;
struct StreamingViews_StreamingViewDefaultTypeInternal;
extern StreamingViews_StreamingViewDefaultTypeInternal _StreamingViews_StreamingView_default_instance_;
class VirtualChannelClosedEvent;
struct VirtualChannelClosedEventDefaultTypeInternal;
extern VirtualChannelClosedEventDefaultTypeInternal _VirtualChannelClosedEvent_default_instance_;
class VirtualChannelReadyEvent;
struct VirtualChannelReadyEventDefaultTypeInternal;
extern VirtualChannelReadyEventDefaultTypeInternal _VirtualChannelReadyEvent_default_instance_;
}  // namespace extensions
}  // namespace dcv
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace dcv {
namespace extensions {
enum GetDcvInfoResponse_DcvRole : int {
  GetDcvInfoResponse_DcvRole_Server = 0,
  GetDcvInfoResponse_DcvRole_Client = 1,
  GetDcvInfoResponse_DcvRole_GetDcvInfoResponse_DcvRole_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GetDcvInfoResponse_DcvRole_GetDcvInfoResponse_DcvRole_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GetDcvInfoResponse_DcvRole_IsValid(int value);
extern const uint32_t GetDcvInfoResponse_DcvRole_internal_data_[];
constexpr GetDcvInfoResponse_DcvRole GetDcvInfoResponse_DcvRole_DcvRole_MIN = static_cast<GetDcvInfoResponse_DcvRole>(0);
constexpr GetDcvInfoResponse_DcvRole GetDcvInfoResponse_DcvRole_DcvRole_MAX = static_cast<GetDcvInfoResponse_DcvRole>(1);
constexpr int GetDcvInfoResponse_DcvRole_DcvRole_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
GetDcvInfoResponse_DcvRole_descriptor();
template <typename T>
const std::string& GetDcvInfoResponse_DcvRole_Name(T value) {
  static_assert(std::is_same<T, GetDcvInfoResponse_DcvRole>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DcvRole_Name().");
  return GetDcvInfoResponse_DcvRole_Name(static_cast<GetDcvInfoResponse_DcvRole>(value));
}
template <>
inline const std::string& GetDcvInfoResponse_DcvRole_Name(GetDcvInfoResponse_DcvRole value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GetDcvInfoResponse_DcvRole_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool GetDcvInfoResponse_DcvRole_Parse(absl::string_view name, GetDcvInfoResponse_DcvRole* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetDcvInfoResponse_DcvRole>(
      GetDcvInfoResponse_DcvRole_descriptor(), name, value);
}
enum Response_Status : int {
  Response_Status_NONE = 0,
  Response_Status_SUCCESS = 1,
  Response_Status_ERROR_GENERIC = 10,
  Response_Status_ERROR_ACCESS_DENIED = 11,
  Response_Status_ERROR_NOT_IMPLEMENTED = 12,
  Response_Status_ERROR_INVALID_PARAMETER = 13,
  Response_Status_ERROR_INVALID_VIRTUAL_CHANNEL_NAMESPACE_IN_MANIFEST = 14,
  Response_Status_ERROR_TOO_MANY_VIRTUAL_CHANNELS = 15,
  Response_Status_Response_Status_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Response_Status_Response_Status_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Response_Status_IsValid(int value);
extern const uint32_t Response_Status_internal_data_[];
constexpr Response_Status Response_Status_Status_MIN = static_cast<Response_Status>(0);
constexpr Response_Status Response_Status_Status_MAX = static_cast<Response_Status>(15);
constexpr int Response_Status_Status_ARRAYSIZE = 15 + 1;
const ::google::protobuf::EnumDescriptor*
Response_Status_descriptor();
template <typename T>
const std::string& Response_Status_Name(T value) {
  static_assert(std::is_same<T, Response_Status>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Status_Name().");
  return Response_Status_Name(static_cast<Response_Status>(value));
}
template <>
inline const std::string& Response_Status_Name(Response_Status value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Response_Status_descriptor,
                                                 0, 15>(
      static_cast<int>(value));
}
inline bool Response_Status_Parse(absl::string_view name, Response_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_Status>(
      Response_Status_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class VirtualChannelReadyEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.VirtualChannelReadyEvent) */ {
 public:
  inline VirtualChannelReadyEvent() : VirtualChannelReadyEvent(nullptr) {}
  ~VirtualChannelReadyEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VirtualChannelReadyEvent(::google::protobuf::internal::ConstantInitialized);

  inline VirtualChannelReadyEvent(const VirtualChannelReadyEvent& from)
      : VirtualChannelReadyEvent(nullptr, from) {}
  VirtualChannelReadyEvent(VirtualChannelReadyEvent&& from) noexcept
    : VirtualChannelReadyEvent() {
    *this = ::std::move(from);
  }

  inline VirtualChannelReadyEvent& operator=(const VirtualChannelReadyEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtualChannelReadyEvent& operator=(VirtualChannelReadyEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtualChannelReadyEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtualChannelReadyEvent* internal_default_instance() {
    return reinterpret_cast<const VirtualChannelReadyEvent*>(
               &_VirtualChannelReadyEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(VirtualChannelReadyEvent& a, VirtualChannelReadyEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtualChannelReadyEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtualChannelReadyEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtualChannelReadyEvent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtualChannelReadyEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VirtualChannelReadyEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VirtualChannelReadyEvent& from) {
    VirtualChannelReadyEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VirtualChannelReadyEvent* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.VirtualChannelReadyEvent";
  }
  protected:
  explicit VirtualChannelReadyEvent(::google::protobuf::Arena* arena);
  VirtualChannelReadyEvent(::google::protobuf::Arena* arena, const VirtualChannelReadyEvent& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualChannelNameFieldNumber = 1,
  };
  // string virtual_channel_name = 1;
  void clear_virtual_channel_name() ;
  const std::string& virtual_channel_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_virtual_channel_name(Arg_&& arg, Args_... args);
  std::string* mutable_virtual_channel_name();
  PROTOBUF_NODISCARD std::string* release_virtual_channel_name();
  void set_allocated_virtual_channel_name(std::string* value);

  private:
  const std::string& _internal_virtual_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_virtual_channel_name(
      const std::string& value);
  std::string* _internal_mutable_virtual_channel_name();

  public:
  // @@protoc_insertion_point(class_scope:dcv.extensions.VirtualChannelReadyEvent)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      68, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr virtual_channel_name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class VirtualChannelClosedEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.VirtualChannelClosedEvent) */ {
 public:
  inline VirtualChannelClosedEvent() : VirtualChannelClosedEvent(nullptr) {}
  ~VirtualChannelClosedEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VirtualChannelClosedEvent(::google::protobuf::internal::ConstantInitialized);

  inline VirtualChannelClosedEvent(const VirtualChannelClosedEvent& from)
      : VirtualChannelClosedEvent(nullptr, from) {}
  VirtualChannelClosedEvent(VirtualChannelClosedEvent&& from) noexcept
    : VirtualChannelClosedEvent() {
    *this = ::std::move(from);
  }

  inline VirtualChannelClosedEvent& operator=(const VirtualChannelClosedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtualChannelClosedEvent& operator=(VirtualChannelClosedEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VirtualChannelClosedEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const VirtualChannelClosedEvent* internal_default_instance() {
    return reinterpret_cast<const VirtualChannelClosedEvent*>(
               &_VirtualChannelClosedEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(VirtualChannelClosedEvent& a, VirtualChannelClosedEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtualChannelClosedEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtualChannelClosedEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VirtualChannelClosedEvent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VirtualChannelClosedEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VirtualChannelClosedEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VirtualChannelClosedEvent& from) {
    VirtualChannelClosedEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VirtualChannelClosedEvent* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.VirtualChannelClosedEvent";
  }
  protected:
  explicit VirtualChannelClosedEvent(::google::protobuf::Arena* arena);
  VirtualChannelClosedEvent(::google::protobuf::Arena* arena, const VirtualChannelClosedEvent& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualChannelNameFieldNumber = 1,
  };
  // string virtual_channel_name = 1;
  void clear_virtual_channel_name() ;
  const std::string& virtual_channel_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_virtual_channel_name(Arg_&& arg, Args_... args);
  std::string* mutable_virtual_channel_name();
  PROTOBUF_NODISCARD std::string* release_virtual_channel_name();
  void set_allocated_virtual_channel_name(std::string* value);

  private:
  const std::string& _internal_virtual_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_virtual_channel_name(
      const std::string& value);
  std::string* _internal_mutable_virtual_channel_name();

  public:
  // @@protoc_insertion_point(class_scope:dcv.extensions.VirtualChannelClosedEvent)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      69, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr virtual_channel_name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class SoftwareInfo_VersionNumber final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.SoftwareInfo.VersionNumber) */ {
 public:
  inline SoftwareInfo_VersionNumber() : SoftwareInfo_VersionNumber(nullptr) {}
  ~SoftwareInfo_VersionNumber() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SoftwareInfo_VersionNumber(::google::protobuf::internal::ConstantInitialized);

  inline SoftwareInfo_VersionNumber(const SoftwareInfo_VersionNumber& from)
      : SoftwareInfo_VersionNumber(nullptr, from) {}
  SoftwareInfo_VersionNumber(SoftwareInfo_VersionNumber&& from) noexcept
    : SoftwareInfo_VersionNumber() {
    *this = ::std::move(from);
  }

  inline SoftwareInfo_VersionNumber& operator=(const SoftwareInfo_VersionNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoftwareInfo_VersionNumber& operator=(SoftwareInfo_VersionNumber&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SoftwareInfo_VersionNumber& default_instance() {
    return *internal_default_instance();
  }
  static inline const SoftwareInfo_VersionNumber* internal_default_instance() {
    return reinterpret_cast<const SoftwareInfo_VersionNumber*>(
               &_SoftwareInfo_VersionNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SoftwareInfo_VersionNumber& a, SoftwareInfo_VersionNumber& b) {
    a.Swap(&b);
  }
  inline void Swap(SoftwareInfo_VersionNumber* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SoftwareInfo_VersionNumber* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SoftwareInfo_VersionNumber* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SoftwareInfo_VersionNumber>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SoftwareInfo_VersionNumber& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SoftwareInfo_VersionNumber& from) {
    SoftwareInfo_VersionNumber::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SoftwareInfo_VersionNumber* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.SoftwareInfo.VersionNumber";
  }
  protected:
  explicit SoftwareInfo_VersionNumber(::google::protobuf::Arena* arena);
  SoftwareInfo_VersionNumber(::google::protobuf::Arena* arena, const SoftwareInfo_VersionNumber& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMajorFieldNumber = 1,
    kMinorFieldNumber = 2,
    kRevisionFieldNumber = 3,
  };
  // uint32 major = 1;
  void clear_major() ;
  ::uint32_t major() const;
  void set_major(::uint32_t value);

  private:
  ::uint32_t _internal_major() const;
  void _internal_set_major(::uint32_t value);

  public:
  // uint32 minor = 2;
  void clear_minor() ;
  ::uint32_t minor() const;
  void set_minor(::uint32_t value);

  private:
  ::uint32_t _internal_minor() const;
  void _internal_set_minor(::uint32_t value);

  public:
  // uint32 revision = 3;
  void clear_revision() ;
  ::uint32_t revision() const;
  void set_revision(::uint32_t value);

  private:
  ::uint32_t _internal_revision() const;
  void _internal_set_revision(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dcv.extensions.SoftwareInfo.VersionNumber)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t major_;
    ::uint32_t minor_;
    ::uint32_t revision_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class SetupVirtualChannelResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.SetupVirtualChannelResponse) */ {
 public:
  inline SetupVirtualChannelResponse() : SetupVirtualChannelResponse(nullptr) {}
  ~SetupVirtualChannelResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetupVirtualChannelResponse(::google::protobuf::internal::ConstantInitialized);

  inline SetupVirtualChannelResponse(const SetupVirtualChannelResponse& from)
      : SetupVirtualChannelResponse(nullptr, from) {}
  SetupVirtualChannelResponse(SetupVirtualChannelResponse&& from) noexcept
    : SetupVirtualChannelResponse() {
    *this = ::std::move(from);
  }

  inline SetupVirtualChannelResponse& operator=(const SetupVirtualChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetupVirtualChannelResponse& operator=(SetupVirtualChannelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetupVirtualChannelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetupVirtualChannelResponse* internal_default_instance() {
    return reinterpret_cast<const SetupVirtualChannelResponse*>(
               &_SetupVirtualChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SetupVirtualChannelResponse& a, SetupVirtualChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetupVirtualChannelResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetupVirtualChannelResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetupVirtualChannelResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetupVirtualChannelResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetupVirtualChannelResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetupVirtualChannelResponse& from) {
    SetupVirtualChannelResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetupVirtualChannelResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.SetupVirtualChannelResponse";
  }
  protected:
  explicit SetupVirtualChannelResponse(::google::protobuf::Arena* arena);
  SetupVirtualChannelResponse(::google::protobuf::Arena* arena, const SetupVirtualChannelResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualChannelNameFieldNumber = 1,
    kRelayPathFieldNumber = 2,
    kVirtualChannelAuthTokenFieldNumber = 4,
    kRelayServerProcessIdFieldNumber = 3,
  };
  // string virtual_channel_name = 1;
  void clear_virtual_channel_name() ;
  const std::string& virtual_channel_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_virtual_channel_name(Arg_&& arg, Args_... args);
  std::string* mutable_virtual_channel_name();
  PROTOBUF_NODISCARD std::string* release_virtual_channel_name();
  void set_allocated_virtual_channel_name(std::string* value);

  private:
  const std::string& _internal_virtual_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_virtual_channel_name(
      const std::string& value);
  std::string* _internal_mutable_virtual_channel_name();

  public:
  // string relay_path = 2;
  void clear_relay_path() ;
  const std::string& relay_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_relay_path(Arg_&& arg, Args_... args);
  std::string* mutable_relay_path();
  PROTOBUF_NODISCARD std::string* release_relay_path();
  void set_allocated_relay_path(std::string* value);

  private:
  const std::string& _internal_relay_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relay_path(
      const std::string& value);
  std::string* _internal_mutable_relay_path();

  public:
  // bytes virtual_channel_auth_token = 4;
  void clear_virtual_channel_auth_token() ;
  const std::string& virtual_channel_auth_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_virtual_channel_auth_token(Arg_&& arg, Args_... args);
  std::string* mutable_virtual_channel_auth_token();
  PROTOBUF_NODISCARD std::string* release_virtual_channel_auth_token();
  void set_allocated_virtual_channel_auth_token(std::string* value);

  private:
  const std::string& _internal_virtual_channel_auth_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_virtual_channel_auth_token(
      const std::string& value);
  std::string* _internal_mutable_virtual_channel_auth_token();

  public:
  // int64 relay_server_process_id = 3;
  void clear_relay_server_process_id() ;
  ::int64_t relay_server_process_id() const;
  void set_relay_server_process_id(::int64_t value);

  private:
  ::int64_t _internal_relay_server_process_id() const;
  void _internal_set_relay_server_process_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:dcv.extensions.SetupVirtualChannelResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      81, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr virtual_channel_name_;
    ::google::protobuf::internal::ArenaStringPtr relay_path_;
    ::google::protobuf::internal::ArenaStringPtr virtual_channel_auth_token_;
    ::int64_t relay_server_process_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class SetupVirtualChannelRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.SetupVirtualChannelRequest) */ {
 public:
  inline SetupVirtualChannelRequest() : SetupVirtualChannelRequest(nullptr) {}
  ~SetupVirtualChannelRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetupVirtualChannelRequest(::google::protobuf::internal::ConstantInitialized);

  inline SetupVirtualChannelRequest(const SetupVirtualChannelRequest& from)
      : SetupVirtualChannelRequest(nullptr, from) {}
  SetupVirtualChannelRequest(SetupVirtualChannelRequest&& from) noexcept
    : SetupVirtualChannelRequest() {
    *this = ::std::move(from);
  }

  inline SetupVirtualChannelRequest& operator=(const SetupVirtualChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetupVirtualChannelRequest& operator=(SetupVirtualChannelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetupVirtualChannelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetupVirtualChannelRequest* internal_default_instance() {
    return reinterpret_cast<const SetupVirtualChannelRequest*>(
               &_SetupVirtualChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SetupVirtualChannelRequest& a, SetupVirtualChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetupVirtualChannelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetupVirtualChannelRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetupVirtualChannelRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetupVirtualChannelRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetupVirtualChannelRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetupVirtualChannelRequest& from) {
    SetupVirtualChannelRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetupVirtualChannelRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.SetupVirtualChannelRequest";
  }
  protected:
  explicit SetupVirtualChannelRequest(::google::protobuf::Arena* arena);
  SetupVirtualChannelRequest(::google::protobuf::Arena* arena, const SetupVirtualChannelRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualChannelNameFieldNumber = 1,
    kRelayClientProcessIdFieldNumber = 2,
  };
  // string virtual_channel_name = 1;
  void clear_virtual_channel_name() ;
  const std::string& virtual_channel_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_virtual_channel_name(Arg_&& arg, Args_... args);
  std::string* mutable_virtual_channel_name();
  PROTOBUF_NODISCARD std::string* release_virtual_channel_name();
  void set_allocated_virtual_channel_name(std::string* value);

  private:
  const std::string& _internal_virtual_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_virtual_channel_name(
      const std::string& value);
  std::string* _internal_mutable_virtual_channel_name();

  public:
  // int64 relay_client_process_id = 2;
  void clear_relay_client_process_id() ;
  ::int64_t relay_client_process_id() const;
  void set_relay_client_process_id(::int64_t value);

  private:
  ::int64_t _internal_relay_client_process_id() const;
  void _internal_set_relay_client_process_id(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:dcv.extensions.SetupVirtualChannelRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      70, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr virtual_channel_name_;
    ::int64_t relay_client_process_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class SetCursorPointResponse final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:dcv.extensions.SetCursorPointResponse) */ {
 public:
  inline SetCursorPointResponse() : SetCursorPointResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetCursorPointResponse(::google::protobuf::internal::ConstantInitialized);

  inline SetCursorPointResponse(const SetCursorPointResponse& from)
      : SetCursorPointResponse(nullptr, from) {}
  SetCursorPointResponse(SetCursorPointResponse&& from) noexcept
    : SetCursorPointResponse() {
    *this = ::std::move(from);
  }

  inline SetCursorPointResponse& operator=(const SetCursorPointResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCursorPointResponse& operator=(SetCursorPointResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetCursorPointResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCursorPointResponse* internal_default_instance() {
    return reinterpret_cast<const SetCursorPointResponse*>(
               &_SetCursorPointResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SetCursorPointResponse& a, SetCursorPointResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCursorPointResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCursorPointResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetCursorPointResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetCursorPointResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetCursorPointResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetCursorPointResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.SetCursorPointResponse";
  }
  protected:
  explicit SetCursorPointResponse(::google::protobuf::Arena* arena);
  SetCursorPointResponse(::google::protobuf::Arena* arena, const SetCursorPointResponse& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dcv.extensions.SetCursorPointResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class Rect final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.Rect) */ {
 public:
  inline Rect() : Rect(nullptr) {}
  ~Rect() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Rect(::google::protobuf::internal::ConstantInitialized);

  inline Rect(const Rect& from)
      : Rect(nullptr, from) {}
  Rect(Rect&& from) noexcept
    : Rect() {
    *this = ::std::move(from);
  }

  inline Rect& operator=(const Rect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rect& operator=(Rect&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rect& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rect* internal_default_instance() {
    return reinterpret_cast<const Rect*>(
               &_Rect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Rect& a, Rect& b) {
    a.Swap(&b);
  }
  inline void Swap(Rect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rect* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rect* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rect>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Rect& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Rect& from) {
    Rect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Rect* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.Rect";
  }
  protected:
  explicit Rect(::google::protobuf::Arena* arena);
  Rect(::google::protobuf::Arena* arena, const Rect& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // int32 x = 1;
  void clear_x() ;
  ::int32_t x() const;
  void set_x(::int32_t value);

  private:
  ::int32_t _internal_x() const;
  void _internal_set_x(::int32_t value);

  public:
  // int32 y = 2;
  void clear_y() ;
  ::int32_t y() const;
  void set_y(::int32_t value);

  private:
  ::int32_t _internal_y() const;
  void _internal_set_y(::int32_t value);

  public:
  // uint32 width = 3;
  void clear_width() ;
  ::uint32_t width() const;
  void set_width(::uint32_t value);

  private:
  ::uint32_t _internal_width() const;
  void _internal_set_width(::uint32_t value);

  public:
  // uint32 height = 4;
  void clear_height() ;
  ::uint32_t height() const;
  void set_height(::uint32_t value);

  private:
  ::uint32_t _internal_height() const;
  void _internal_set_height(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dcv.extensions.Rect)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t x_;
    ::int32_t y_;
    ::uint32_t width_;
    ::uint32_t height_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class Point final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Point(::google::protobuf::internal::ConstantInitialized);

  inline Point(const Point& from)
      : Point(nullptr, from) {}
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Point& from) {
    Point::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Point* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.Point";
  }
  protected:
  explicit Point(::google::protobuf::Arena* arena);
  Point(::google::protobuf::Arena* arena, const Point& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x() ;
  ::int32_t x() const;
  void set_x(::int32_t value);

  private:
  ::int32_t _internal_x() const;
  void _internal_set_x(::int32_t value);

  public:
  // int32 y = 2;
  void clear_y() ;
  ::int32_t y() const;
  void set_y(::int32_t value);

  private:
  ::int32_t _internal_y() const;
  void _internal_set_y(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dcv.extensions.Point)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t x_;
    ::int32_t y_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class IsPointInsideStreamingViewsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.IsPointInsideStreamingViewsResponse) */ {
 public:
  inline IsPointInsideStreamingViewsResponse() : IsPointInsideStreamingViewsResponse(nullptr) {}
  ~IsPointInsideStreamingViewsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IsPointInsideStreamingViewsResponse(::google::protobuf::internal::ConstantInitialized);

  inline IsPointInsideStreamingViewsResponse(const IsPointInsideStreamingViewsResponse& from)
      : IsPointInsideStreamingViewsResponse(nullptr, from) {}
  IsPointInsideStreamingViewsResponse(IsPointInsideStreamingViewsResponse&& from) noexcept
    : IsPointInsideStreamingViewsResponse() {
    *this = ::std::move(from);
  }

  inline IsPointInsideStreamingViewsResponse& operator=(const IsPointInsideStreamingViewsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsPointInsideStreamingViewsResponse& operator=(IsPointInsideStreamingViewsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IsPointInsideStreamingViewsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const IsPointInsideStreamingViewsResponse* internal_default_instance() {
    return reinterpret_cast<const IsPointInsideStreamingViewsResponse*>(
               &_IsPointInsideStreamingViewsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(IsPointInsideStreamingViewsResponse& a, IsPointInsideStreamingViewsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IsPointInsideStreamingViewsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsPointInsideStreamingViewsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IsPointInsideStreamingViewsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IsPointInsideStreamingViewsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IsPointInsideStreamingViewsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IsPointInsideStreamingViewsResponse& from) {
    IsPointInsideStreamingViewsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IsPointInsideStreamingViewsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.IsPointInsideStreamingViewsResponse";
  }
  protected:
  explicit IsPointInsideStreamingViewsResponse(::google::protobuf::Arena* arena);
  IsPointInsideStreamingViewsResponse(::google::protobuf::Arena* arena, const IsPointInsideStreamingViewsResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewIdFieldNumber = 1,
  };
  // int32 view_id = 1;
  void clear_view_id() ;
  ::int32_t view_id() const;
  void set_view_id(::int32_t value);

  private:
  ::int32_t _internal_view_id() const;
  void _internal_set_view_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dcv.extensions.IsPointInsideStreamingViewsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t view_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class GetStreamingViewsRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:dcv.extensions.GetStreamingViewsRequest) */ {
 public:
  inline GetStreamingViewsRequest() : GetStreamingViewsRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetStreamingViewsRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetStreamingViewsRequest(const GetStreamingViewsRequest& from)
      : GetStreamingViewsRequest(nullptr, from) {}
  GetStreamingViewsRequest(GetStreamingViewsRequest&& from) noexcept
    : GetStreamingViewsRequest() {
    *this = ::std::move(from);
  }

  inline GetStreamingViewsRequest& operator=(const GetStreamingViewsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamingViewsRequest& operator=(GetStreamingViewsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStreamingViewsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStreamingViewsRequest* internal_default_instance() {
    return reinterpret_cast<const GetStreamingViewsRequest*>(
               &_GetStreamingViewsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetStreamingViewsRequest& a, GetStreamingViewsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamingViewsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStreamingViewsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStreamingViewsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStreamingViewsRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetStreamingViewsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetStreamingViewsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.GetStreamingViewsRequest";
  }
  protected:
  explicit GetStreamingViewsRequest(::google::protobuf::Arena* arena);
  GetStreamingViewsRequest(::google::protobuf::Arena* arena, const GetStreamingViewsRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dcv.extensions.GetStreamingViewsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class GetManifestResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.GetManifestResponse) */ {
 public:
  inline GetManifestResponse() : GetManifestResponse(nullptr) {}
  ~GetManifestResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetManifestResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetManifestResponse(const GetManifestResponse& from)
      : GetManifestResponse(nullptr, from) {}
  GetManifestResponse(GetManifestResponse&& from) noexcept
    : GetManifestResponse() {
    *this = ::std::move(from);
  }

  inline GetManifestResponse& operator=(const GetManifestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetManifestResponse& operator=(GetManifestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetManifestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetManifestResponse* internal_default_instance() {
    return reinterpret_cast<const GetManifestResponse*>(
               &_GetManifestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetManifestResponse& a, GetManifestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetManifestResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetManifestResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetManifestResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetManifestResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetManifestResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetManifestResponse& from) {
    GetManifestResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetManifestResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.GetManifestResponse";
  }
  protected:
  explicit GetManifestResponse(::google::protobuf::Arena* arena);
  GetManifestResponse(::google::protobuf::Arena* arena, const GetManifestResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kManifestPathFieldNumber = 1,
  };
  // string manifest_path = 1;
  void clear_manifest_path() ;
  const std::string& manifest_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_manifest_path(Arg_&& arg, Args_... args);
  std::string* mutable_manifest_path();
  PROTOBUF_NODISCARD std::string* release_manifest_path();
  void set_allocated_manifest_path(std::string* value);

  private:
  const std::string& _internal_manifest_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_manifest_path(
      const std::string& value);
  std::string* _internal_mutable_manifest_path();

  public:
  // @@protoc_insertion_point(class_scope:dcv.extensions.GetManifestResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      56, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr manifest_path_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class GetManifestRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:dcv.extensions.GetManifestRequest) */ {
 public:
  inline GetManifestRequest() : GetManifestRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetManifestRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetManifestRequest(const GetManifestRequest& from)
      : GetManifestRequest(nullptr, from) {}
  GetManifestRequest(GetManifestRequest&& from) noexcept
    : GetManifestRequest() {
    *this = ::std::move(from);
  }

  inline GetManifestRequest& operator=(const GetManifestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetManifestRequest& operator=(GetManifestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetManifestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetManifestRequest* internal_default_instance() {
    return reinterpret_cast<const GetManifestRequest*>(
               &_GetManifestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetManifestRequest& a, GetManifestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetManifestRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetManifestRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetManifestRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetManifestRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetManifestRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetManifestRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.GetManifestRequest";
  }
  protected:
  explicit GetManifestRequest(::google::protobuf::Arena* arena);
  GetManifestRequest(::google::protobuf::Arena* arena, const GetManifestRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dcv.extensions.GetManifestRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class GetDcvInfoRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:dcv.extensions.GetDcvInfoRequest) */ {
 public:
  inline GetDcvInfoRequest() : GetDcvInfoRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetDcvInfoRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetDcvInfoRequest(const GetDcvInfoRequest& from)
      : GetDcvInfoRequest(nullptr, from) {}
  GetDcvInfoRequest(GetDcvInfoRequest&& from) noexcept
    : GetDcvInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetDcvInfoRequest& operator=(const GetDcvInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDcvInfoRequest& operator=(GetDcvInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDcvInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDcvInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetDcvInfoRequest*>(
               &_GetDcvInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetDcvInfoRequest& a, GetDcvInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDcvInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDcvInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDcvInfoRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDcvInfoRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetDcvInfoRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetDcvInfoRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.GetDcvInfoRequest";
  }
  protected:
  explicit GetDcvInfoRequest(::google::protobuf::Arena* arena);
  GetDcvInfoRequest(::google::protobuf::Arena* arena, const GetDcvInfoRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dcv.extensions.GetDcvInfoRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class CloseVirtualChannelResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.CloseVirtualChannelResponse) */ {
 public:
  inline CloseVirtualChannelResponse() : CloseVirtualChannelResponse(nullptr) {}
  ~CloseVirtualChannelResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CloseVirtualChannelResponse(::google::protobuf::internal::ConstantInitialized);

  inline CloseVirtualChannelResponse(const CloseVirtualChannelResponse& from)
      : CloseVirtualChannelResponse(nullptr, from) {}
  CloseVirtualChannelResponse(CloseVirtualChannelResponse&& from) noexcept
    : CloseVirtualChannelResponse() {
    *this = ::std::move(from);
  }

  inline CloseVirtualChannelResponse& operator=(const CloseVirtualChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseVirtualChannelResponse& operator=(CloseVirtualChannelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseVirtualChannelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseVirtualChannelResponse* internal_default_instance() {
    return reinterpret_cast<const CloseVirtualChannelResponse*>(
               &_CloseVirtualChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CloseVirtualChannelResponse& a, CloseVirtualChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseVirtualChannelResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseVirtualChannelResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseVirtualChannelResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseVirtualChannelResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CloseVirtualChannelResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CloseVirtualChannelResponse& from) {
    CloseVirtualChannelResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CloseVirtualChannelResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.CloseVirtualChannelResponse";
  }
  protected:
  explicit CloseVirtualChannelResponse(::google::protobuf::Arena* arena);
  CloseVirtualChannelResponse(::google::protobuf::Arena* arena, const CloseVirtualChannelResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualChannelNameFieldNumber = 1,
  };
  // string virtual_channel_name = 1;
  void clear_virtual_channel_name() ;
  const std::string& virtual_channel_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_virtual_channel_name(Arg_&& arg, Args_... args);
  std::string* mutable_virtual_channel_name();
  PROTOBUF_NODISCARD std::string* release_virtual_channel_name();
  void set_allocated_virtual_channel_name(std::string* value);

  private:
  const std::string& _internal_virtual_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_virtual_channel_name(
      const std::string& value);
  std::string* _internal_mutable_virtual_channel_name();

  public:
  // @@protoc_insertion_point(class_scope:dcv.extensions.CloseVirtualChannelResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      71, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr virtual_channel_name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class CloseVirtualChannelRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.CloseVirtualChannelRequest) */ {
 public:
  inline CloseVirtualChannelRequest() : CloseVirtualChannelRequest(nullptr) {}
  ~CloseVirtualChannelRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CloseVirtualChannelRequest(::google::protobuf::internal::ConstantInitialized);

  inline CloseVirtualChannelRequest(const CloseVirtualChannelRequest& from)
      : CloseVirtualChannelRequest(nullptr, from) {}
  CloseVirtualChannelRequest(CloseVirtualChannelRequest&& from) noexcept
    : CloseVirtualChannelRequest() {
    *this = ::std::move(from);
  }

  inline CloseVirtualChannelRequest& operator=(const CloseVirtualChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseVirtualChannelRequest& operator=(CloseVirtualChannelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseVirtualChannelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseVirtualChannelRequest* internal_default_instance() {
    return reinterpret_cast<const CloseVirtualChannelRequest*>(
               &_CloseVirtualChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CloseVirtualChannelRequest& a, CloseVirtualChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseVirtualChannelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseVirtualChannelRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CloseVirtualChannelRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CloseVirtualChannelRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CloseVirtualChannelRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CloseVirtualChannelRequest& from) {
    CloseVirtualChannelRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CloseVirtualChannelRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.CloseVirtualChannelRequest";
  }
  protected:
  explicit CloseVirtualChannelRequest(::google::protobuf::Arena* arena);
  CloseVirtualChannelRequest(::google::protobuf::Arena* arena, const CloseVirtualChannelRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualChannelNameFieldNumber = 1,
  };
  // string virtual_channel_name = 1;
  void clear_virtual_channel_name() ;
  const std::string& virtual_channel_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_virtual_channel_name(Arg_&& arg, Args_... args);
  std::string* mutable_virtual_channel_name();
  PROTOBUF_NODISCARD std::string* release_virtual_channel_name();
  void set_allocated_virtual_channel_name(std::string* value);

  private:
  const std::string& _internal_virtual_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_virtual_channel_name(
      const std::string& value);
  std::string* _internal_mutable_virtual_channel_name();

  public:
  // @@protoc_insertion_point(class_scope:dcv.extensions.CloseVirtualChannelRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      70, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr virtual_channel_name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class StreamingViews_StreamingView final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.StreamingViews.StreamingView) */ {
 public:
  inline StreamingViews_StreamingView() : StreamingViews_StreamingView(nullptr) {}
  ~StreamingViews_StreamingView() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StreamingViews_StreamingView(::google::protobuf::internal::ConstantInitialized);

  inline StreamingViews_StreamingView(const StreamingViews_StreamingView& from)
      : StreamingViews_StreamingView(nullptr, from) {}
  StreamingViews_StreamingView(StreamingViews_StreamingView&& from) noexcept
    : StreamingViews_StreamingView() {
    *this = ::std::move(from);
  }

  inline StreamingViews_StreamingView& operator=(const StreamingViews_StreamingView& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingViews_StreamingView& operator=(StreamingViews_StreamingView&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingViews_StreamingView& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingViews_StreamingView* internal_default_instance() {
    return reinterpret_cast<const StreamingViews_StreamingView*>(
               &_StreamingViews_StreamingView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StreamingViews_StreamingView& a, StreamingViews_StreamingView& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingViews_StreamingView* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingViews_StreamingView* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingViews_StreamingView* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamingViews_StreamingView>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamingViews_StreamingView& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StreamingViews_StreamingView& from) {
    StreamingViews_StreamingView::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StreamingViews_StreamingView* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.StreamingViews.StreamingView";
  }
  protected:
  explicit StreamingViews_StreamingView(::google::protobuf::Arena* arena);
  StreamingViews_StreamingView(::google::protobuf::Arena* arena, const StreamingViews_StreamingView& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalAreaFieldNumber = 2,
    kRemoteOffsetFieldNumber = 4,
    kZoomFactorFieldNumber = 3,
    kViewIdFieldNumber = 1,
  };
  // .dcv.extensions.Rect local_area = 2;
  bool has_local_area() const;
  void clear_local_area() ;
  const ::dcv::extensions::Rect& local_area() const;
  PROTOBUF_NODISCARD ::dcv::extensions::Rect* release_local_area();
  ::dcv::extensions::Rect* mutable_local_area();
  void set_allocated_local_area(::dcv::extensions::Rect* value);
  void unsafe_arena_set_allocated_local_area(::dcv::extensions::Rect* value);
  ::dcv::extensions::Rect* unsafe_arena_release_local_area();

  private:
  const ::dcv::extensions::Rect& _internal_local_area() const;
  ::dcv::extensions::Rect* _internal_mutable_local_area();

  public:
  // .dcv.extensions.Point remote_offset = 4;
  bool has_remote_offset() const;
  void clear_remote_offset() ;
  const ::dcv::extensions::Point& remote_offset() const;
  PROTOBUF_NODISCARD ::dcv::extensions::Point* release_remote_offset();
  ::dcv::extensions::Point* mutable_remote_offset();
  void set_allocated_remote_offset(::dcv::extensions::Point* value);
  void unsafe_arena_set_allocated_remote_offset(::dcv::extensions::Point* value);
  ::dcv::extensions::Point* unsafe_arena_release_remote_offset();

  private:
  const ::dcv::extensions::Point& _internal_remote_offset() const;
  ::dcv::extensions::Point* _internal_mutable_remote_offset();

  public:
  // double zoom_factor = 3;
  void clear_zoom_factor() ;
  double zoom_factor() const;
  void set_zoom_factor(double value);

  private:
  double _internal_zoom_factor() const;
  void _internal_set_zoom_factor(double value);

  public:
  // int32 view_id = 1;
  void clear_view_id() ;
  ::int32_t view_id() const;
  void set_view_id(::int32_t value);

  private:
  ::int32_t _internal_view_id() const;
  void _internal_set_view_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:dcv.extensions.StreamingViews.StreamingView)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::dcv::extensions::Rect* local_area_;
    ::dcv::extensions::Point* remote_offset_;
    double zoom_factor_;
    ::int32_t view_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class SoftwareInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.SoftwareInfo) */ {
 public:
  inline SoftwareInfo() : SoftwareInfo(nullptr) {}
  ~SoftwareInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SoftwareInfo(::google::protobuf::internal::ConstantInitialized);

  inline SoftwareInfo(const SoftwareInfo& from)
      : SoftwareInfo(nullptr, from) {}
  SoftwareInfo(SoftwareInfo&& from) noexcept
    : SoftwareInfo() {
    *this = ::std::move(from);
  }

  inline SoftwareInfo& operator=(const SoftwareInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoftwareInfo& operator=(SoftwareInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SoftwareInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SoftwareInfo* internal_default_instance() {
    return reinterpret_cast<const SoftwareInfo*>(
               &_SoftwareInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SoftwareInfo& a, SoftwareInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SoftwareInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SoftwareInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SoftwareInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SoftwareInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SoftwareInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SoftwareInfo& from) {
    SoftwareInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SoftwareInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.SoftwareInfo";
  }
  protected:
  explicit SoftwareInfo(::google::protobuf::Arena* arena);
  SoftwareInfo(::google::protobuf::Arena* arena, const SoftwareInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using VersionNumber = SoftwareInfo_VersionNumber;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kOsFieldNumber = 3,
    kArchFieldNumber = 4,
    kHostnameFieldNumber = 5,
    kVersionFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string os = 3;
  void clear_os() ;
  const std::string& os() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_os(Arg_&& arg, Args_... args);
  std::string* mutable_os();
  PROTOBUF_NODISCARD std::string* release_os();
  void set_allocated_os(std::string* value);

  private:
  const std::string& _internal_os() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_os(
      const std::string& value);
  std::string* _internal_mutable_os();

  public:
  // string arch = 4;
  void clear_arch() ;
  const std::string& arch() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_arch(Arg_&& arg, Args_... args);
  std::string* mutable_arch();
  PROTOBUF_NODISCARD std::string* release_arch();
  void set_allocated_arch(std::string* value);

  private:
  const std::string& _internal_arch() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_arch(
      const std::string& value);
  std::string* _internal_mutable_arch();

  public:
  // string hostname = 5;
  void clear_hostname() ;
  const std::string& hostname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hostname(Arg_&& arg, Args_... args);
  std::string* mutable_hostname();
  PROTOBUF_NODISCARD std::string* release_hostname();
  void set_allocated_hostname(std::string* value);

  private:
  const std::string& _internal_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(
      const std::string& value);
  std::string* _internal_mutable_hostname();

  public:
  // .dcv.extensions.SoftwareInfo.VersionNumber version = 2;
  bool has_version() const;
  void clear_version() ;
  const ::dcv::extensions::SoftwareInfo_VersionNumber& version() const;
  PROTOBUF_NODISCARD ::dcv::extensions::SoftwareInfo_VersionNumber* release_version();
  ::dcv::extensions::SoftwareInfo_VersionNumber* mutable_version();
  void set_allocated_version(::dcv::extensions::SoftwareInfo_VersionNumber* value);
  void unsafe_arena_set_allocated_version(::dcv::extensions::SoftwareInfo_VersionNumber* value);
  ::dcv::extensions::SoftwareInfo_VersionNumber* unsafe_arena_release_version();

  private:
  const ::dcv::extensions::SoftwareInfo_VersionNumber& _internal_version() const;
  ::dcv::extensions::SoftwareInfo_VersionNumber* _internal_mutable_version();

  public:
  // @@protoc_insertion_point(class_scope:dcv.extensions.SoftwareInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      54, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr os_;
    ::google::protobuf::internal::ArenaStringPtr arch_;
    ::google::protobuf::internal::ArenaStringPtr hostname_;
    ::dcv::extensions::SoftwareInfo_VersionNumber* version_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class SetCursorPointRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.SetCursorPointRequest) */ {
 public:
  inline SetCursorPointRequest() : SetCursorPointRequest(nullptr) {}
  ~SetCursorPointRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetCursorPointRequest(::google::protobuf::internal::ConstantInitialized);

  inline SetCursorPointRequest(const SetCursorPointRequest& from)
      : SetCursorPointRequest(nullptr, from) {}
  SetCursorPointRequest(SetCursorPointRequest&& from) noexcept
    : SetCursorPointRequest() {
    *this = ::std::move(from);
  }

  inline SetCursorPointRequest& operator=(const SetCursorPointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCursorPointRequest& operator=(SetCursorPointRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetCursorPointRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetCursorPointRequest* internal_default_instance() {
    return reinterpret_cast<const SetCursorPointRequest*>(
               &_SetCursorPointRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SetCursorPointRequest& a, SetCursorPointRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCursorPointRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCursorPointRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetCursorPointRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetCursorPointRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetCursorPointRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetCursorPointRequest& from) {
    SetCursorPointRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetCursorPointRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.SetCursorPointRequest";
  }
  protected:
  explicit SetCursorPointRequest(::google::protobuf::Arena* arena);
  SetCursorPointRequest(::google::protobuf::Arena* arena, const SetCursorPointRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
  };
  // .dcv.extensions.Point point = 1;
  bool has_point() const;
  void clear_point() ;
  const ::dcv::extensions::Point& point() const;
  PROTOBUF_NODISCARD ::dcv::extensions::Point* release_point();
  ::dcv::extensions::Point* mutable_point();
  void set_allocated_point(::dcv::extensions::Point* value);
  void unsafe_arena_set_allocated_point(::dcv::extensions::Point* value);
  ::dcv::extensions::Point* unsafe_arena_release_point();

  private:
  const ::dcv::extensions::Point& _internal_point() const;
  ::dcv::extensions::Point* _internal_mutable_point();

  public:
  // @@protoc_insertion_point(class_scope:dcv.extensions.SetCursorPointRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::dcv::extensions::Point* point_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class IsPointInsideStreamingViewsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.IsPointInsideStreamingViewsRequest) */ {
 public:
  inline IsPointInsideStreamingViewsRequest() : IsPointInsideStreamingViewsRequest(nullptr) {}
  ~IsPointInsideStreamingViewsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IsPointInsideStreamingViewsRequest(::google::protobuf::internal::ConstantInitialized);

  inline IsPointInsideStreamingViewsRequest(const IsPointInsideStreamingViewsRequest& from)
      : IsPointInsideStreamingViewsRequest(nullptr, from) {}
  IsPointInsideStreamingViewsRequest(IsPointInsideStreamingViewsRequest&& from) noexcept
    : IsPointInsideStreamingViewsRequest() {
    *this = ::std::move(from);
  }

  inline IsPointInsideStreamingViewsRequest& operator=(const IsPointInsideStreamingViewsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsPointInsideStreamingViewsRequest& operator=(IsPointInsideStreamingViewsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IsPointInsideStreamingViewsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IsPointInsideStreamingViewsRequest* internal_default_instance() {
    return reinterpret_cast<const IsPointInsideStreamingViewsRequest*>(
               &_IsPointInsideStreamingViewsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(IsPointInsideStreamingViewsRequest& a, IsPointInsideStreamingViewsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IsPointInsideStreamingViewsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsPointInsideStreamingViewsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IsPointInsideStreamingViewsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IsPointInsideStreamingViewsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IsPointInsideStreamingViewsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IsPointInsideStreamingViewsRequest& from) {
    IsPointInsideStreamingViewsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IsPointInsideStreamingViewsRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.IsPointInsideStreamingViewsRequest";
  }
  protected:
  explicit IsPointInsideStreamingViewsRequest(::google::protobuf::Arena* arena);
  IsPointInsideStreamingViewsRequest(::google::protobuf::Arena* arena, const IsPointInsideStreamingViewsRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
  };
  // .dcv.extensions.Point point = 1;
  bool has_point() const;
  void clear_point() ;
  const ::dcv::extensions::Point& point() const;
  PROTOBUF_NODISCARD ::dcv::extensions::Point* release_point();
  ::dcv::extensions::Point* mutable_point();
  void set_allocated_point(::dcv::extensions::Point* value);
  void unsafe_arena_set_allocated_point(::dcv::extensions::Point* value);
  ::dcv::extensions::Point* unsafe_arena_release_point();

  private:
  const ::dcv::extensions::Point& _internal_point() const;
  ::dcv::extensions::Point* _internal_mutable_point();

  public:
  // @@protoc_insertion_point(class_scope:dcv.extensions.IsPointInsideStreamingViewsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::dcv::extensions::Point* point_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class StreamingViews final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.StreamingViews) */ {
 public:
  inline StreamingViews() : StreamingViews(nullptr) {}
  ~StreamingViews() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StreamingViews(::google::protobuf::internal::ConstantInitialized);

  inline StreamingViews(const StreamingViews& from)
      : StreamingViews(nullptr, from) {}
  StreamingViews(StreamingViews&& from) noexcept
    : StreamingViews() {
    *this = ::std::move(from);
  }

  inline StreamingViews& operator=(const StreamingViews& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingViews& operator=(StreamingViews&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingViews& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingViews* internal_default_instance() {
    return reinterpret_cast<const StreamingViews*>(
               &_StreamingViews_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StreamingViews& a, StreamingViews& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingViews* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingViews* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingViews* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamingViews>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamingViews& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StreamingViews& from) {
    StreamingViews::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StreamingViews* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.StreamingViews";
  }
  protected:
  explicit StreamingViews(::google::protobuf::Arena* arena);
  StreamingViews(::google::protobuf::Arena* arena, const StreamingViews& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using StreamingView = StreamingViews_StreamingView;

  // accessors -------------------------------------------------------

  enum : int {
    kStreamingViewFieldNumber = 1,
  };
  // repeated .dcv.extensions.StreamingViews.StreamingView streaming_view = 1;
  int streaming_view_size() const;
  private:
  int _internal_streaming_view_size() const;

  public:
  void clear_streaming_view() ;
  ::dcv::extensions::StreamingViews_StreamingView* mutable_streaming_view(int index);
  ::google::protobuf::RepeatedPtrField< ::dcv::extensions::StreamingViews_StreamingView >*
      mutable_streaming_view();
  private:
  const ::google::protobuf::RepeatedPtrField<::dcv::extensions::StreamingViews_StreamingView>& _internal_streaming_view() const;
  ::google::protobuf::RepeatedPtrField<::dcv::extensions::StreamingViews_StreamingView>* _internal_mutable_streaming_view();
  public:
  const ::dcv::extensions::StreamingViews_StreamingView& streaming_view(int index) const;
  ::dcv::extensions::StreamingViews_StreamingView* add_streaming_view();
  const ::google::protobuf::RepeatedPtrField< ::dcv::extensions::StreamingViews_StreamingView >&
      streaming_view() const;
  // @@protoc_insertion_point(class_scope:dcv.extensions.StreamingViews)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::dcv::extensions::StreamingViews_StreamingView > streaming_view_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Request(::google::protobuf::internal::ConstantInitialized);

  inline Request(const Request& from)
      : Request(nullptr, from) {}
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kGetDcvInfoRequest = 10,
    kGetManifestRequest = 11,
    kSetupVirtualChannelRequest = 20,
    kCloseVirtualChannelRequest = 21,
    kSetCursorPointRequest = 30,
    kGetStreamingViewsRequest = 31,
    kIsPointInsideStreamingViewsRequest = 32,
    REQUEST_NOT_SET = 0,
  };

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Request& from) {
    Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Request* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.Request";
  }
  protected:
  explicit Request(::google::protobuf::Arena* arena);
  Request(::google::protobuf::Arena* arena, const Request& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kGetDcvInfoRequestFieldNumber = 10,
    kGetManifestRequestFieldNumber = 11,
    kSetupVirtualChannelRequestFieldNumber = 20,
    kCloseVirtualChannelRequestFieldNumber = 21,
    kSetCursorPointRequestFieldNumber = 30,
    kGetStreamingViewsRequestFieldNumber = 31,
    kIsPointInsideStreamingViewsRequestFieldNumber = 32,
  };
  // string request_id = 1;
  void clear_request_id() ;
  const std::string& request_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_request_id(Arg_&& arg, Args_... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* value);

  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(
      const std::string& value);
  std::string* _internal_mutable_request_id();

  public:
  // .dcv.extensions.GetDcvInfoRequest get_dcv_info_request = 10;
  bool has_get_dcv_info_request() const;
  private:
  bool _internal_has_get_dcv_info_request() const;

  public:
  void clear_get_dcv_info_request() ;
  const ::dcv::extensions::GetDcvInfoRequest& get_dcv_info_request() const;
  PROTOBUF_NODISCARD ::dcv::extensions::GetDcvInfoRequest* release_get_dcv_info_request();
  ::dcv::extensions::GetDcvInfoRequest* mutable_get_dcv_info_request();
  void set_allocated_get_dcv_info_request(::dcv::extensions::GetDcvInfoRequest* value);
  void unsafe_arena_set_allocated_get_dcv_info_request(::dcv::extensions::GetDcvInfoRequest* value);
  ::dcv::extensions::GetDcvInfoRequest* unsafe_arena_release_get_dcv_info_request();

  private:
  const ::dcv::extensions::GetDcvInfoRequest& _internal_get_dcv_info_request() const;
  ::dcv::extensions::GetDcvInfoRequest* _internal_mutable_get_dcv_info_request();

  public:
  // .dcv.extensions.GetManifestRequest get_manifest_request = 11;
  bool has_get_manifest_request() const;
  private:
  bool _internal_has_get_manifest_request() const;

  public:
  void clear_get_manifest_request() ;
  const ::dcv::extensions::GetManifestRequest& get_manifest_request() const;
  PROTOBUF_NODISCARD ::dcv::extensions::GetManifestRequest* release_get_manifest_request();
  ::dcv::extensions::GetManifestRequest* mutable_get_manifest_request();
  void set_allocated_get_manifest_request(::dcv::extensions::GetManifestRequest* value);
  void unsafe_arena_set_allocated_get_manifest_request(::dcv::extensions::GetManifestRequest* value);
  ::dcv::extensions::GetManifestRequest* unsafe_arena_release_get_manifest_request();

  private:
  const ::dcv::extensions::GetManifestRequest& _internal_get_manifest_request() const;
  ::dcv::extensions::GetManifestRequest* _internal_mutable_get_manifest_request();

  public:
  // .dcv.extensions.SetupVirtualChannelRequest setup_virtual_channel_request = 20;
  bool has_setup_virtual_channel_request() const;
  private:
  bool _internal_has_setup_virtual_channel_request() const;

  public:
  void clear_setup_virtual_channel_request() ;
  const ::dcv::extensions::SetupVirtualChannelRequest& setup_virtual_channel_request() const;
  PROTOBUF_NODISCARD ::dcv::extensions::SetupVirtualChannelRequest* release_setup_virtual_channel_request();
  ::dcv::extensions::SetupVirtualChannelRequest* mutable_setup_virtual_channel_request();
  void set_allocated_setup_virtual_channel_request(::dcv::extensions::SetupVirtualChannelRequest* value);
  void unsafe_arena_set_allocated_setup_virtual_channel_request(::dcv::extensions::SetupVirtualChannelRequest* value);
  ::dcv::extensions::SetupVirtualChannelRequest* unsafe_arena_release_setup_virtual_channel_request();

  private:
  const ::dcv::extensions::SetupVirtualChannelRequest& _internal_setup_virtual_channel_request() const;
  ::dcv::extensions::SetupVirtualChannelRequest* _internal_mutable_setup_virtual_channel_request();

  public:
  // .dcv.extensions.CloseVirtualChannelRequest close_virtual_channel_request = 21;
  bool has_close_virtual_channel_request() const;
  private:
  bool _internal_has_close_virtual_channel_request() const;

  public:
  void clear_close_virtual_channel_request() ;
  const ::dcv::extensions::CloseVirtualChannelRequest& close_virtual_channel_request() const;
  PROTOBUF_NODISCARD ::dcv::extensions::CloseVirtualChannelRequest* release_close_virtual_channel_request();
  ::dcv::extensions::CloseVirtualChannelRequest* mutable_close_virtual_channel_request();
  void set_allocated_close_virtual_channel_request(::dcv::extensions::CloseVirtualChannelRequest* value);
  void unsafe_arena_set_allocated_close_virtual_channel_request(::dcv::extensions::CloseVirtualChannelRequest* value);
  ::dcv::extensions::CloseVirtualChannelRequest* unsafe_arena_release_close_virtual_channel_request();

  private:
  const ::dcv::extensions::CloseVirtualChannelRequest& _internal_close_virtual_channel_request() const;
  ::dcv::extensions::CloseVirtualChannelRequest* _internal_mutable_close_virtual_channel_request();

  public:
  // .dcv.extensions.SetCursorPointRequest set_cursor_point_request = 30;
  bool has_set_cursor_point_request() const;
  private:
  bool _internal_has_set_cursor_point_request() const;

  public:
  void clear_set_cursor_point_request() ;
  const ::dcv::extensions::SetCursorPointRequest& set_cursor_point_request() const;
  PROTOBUF_NODISCARD ::dcv::extensions::SetCursorPointRequest* release_set_cursor_point_request();
  ::dcv::extensions::SetCursorPointRequest* mutable_set_cursor_point_request();
  void set_allocated_set_cursor_point_request(::dcv::extensions::SetCursorPointRequest* value);
  void unsafe_arena_set_allocated_set_cursor_point_request(::dcv::extensions::SetCursorPointRequest* value);
  ::dcv::extensions::SetCursorPointRequest* unsafe_arena_release_set_cursor_point_request();

  private:
  const ::dcv::extensions::SetCursorPointRequest& _internal_set_cursor_point_request() const;
  ::dcv::extensions::SetCursorPointRequest* _internal_mutable_set_cursor_point_request();

  public:
  // .dcv.extensions.GetStreamingViewsRequest get_streaming_views_request = 31;
  bool has_get_streaming_views_request() const;
  private:
  bool _internal_has_get_streaming_views_request() const;

  public:
  void clear_get_streaming_views_request() ;
  const ::dcv::extensions::GetStreamingViewsRequest& get_streaming_views_request() const;
  PROTOBUF_NODISCARD ::dcv::extensions::GetStreamingViewsRequest* release_get_streaming_views_request();
  ::dcv::extensions::GetStreamingViewsRequest* mutable_get_streaming_views_request();
  void set_allocated_get_streaming_views_request(::dcv::extensions::GetStreamingViewsRequest* value);
  void unsafe_arena_set_allocated_get_streaming_views_request(::dcv::extensions::GetStreamingViewsRequest* value);
  ::dcv::extensions::GetStreamingViewsRequest* unsafe_arena_release_get_streaming_views_request();

  private:
  const ::dcv::extensions::GetStreamingViewsRequest& _internal_get_streaming_views_request() const;
  ::dcv::extensions::GetStreamingViewsRequest* _internal_mutable_get_streaming_views_request();

  public:
  // .dcv.extensions.IsPointInsideStreamingViewsRequest is_point_inside_streaming_views_request = 32;
  bool has_is_point_inside_streaming_views_request() const;
  private:
  bool _internal_has_is_point_inside_streaming_views_request() const;

  public:
  void clear_is_point_inside_streaming_views_request() ;
  const ::dcv::extensions::IsPointInsideStreamingViewsRequest& is_point_inside_streaming_views_request() const;
  PROTOBUF_NODISCARD ::dcv::extensions::IsPointInsideStreamingViewsRequest* release_is_point_inside_streaming_views_request();
  ::dcv::extensions::IsPointInsideStreamingViewsRequest* mutable_is_point_inside_streaming_views_request();
  void set_allocated_is_point_inside_streaming_views_request(::dcv::extensions::IsPointInsideStreamingViewsRequest* value);
  void unsafe_arena_set_allocated_is_point_inside_streaming_views_request(::dcv::extensions::IsPointInsideStreamingViewsRequest* value);
  ::dcv::extensions::IsPointInsideStreamingViewsRequest* unsafe_arena_release_is_point_inside_streaming_views_request();

  private:
  const ::dcv::extensions::IsPointInsideStreamingViewsRequest& _internal_is_point_inside_streaming_views_request() const;
  ::dcv::extensions::IsPointInsideStreamingViewsRequest* _internal_mutable_is_point_inside_streaming_views_request();

  public:
  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:dcv.extensions.Request)
 private:
  class _Internal;
  void set_has_get_dcv_info_request();
  void set_has_get_manifest_request();
  void set_has_setup_virtual_channel_request();
  void set_has_close_virtual_channel_request();
  void set_has_set_cursor_point_request();
  void set_has_get_streaming_views_request();
  void set_has_is_point_inside_streaming_views_request();

  inline bool has_request() const;
  inline void clear_has_request();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 8, 7,
      49, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr request_id_;
    union RequestUnion {
      constexpr RequestUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::dcv::extensions::GetDcvInfoRequest* get_dcv_info_request_;
      ::dcv::extensions::GetManifestRequest* get_manifest_request_;
      ::dcv::extensions::SetupVirtualChannelRequest* setup_virtual_channel_request_;
      ::dcv::extensions::CloseVirtualChannelRequest* close_virtual_channel_request_;
      ::dcv::extensions::SetCursorPointRequest* set_cursor_point_request_;
      ::dcv::extensions::GetStreamingViewsRequest* get_streaming_views_request_;
      ::dcv::extensions::IsPointInsideStreamingViewsRequest* is_point_inside_streaming_views_request_;
    } request_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class GetDcvInfoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.GetDcvInfoResponse) */ {
 public:
  inline GetDcvInfoResponse() : GetDcvInfoResponse(nullptr) {}
  ~GetDcvInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetDcvInfoResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetDcvInfoResponse(const GetDcvInfoResponse& from)
      : GetDcvInfoResponse(nullptr, from) {}
  GetDcvInfoResponse(GetDcvInfoResponse&& from) noexcept
    : GetDcvInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetDcvInfoResponse& operator=(const GetDcvInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDcvInfoResponse& operator=(GetDcvInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDcvInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDcvInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetDcvInfoResponse*>(
               &_GetDcvInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetDcvInfoResponse& a, GetDcvInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDcvInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDcvInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDcvInfoResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDcvInfoResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetDcvInfoResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetDcvInfoResponse& from) {
    GetDcvInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetDcvInfoResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.GetDcvInfoResponse";
  }
  protected:
  explicit GetDcvInfoResponse(::google::protobuf::Arena* arena);
  GetDcvInfoResponse(::google::protobuf::Arena* arena, const GetDcvInfoResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using DcvRole = GetDcvInfoResponse_DcvRole;
  static constexpr DcvRole Server = GetDcvInfoResponse_DcvRole_Server;
  static constexpr DcvRole Client = GetDcvInfoResponse_DcvRole_Client;
  static inline bool DcvRole_IsValid(int value) {
    return GetDcvInfoResponse_DcvRole_IsValid(value);
  }
  static constexpr DcvRole DcvRole_MIN = GetDcvInfoResponse_DcvRole_DcvRole_MIN;
  static constexpr DcvRole DcvRole_MAX = GetDcvInfoResponse_DcvRole_DcvRole_MAX;
  static constexpr int DcvRole_ARRAYSIZE = GetDcvInfoResponse_DcvRole_DcvRole_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* DcvRole_descriptor() {
    return GetDcvInfoResponse_DcvRole_descriptor();
  }
  template <typename T>
  static inline const std::string& DcvRole_Name(T value) {
    return GetDcvInfoResponse_DcvRole_Name(value);
  }
  static inline bool DcvRole_Parse(absl::string_view name, DcvRole* value) {
    return GetDcvInfoResponse_DcvRole_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kServerInfoFieldNumber = 3,
    kClientInfoFieldNumber = 4,
    kDcvProcessIdFieldNumber = 2,
    kDcvRoleFieldNumber = 1,
  };
  // .dcv.extensions.SoftwareInfo server_info = 3;
  bool has_server_info() const;
  void clear_server_info() ;
  const ::dcv::extensions::SoftwareInfo& server_info() const;
  PROTOBUF_NODISCARD ::dcv::extensions::SoftwareInfo* release_server_info();
  ::dcv::extensions::SoftwareInfo* mutable_server_info();
  void set_allocated_server_info(::dcv::extensions::SoftwareInfo* value);
  void unsafe_arena_set_allocated_server_info(::dcv::extensions::SoftwareInfo* value);
  ::dcv::extensions::SoftwareInfo* unsafe_arena_release_server_info();

  private:
  const ::dcv::extensions::SoftwareInfo& _internal_server_info() const;
  ::dcv::extensions::SoftwareInfo* _internal_mutable_server_info();

  public:
  // .dcv.extensions.SoftwareInfo client_info = 4;
  bool has_client_info() const;
  void clear_client_info() ;
  const ::dcv::extensions::SoftwareInfo& client_info() const;
  PROTOBUF_NODISCARD ::dcv::extensions::SoftwareInfo* release_client_info();
  ::dcv::extensions::SoftwareInfo* mutable_client_info();
  void set_allocated_client_info(::dcv::extensions::SoftwareInfo* value);
  void unsafe_arena_set_allocated_client_info(::dcv::extensions::SoftwareInfo* value);
  ::dcv::extensions::SoftwareInfo* unsafe_arena_release_client_info();

  private:
  const ::dcv::extensions::SoftwareInfo& _internal_client_info() const;
  ::dcv::extensions::SoftwareInfo* _internal_mutable_client_info();

  public:
  // int64 dcv_process_id = 2;
  void clear_dcv_process_id() ;
  ::int64_t dcv_process_id() const;
  void set_dcv_process_id(::int64_t value);

  private:
  ::int64_t _internal_dcv_process_id() const;
  void _internal_set_dcv_process_id(::int64_t value);

  public:
  // .dcv.extensions.GetDcvInfoResponse.DcvRole dcv_role = 1;
  void clear_dcv_role() ;
  ::dcv::extensions::GetDcvInfoResponse_DcvRole dcv_role() const;
  void set_dcv_role(::dcv::extensions::GetDcvInfoResponse_DcvRole value);

  private:
  ::dcv::extensions::GetDcvInfoResponse_DcvRole _internal_dcv_role() const;
  void _internal_set_dcv_role(::dcv::extensions::GetDcvInfoResponse_DcvRole value);

  public:
  // @@protoc_insertion_point(class_scope:dcv.extensions.GetDcvInfoResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::dcv::extensions::SoftwareInfo* server_info_;
    ::dcv::extensions::SoftwareInfo* client_info_;
    ::int64_t dcv_process_id_;
    int dcv_role_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class StreamingViewsChangedEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.StreamingViewsChangedEvent) */ {
 public:
  inline StreamingViewsChangedEvent() : StreamingViewsChangedEvent(nullptr) {}
  ~StreamingViewsChangedEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StreamingViewsChangedEvent(::google::protobuf::internal::ConstantInitialized);

  inline StreamingViewsChangedEvent(const StreamingViewsChangedEvent& from)
      : StreamingViewsChangedEvent(nullptr, from) {}
  StreamingViewsChangedEvent(StreamingViewsChangedEvent&& from) noexcept
    : StreamingViewsChangedEvent() {
    *this = ::std::move(from);
  }

  inline StreamingViewsChangedEvent& operator=(const StreamingViewsChangedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingViewsChangedEvent& operator=(StreamingViewsChangedEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamingViewsChangedEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamingViewsChangedEvent* internal_default_instance() {
    return reinterpret_cast<const StreamingViewsChangedEvent*>(
               &_StreamingViewsChangedEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(StreamingViewsChangedEvent& a, StreamingViewsChangedEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingViewsChangedEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingViewsChangedEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamingViewsChangedEvent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamingViewsChangedEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamingViewsChangedEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StreamingViewsChangedEvent& from) {
    StreamingViewsChangedEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StreamingViewsChangedEvent* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.StreamingViewsChangedEvent";
  }
  protected:
  explicit StreamingViewsChangedEvent(::google::protobuf::Arena* arena);
  StreamingViewsChangedEvent(::google::protobuf::Arena* arena, const StreamingViewsChangedEvent& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamingViewsFieldNumber = 1,
  };
  // .dcv.extensions.StreamingViews streaming_views = 1;
  bool has_streaming_views() const;
  void clear_streaming_views() ;
  const ::dcv::extensions::StreamingViews& streaming_views() const;
  PROTOBUF_NODISCARD ::dcv::extensions::StreamingViews* release_streaming_views();
  ::dcv::extensions::StreamingViews* mutable_streaming_views();
  void set_allocated_streaming_views(::dcv::extensions::StreamingViews* value);
  void unsafe_arena_set_allocated_streaming_views(::dcv::extensions::StreamingViews* value);
  ::dcv::extensions::StreamingViews* unsafe_arena_release_streaming_views();

  private:
  const ::dcv::extensions::StreamingViews& _internal_streaming_views() const;
  ::dcv::extensions::StreamingViews* _internal_mutable_streaming_views();

  public:
  // @@protoc_insertion_point(class_scope:dcv.extensions.StreamingViewsChangedEvent)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::dcv::extensions::StreamingViews* streaming_views_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class GetStreamingViewsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.GetStreamingViewsResponse) */ {
 public:
  inline GetStreamingViewsResponse() : GetStreamingViewsResponse(nullptr) {}
  ~GetStreamingViewsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetStreamingViewsResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetStreamingViewsResponse(const GetStreamingViewsResponse& from)
      : GetStreamingViewsResponse(nullptr, from) {}
  GetStreamingViewsResponse(GetStreamingViewsResponse&& from) noexcept
    : GetStreamingViewsResponse() {
    *this = ::std::move(from);
  }

  inline GetStreamingViewsResponse& operator=(const GetStreamingViewsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamingViewsResponse& operator=(GetStreamingViewsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStreamingViewsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStreamingViewsResponse* internal_default_instance() {
    return reinterpret_cast<const GetStreamingViewsResponse*>(
               &_GetStreamingViewsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetStreamingViewsResponse& a, GetStreamingViewsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamingViewsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStreamingViewsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStreamingViewsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStreamingViewsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetStreamingViewsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetStreamingViewsResponse& from) {
    GetStreamingViewsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetStreamingViewsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.GetStreamingViewsResponse";
  }
  protected:
  explicit GetStreamingViewsResponse(::google::protobuf::Arena* arena);
  GetStreamingViewsResponse(::google::protobuf::Arena* arena, const GetStreamingViewsResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamingViewsFieldNumber = 1,
  };
  // .dcv.extensions.StreamingViews streaming_views = 1;
  bool has_streaming_views() const;
  void clear_streaming_views() ;
  const ::dcv::extensions::StreamingViews& streaming_views() const;
  PROTOBUF_NODISCARD ::dcv::extensions::StreamingViews* release_streaming_views();
  ::dcv::extensions::StreamingViews* mutable_streaming_views();
  void set_allocated_streaming_views(::dcv::extensions::StreamingViews* value);
  void unsafe_arena_set_allocated_streaming_views(::dcv::extensions::StreamingViews* value);
  ::dcv::extensions::StreamingViews* unsafe_arena_release_streaming_views();

  private:
  const ::dcv::extensions::StreamingViews& _internal_streaming_views() const;
  ::dcv::extensions::StreamingViews* _internal_mutable_streaming_views();

  public:
  // @@protoc_insertion_point(class_scope:dcv.extensions.GetStreamingViewsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::dcv::extensions::StreamingViews* streaming_views_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class ExtensionMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.ExtensionMessage) */ {
 public:
  inline ExtensionMessage() : ExtensionMessage(nullptr) {}
  ~ExtensionMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ExtensionMessage(::google::protobuf::internal::ConstantInitialized);

  inline ExtensionMessage(const ExtensionMessage& from)
      : ExtensionMessage(nullptr, from) {}
  ExtensionMessage(ExtensionMessage&& from) noexcept
    : ExtensionMessage() {
    *this = ::std::move(from);
  }

  inline ExtensionMessage& operator=(const ExtensionMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionMessage& operator=(ExtensionMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtensionMessage& default_instance() {
    return *internal_default_instance();
  }
  enum MsgCase {
    kRequest = 1,
    MSG_NOT_SET = 0,
  };

  static inline const ExtensionMessage* internal_default_instance() {
    return reinterpret_cast<const ExtensionMessage*>(
               &_ExtensionMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ExtensionMessage& a, ExtensionMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtensionMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtensionMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtensionMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ExtensionMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ExtensionMessage& from) {
    ExtensionMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ExtensionMessage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.ExtensionMessage";
  }
  protected:
  explicit ExtensionMessage(::google::protobuf::Arena* arena);
  ExtensionMessage(::google::protobuf::Arena* arena, const ExtensionMessage& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // .dcv.extensions.Request request = 1;
  bool has_request() const;
  private:
  bool _internal_has_request() const;

  public:
  void clear_request() ;
  const ::dcv::extensions::Request& request() const;
  PROTOBUF_NODISCARD ::dcv::extensions::Request* release_request();
  ::dcv::extensions::Request* mutable_request();
  void set_allocated_request(::dcv::extensions::Request* value);
  void unsafe_arena_set_allocated_request(::dcv::extensions::Request* value);
  ::dcv::extensions::Request* unsafe_arena_release_request();

  private:
  const ::dcv::extensions::Request& _internal_request() const;
  ::dcv::extensions::Request* _internal_mutable_request();

  public:
  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:dcv.extensions.ExtensionMessage)
 private:
  class _Internal;
  void set_has_request();

  inline bool has_msg() const;
  inline void clear_has_msg();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union MsgUnion {
      constexpr MsgUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::dcv::extensions::Request* request_;
    } msg_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Response(::google::protobuf::internal::ConstantInitialized);

  inline Response(const Response& from)
      : Response(nullptr, from) {}
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseCase {
    kGetDcvInfoResponse = 10,
    kGetManifestResponse = 11,
    kSetupVirtualChannelResponse = 20,
    kCloseVirtualChannelResponse = 21,
    kSetCursorPointResponse = 30,
    kGetStreamingViewsResponse = 31,
    kIsPointInsideStreamingViewsResponse = 32,
    RESPONSE_NOT_SET = 0,
  };

  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Response& from) {
    Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Response* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.Response";
  }
  protected:
  explicit Response(::google::protobuf::Arena* arena);
  Response(::google::protobuf::Arena* arena, const Response& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Status = Response_Status;
  static constexpr Status NONE = Response_Status_NONE;
  static constexpr Status SUCCESS = Response_Status_SUCCESS;
  static constexpr Status ERROR_GENERIC = Response_Status_ERROR_GENERIC;
  static constexpr Status ERROR_ACCESS_DENIED = Response_Status_ERROR_ACCESS_DENIED;
  static constexpr Status ERROR_NOT_IMPLEMENTED = Response_Status_ERROR_NOT_IMPLEMENTED;
  static constexpr Status ERROR_INVALID_PARAMETER = Response_Status_ERROR_INVALID_PARAMETER;
  static constexpr Status ERROR_INVALID_VIRTUAL_CHANNEL_NAMESPACE_IN_MANIFEST = Response_Status_ERROR_INVALID_VIRTUAL_CHANNEL_NAMESPACE_IN_MANIFEST;
  static constexpr Status ERROR_TOO_MANY_VIRTUAL_CHANNELS = Response_Status_ERROR_TOO_MANY_VIRTUAL_CHANNELS;
  static inline bool Status_IsValid(int value) {
    return Response_Status_IsValid(value);
  }
  static constexpr Status Status_MIN = Response_Status_Status_MIN;
  static constexpr Status Status_MAX = Response_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE = Response_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Status_descriptor() {
    return Response_Status_descriptor();
  }
  template <typename T>
  static inline const std::string& Status_Name(T value) {
    return Response_Status_Name(value);
  }
  static inline bool Status_Parse(absl::string_view name, Status* value) {
    return Response_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kGetDcvInfoResponseFieldNumber = 10,
    kGetManifestResponseFieldNumber = 11,
    kSetupVirtualChannelResponseFieldNumber = 20,
    kCloseVirtualChannelResponseFieldNumber = 21,
    kSetCursorPointResponseFieldNumber = 30,
    kGetStreamingViewsResponseFieldNumber = 31,
    kIsPointInsideStreamingViewsResponseFieldNumber = 32,
  };
  // string request_id = 1;
  void clear_request_id() ;
  const std::string& request_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_request_id(Arg_&& arg, Args_... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* value);

  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(
      const std::string& value);
  std::string* _internal_mutable_request_id();

  public:
  // .dcv.extensions.Response.Status status = 2;
  void clear_status() ;
  ::dcv::extensions::Response_Status status() const;
  void set_status(::dcv::extensions::Response_Status value);

  private:
  ::dcv::extensions::Response_Status _internal_status() const;
  void _internal_set_status(::dcv::extensions::Response_Status value);

  public:
  // .dcv.extensions.GetDcvInfoResponse get_dcv_info_response = 10;
  bool has_get_dcv_info_response() const;
  private:
  bool _internal_has_get_dcv_info_response() const;

  public:
  void clear_get_dcv_info_response() ;
  const ::dcv::extensions::GetDcvInfoResponse& get_dcv_info_response() const;
  PROTOBUF_NODISCARD ::dcv::extensions::GetDcvInfoResponse* release_get_dcv_info_response();
  ::dcv::extensions::GetDcvInfoResponse* mutable_get_dcv_info_response();
  void set_allocated_get_dcv_info_response(::dcv::extensions::GetDcvInfoResponse* value);
  void unsafe_arena_set_allocated_get_dcv_info_response(::dcv::extensions::GetDcvInfoResponse* value);
  ::dcv::extensions::GetDcvInfoResponse* unsafe_arena_release_get_dcv_info_response();

  private:
  const ::dcv::extensions::GetDcvInfoResponse& _internal_get_dcv_info_response() const;
  ::dcv::extensions::GetDcvInfoResponse* _internal_mutable_get_dcv_info_response();

  public:
  // .dcv.extensions.GetManifestResponse get_manifest_response = 11;
  bool has_get_manifest_response() const;
  private:
  bool _internal_has_get_manifest_response() const;

  public:
  void clear_get_manifest_response() ;
  const ::dcv::extensions::GetManifestResponse& get_manifest_response() const;
  PROTOBUF_NODISCARD ::dcv::extensions::GetManifestResponse* release_get_manifest_response();
  ::dcv::extensions::GetManifestResponse* mutable_get_manifest_response();
  void set_allocated_get_manifest_response(::dcv::extensions::GetManifestResponse* value);
  void unsafe_arena_set_allocated_get_manifest_response(::dcv::extensions::GetManifestResponse* value);
  ::dcv::extensions::GetManifestResponse* unsafe_arena_release_get_manifest_response();

  private:
  const ::dcv::extensions::GetManifestResponse& _internal_get_manifest_response() const;
  ::dcv::extensions::GetManifestResponse* _internal_mutable_get_manifest_response();

  public:
  // .dcv.extensions.SetupVirtualChannelResponse setup_virtual_channel_response = 20;
  bool has_setup_virtual_channel_response() const;
  private:
  bool _internal_has_setup_virtual_channel_response() const;

  public:
  void clear_setup_virtual_channel_response() ;
  const ::dcv::extensions::SetupVirtualChannelResponse& setup_virtual_channel_response() const;
  PROTOBUF_NODISCARD ::dcv::extensions::SetupVirtualChannelResponse* release_setup_virtual_channel_response();
  ::dcv::extensions::SetupVirtualChannelResponse* mutable_setup_virtual_channel_response();
  void set_allocated_setup_virtual_channel_response(::dcv::extensions::SetupVirtualChannelResponse* value);
  void unsafe_arena_set_allocated_setup_virtual_channel_response(::dcv::extensions::SetupVirtualChannelResponse* value);
  ::dcv::extensions::SetupVirtualChannelResponse* unsafe_arena_release_setup_virtual_channel_response();

  private:
  const ::dcv::extensions::SetupVirtualChannelResponse& _internal_setup_virtual_channel_response() const;
  ::dcv::extensions::SetupVirtualChannelResponse* _internal_mutable_setup_virtual_channel_response();

  public:
  // .dcv.extensions.CloseVirtualChannelResponse close_virtual_channel_response = 21;
  bool has_close_virtual_channel_response() const;
  private:
  bool _internal_has_close_virtual_channel_response() const;

  public:
  void clear_close_virtual_channel_response() ;
  const ::dcv::extensions::CloseVirtualChannelResponse& close_virtual_channel_response() const;
  PROTOBUF_NODISCARD ::dcv::extensions::CloseVirtualChannelResponse* release_close_virtual_channel_response();
  ::dcv::extensions::CloseVirtualChannelResponse* mutable_close_virtual_channel_response();
  void set_allocated_close_virtual_channel_response(::dcv::extensions::CloseVirtualChannelResponse* value);
  void unsafe_arena_set_allocated_close_virtual_channel_response(::dcv::extensions::CloseVirtualChannelResponse* value);
  ::dcv::extensions::CloseVirtualChannelResponse* unsafe_arena_release_close_virtual_channel_response();

  private:
  const ::dcv::extensions::CloseVirtualChannelResponse& _internal_close_virtual_channel_response() const;
  ::dcv::extensions::CloseVirtualChannelResponse* _internal_mutable_close_virtual_channel_response();

  public:
  // .dcv.extensions.SetCursorPointResponse set_cursor_point_response = 30;
  bool has_set_cursor_point_response() const;
  private:
  bool _internal_has_set_cursor_point_response() const;

  public:
  void clear_set_cursor_point_response() ;
  const ::dcv::extensions::SetCursorPointResponse& set_cursor_point_response() const;
  PROTOBUF_NODISCARD ::dcv::extensions::SetCursorPointResponse* release_set_cursor_point_response();
  ::dcv::extensions::SetCursorPointResponse* mutable_set_cursor_point_response();
  void set_allocated_set_cursor_point_response(::dcv::extensions::SetCursorPointResponse* value);
  void unsafe_arena_set_allocated_set_cursor_point_response(::dcv::extensions::SetCursorPointResponse* value);
  ::dcv::extensions::SetCursorPointResponse* unsafe_arena_release_set_cursor_point_response();

  private:
  const ::dcv::extensions::SetCursorPointResponse& _internal_set_cursor_point_response() const;
  ::dcv::extensions::SetCursorPointResponse* _internal_mutable_set_cursor_point_response();

  public:
  // .dcv.extensions.GetStreamingViewsResponse get_streaming_views_response = 31;
  bool has_get_streaming_views_response() const;
  private:
  bool _internal_has_get_streaming_views_response() const;

  public:
  void clear_get_streaming_views_response() ;
  const ::dcv::extensions::GetStreamingViewsResponse& get_streaming_views_response() const;
  PROTOBUF_NODISCARD ::dcv::extensions::GetStreamingViewsResponse* release_get_streaming_views_response();
  ::dcv::extensions::GetStreamingViewsResponse* mutable_get_streaming_views_response();
  void set_allocated_get_streaming_views_response(::dcv::extensions::GetStreamingViewsResponse* value);
  void unsafe_arena_set_allocated_get_streaming_views_response(::dcv::extensions::GetStreamingViewsResponse* value);
  ::dcv::extensions::GetStreamingViewsResponse* unsafe_arena_release_get_streaming_views_response();

  private:
  const ::dcv::extensions::GetStreamingViewsResponse& _internal_get_streaming_views_response() const;
  ::dcv::extensions::GetStreamingViewsResponse* _internal_mutable_get_streaming_views_response();

  public:
  // .dcv.extensions.IsPointInsideStreamingViewsResponse is_point_inside_streaming_views_response = 32;
  bool has_is_point_inside_streaming_views_response() const;
  private:
  bool _internal_has_is_point_inside_streaming_views_response() const;

  public:
  void clear_is_point_inside_streaming_views_response() ;
  const ::dcv::extensions::IsPointInsideStreamingViewsResponse& is_point_inside_streaming_views_response() const;
  PROTOBUF_NODISCARD ::dcv::extensions::IsPointInsideStreamingViewsResponse* release_is_point_inside_streaming_views_response();
  ::dcv::extensions::IsPointInsideStreamingViewsResponse* mutable_is_point_inside_streaming_views_response();
  void set_allocated_is_point_inside_streaming_views_response(::dcv::extensions::IsPointInsideStreamingViewsResponse* value);
  void unsafe_arena_set_allocated_is_point_inside_streaming_views_response(::dcv::extensions::IsPointInsideStreamingViewsResponse* value);
  ::dcv::extensions::IsPointInsideStreamingViewsResponse* unsafe_arena_release_is_point_inside_streaming_views_response();

  private:
  const ::dcv::extensions::IsPointInsideStreamingViewsResponse& _internal_is_point_inside_streaming_views_response() const;
  ::dcv::extensions::IsPointInsideStreamingViewsResponse* _internal_mutable_is_point_inside_streaming_views_response();

  public:
  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:dcv.extensions.Response)
 private:
  class _Internal;
  void set_has_get_dcv_info_response();
  void set_has_get_manifest_response();
  void set_has_setup_virtual_channel_response();
  void set_has_close_virtual_channel_response();
  void set_has_set_cursor_point_response();
  void set_has_get_streaming_views_response();
  void set_has_is_point_inside_streaming_views_response();

  inline bool has_response() const;
  inline void clear_has_response();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 9, 7,
      50, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr request_id_;
    int status_;
    union ResponseUnion {
      constexpr ResponseUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::dcv::extensions::GetDcvInfoResponse* get_dcv_info_response_;
      ::dcv::extensions::GetManifestResponse* get_manifest_response_;
      ::dcv::extensions::SetupVirtualChannelResponse* setup_virtual_channel_response_;
      ::dcv::extensions::CloseVirtualChannelResponse* close_virtual_channel_response_;
      ::dcv::extensions::SetCursorPointResponse* set_cursor_point_response_;
      ::dcv::extensions::GetStreamingViewsResponse* get_streaming_views_response_;
      ::dcv::extensions::IsPointInsideStreamingViewsResponse* is_point_inside_streaming_views_response_;
    } response_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class Event final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Event(::google::protobuf::internal::ConstantInitialized);

  inline Event(const Event& from)
      : Event(nullptr, from) {}
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kVirtualChannelReadyEvent = 10,
    kVirtualChannelClosedEvent = 20,
    kStreamingViewsChangedEvent = 30,
    EVENT_NOT_SET = 0,
  };

  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Event& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Event& from) {
    Event::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Event* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.Event";
  }
  protected:
  explicit Event(::google::protobuf::Arena* arena);
  Event(::google::protobuf::Arena* arena, const Event& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualChannelReadyEventFieldNumber = 10,
    kVirtualChannelClosedEventFieldNumber = 20,
    kStreamingViewsChangedEventFieldNumber = 30,
  };
  // .dcv.extensions.VirtualChannelReadyEvent virtual_channel_ready_event = 10;
  bool has_virtual_channel_ready_event() const;
  private:
  bool _internal_has_virtual_channel_ready_event() const;

  public:
  void clear_virtual_channel_ready_event() ;
  const ::dcv::extensions::VirtualChannelReadyEvent& virtual_channel_ready_event() const;
  PROTOBUF_NODISCARD ::dcv::extensions::VirtualChannelReadyEvent* release_virtual_channel_ready_event();
  ::dcv::extensions::VirtualChannelReadyEvent* mutable_virtual_channel_ready_event();
  void set_allocated_virtual_channel_ready_event(::dcv::extensions::VirtualChannelReadyEvent* value);
  void unsafe_arena_set_allocated_virtual_channel_ready_event(::dcv::extensions::VirtualChannelReadyEvent* value);
  ::dcv::extensions::VirtualChannelReadyEvent* unsafe_arena_release_virtual_channel_ready_event();

  private:
  const ::dcv::extensions::VirtualChannelReadyEvent& _internal_virtual_channel_ready_event() const;
  ::dcv::extensions::VirtualChannelReadyEvent* _internal_mutable_virtual_channel_ready_event();

  public:
  // .dcv.extensions.VirtualChannelClosedEvent virtual_channel_closed_event = 20;
  bool has_virtual_channel_closed_event() const;
  private:
  bool _internal_has_virtual_channel_closed_event() const;

  public:
  void clear_virtual_channel_closed_event() ;
  const ::dcv::extensions::VirtualChannelClosedEvent& virtual_channel_closed_event() const;
  PROTOBUF_NODISCARD ::dcv::extensions::VirtualChannelClosedEvent* release_virtual_channel_closed_event();
  ::dcv::extensions::VirtualChannelClosedEvent* mutable_virtual_channel_closed_event();
  void set_allocated_virtual_channel_closed_event(::dcv::extensions::VirtualChannelClosedEvent* value);
  void unsafe_arena_set_allocated_virtual_channel_closed_event(::dcv::extensions::VirtualChannelClosedEvent* value);
  ::dcv::extensions::VirtualChannelClosedEvent* unsafe_arena_release_virtual_channel_closed_event();

  private:
  const ::dcv::extensions::VirtualChannelClosedEvent& _internal_virtual_channel_closed_event() const;
  ::dcv::extensions::VirtualChannelClosedEvent* _internal_mutable_virtual_channel_closed_event();

  public:
  // .dcv.extensions.StreamingViewsChangedEvent streaming_views_changed_event = 30;
  bool has_streaming_views_changed_event() const;
  private:
  bool _internal_has_streaming_views_changed_event() const;

  public:
  void clear_streaming_views_changed_event() ;
  const ::dcv::extensions::StreamingViewsChangedEvent& streaming_views_changed_event() const;
  PROTOBUF_NODISCARD ::dcv::extensions::StreamingViewsChangedEvent* release_streaming_views_changed_event();
  ::dcv::extensions::StreamingViewsChangedEvent* mutable_streaming_views_changed_event();
  void set_allocated_streaming_views_changed_event(::dcv::extensions::StreamingViewsChangedEvent* value);
  void unsafe_arena_set_allocated_streaming_views_changed_event(::dcv::extensions::StreamingViewsChangedEvent* value);
  ::dcv::extensions::StreamingViewsChangedEvent* unsafe_arena_release_streaming_views_changed_event();

  private:
  const ::dcv::extensions::StreamingViewsChangedEvent& _internal_streaming_views_changed_event() const;
  ::dcv::extensions::StreamingViewsChangedEvent* _internal_mutable_streaming_views_changed_event();

  public:
  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:dcv.extensions.Event)
 private:
  class _Internal;
  void set_has_virtual_channel_ready_event();
  void set_has_virtual_channel_closed_event();
  void set_has_streaming_views_changed_event();

  inline bool has_event() const;
  inline void clear_has_event();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union EventUnion {
      constexpr EventUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::dcv::extensions::VirtualChannelReadyEvent* virtual_channel_ready_event_;
      ::dcv::extensions::VirtualChannelClosedEvent* virtual_channel_closed_event_;
      ::dcv::extensions::StreamingViewsChangedEvent* streaming_views_changed_event_;
    } event_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extensions_2eproto;
};// -------------------------------------------------------------------

class DcvMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.DcvMessage) */ {
 public:
  inline DcvMessage() : DcvMessage(nullptr) {}
  ~DcvMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DcvMessage(::google::protobuf::internal::ConstantInitialized);

  inline DcvMessage(const DcvMessage& from)
      : DcvMessage(nullptr, from) {}
  DcvMessage(DcvMessage&& from) noexcept
    : DcvMessage() {
    *this = ::std::move(from);
  }

  inline DcvMessage& operator=(const DcvMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DcvMessage& operator=(DcvMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DcvMessage& default_instance() {
    return *internal_default_instance();
  }
  enum MsgCase {
    kResponse = 2,
    kEvent = 3,
    MSG_NOT_SET = 0,
  };

  static inline const DcvMessage* internal_default_instance() {
    return reinterpret_cast<const DcvMessage*>(
               &_DcvMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(DcvMessage& a, DcvMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DcvMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DcvMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DcvMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DcvMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DcvMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DcvMessage& from) {
    DcvMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DcvMessage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "dcv.extensions.DcvMessage";
  }
  protected:
  explicit DcvMessage(::google::protobuf::Arena* arena);
  DcvMessage(::google::protobuf::Arena* arena, const DcvMessage& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 2,
    kEventFieldNumber = 3,
  };
  // .dcv.extensions.Response response = 2;
  bool has_response() const;
  private:
  bool _internal_has_response() const;

  public:
  void clear_response() ;
  const ::dcv::extensions::Response& response() const;
  PROTOBUF_NODISCARD ::dcv::extensions::Response* release_response();
  ::dcv::extensions::Response* mutable_response();
  void set_allocated_response(::dcv::extensions::Response* value);
  void unsafe_arena_set_allocated_response(::dcv::extensions::Response* value);
  ::dcv::extensions::Response* unsafe_arena_release_response();

  private:
  const ::dcv::extensions::Response& _internal_response() const;
  ::dcv::extensions::Response* _internal_mutable_response();

  public:
  // .dcv.extensions.Event event = 3;
  bool has_event() const;
  private:
  bool _internal_has_event() const;

  public:
  void clear_event() ;
  const ::dcv::extensions::Event& event() const;
  PROTOBUF_NODISCARD ::dcv::extensions::Event* release_event();
  ::dcv::extensions::Event* mutable_event();
  void set_allocated_event(::dcv::extensions::Event* value);
  void unsafe_arena_set_allocated_event(::dcv::extensions::Event* value);
  ::dcv::extensions::Event* unsafe_arena_release_event();

  private:
  const ::dcv::extensions::Event& _internal_event() const;
  ::dcv::extensions::Event* _internal_mutable_event();

  public:
  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:dcv.extensions.DcvMessage)
 private:
  class _Internal;
  void set_has_response();
  void set_has_event();

  inline bool has_msg() const;
  inline void clear_has_msg();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union MsgUnion {
      constexpr MsgUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::dcv::extensions::Response* response_;
      ::dcv::extensions::Event* event_;
    } msg_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_extensions_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SoftwareInfo_VersionNumber

// uint32 major = 1;
inline void SoftwareInfo_VersionNumber::clear_major() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.major_ = 0u;
}
inline ::uint32_t SoftwareInfo_VersionNumber::major() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.VersionNumber.major)
  return _internal_major();
}
inline void SoftwareInfo_VersionNumber::set_major(::uint32_t value) {
  _internal_set_major(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.VersionNumber.major)
}
inline ::uint32_t SoftwareInfo_VersionNumber::_internal_major() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.major_;
}
inline void SoftwareInfo_VersionNumber::_internal_set_major(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.major_ = value;
}

// uint32 minor = 2;
inline void SoftwareInfo_VersionNumber::clear_minor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.minor_ = 0u;
}
inline ::uint32_t SoftwareInfo_VersionNumber::minor() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.VersionNumber.minor)
  return _internal_minor();
}
inline void SoftwareInfo_VersionNumber::set_minor(::uint32_t value) {
  _internal_set_minor(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.VersionNumber.minor)
}
inline ::uint32_t SoftwareInfo_VersionNumber::_internal_minor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.minor_;
}
inline void SoftwareInfo_VersionNumber::_internal_set_minor(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.minor_ = value;
}

// uint32 revision = 3;
inline void SoftwareInfo_VersionNumber::clear_revision() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.revision_ = 0u;
}
inline ::uint32_t SoftwareInfo_VersionNumber::revision() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.VersionNumber.revision)
  return _internal_revision();
}
inline void SoftwareInfo_VersionNumber::set_revision(::uint32_t value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.VersionNumber.revision)
}
inline ::uint32_t SoftwareInfo_VersionNumber::_internal_revision() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.revision_;
}
inline void SoftwareInfo_VersionNumber::_internal_set_revision(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.revision_ = value;
}

// -------------------------------------------------------------------

// SoftwareInfo

// string name = 1;
inline void SoftwareInfo::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SoftwareInfo::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SoftwareInfo::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.name)
}
inline std::string* SoftwareInfo::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SoftwareInfo.name)
  return _s;
}
inline const std::string& SoftwareInfo::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void SoftwareInfo::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* SoftwareInfo::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* SoftwareInfo::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dcv.extensions.SoftwareInfo.name)
  return _impl_.name_.Release();
}
inline void SoftwareInfo::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SoftwareInfo.name)
}

// .dcv.extensions.SoftwareInfo.VersionNumber version = 2;
inline bool SoftwareInfo::has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.version_ != nullptr);
  return value;
}
inline void SoftwareInfo::clear_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.version_ != nullptr) _impl_.version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::dcv::extensions::SoftwareInfo_VersionNumber& SoftwareInfo::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::dcv::extensions::SoftwareInfo_VersionNumber* p = _impl_.version_;
  return p != nullptr ? *p : reinterpret_cast<const ::dcv::extensions::SoftwareInfo_VersionNumber&>(::dcv::extensions::_SoftwareInfo_VersionNumber_default_instance_);
}
inline const ::dcv::extensions::SoftwareInfo_VersionNumber& SoftwareInfo::version() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.version)
  return _internal_version();
}
inline void SoftwareInfo::unsafe_arena_set_allocated_version(::dcv::extensions::SoftwareInfo_VersionNumber* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.version_);
  }
  _impl_.version_ = reinterpret_cast<::dcv::extensions::SoftwareInfo_VersionNumber*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.SoftwareInfo.version)
}
inline ::dcv::extensions::SoftwareInfo_VersionNumber* SoftwareInfo::release_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dcv::extensions::SoftwareInfo_VersionNumber* released = _impl_.version_;
  _impl_.version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::dcv::extensions::SoftwareInfo_VersionNumber* SoftwareInfo::unsafe_arena_release_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dcv.extensions.SoftwareInfo.version)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dcv::extensions::SoftwareInfo_VersionNumber* temp = _impl_.version_;
  _impl_.version_ = nullptr;
  return temp;
}
inline ::dcv::extensions::SoftwareInfo_VersionNumber* SoftwareInfo::_internal_mutable_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.version_ == nullptr) {
    auto* p = CreateMaybeMessage<::dcv::extensions::SoftwareInfo_VersionNumber>(GetArena());
    _impl_.version_ = reinterpret_cast<::dcv::extensions::SoftwareInfo_VersionNumber*>(p);
  }
  return _impl_.version_;
}
inline ::dcv::extensions::SoftwareInfo_VersionNumber* SoftwareInfo::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::SoftwareInfo_VersionNumber* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SoftwareInfo.version)
  return _msg;
}
inline void SoftwareInfo::set_allocated_version(::dcv::extensions::SoftwareInfo_VersionNumber* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::dcv::extensions::SoftwareInfo_VersionNumber*>(_impl_.version_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::dcv::extensions::SoftwareInfo_VersionNumber*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.version_ = reinterpret_cast<::dcv::extensions::SoftwareInfo_VersionNumber*>(value);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SoftwareInfo.version)
}

// string os = 3;
inline void SoftwareInfo::clear_os() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.os_.ClearToEmpty();
}
inline const std::string& SoftwareInfo::os() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.os)
  return _internal_os();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SoftwareInfo::set_os(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.os_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.os)
}
inline std::string* SoftwareInfo::mutable_os() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_os();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SoftwareInfo.os)
  return _s;
}
inline const std::string& SoftwareInfo::_internal_os() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.os_.Get();
}
inline void SoftwareInfo::_internal_set_os(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.os_.Set(value, GetArena());
}
inline std::string* SoftwareInfo::_internal_mutable_os() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.os_.Mutable( GetArena());
}
inline std::string* SoftwareInfo::release_os() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dcv.extensions.SoftwareInfo.os)
  return _impl_.os_.Release();
}
inline void SoftwareInfo::set_allocated_os(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.os_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.os_.IsDefault()) {
          _impl_.os_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SoftwareInfo.os)
}

// string arch = 4;
inline void SoftwareInfo::clear_arch() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.arch_.ClearToEmpty();
}
inline const std::string& SoftwareInfo::arch() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.arch)
  return _internal_arch();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SoftwareInfo::set_arch(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.arch_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.arch)
}
inline std::string* SoftwareInfo::mutable_arch() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_arch();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SoftwareInfo.arch)
  return _s;
}
inline const std::string& SoftwareInfo::_internal_arch() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.arch_.Get();
}
inline void SoftwareInfo::_internal_set_arch(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.arch_.Set(value, GetArena());
}
inline std::string* SoftwareInfo::_internal_mutable_arch() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.arch_.Mutable( GetArena());
}
inline std::string* SoftwareInfo::release_arch() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dcv.extensions.SoftwareInfo.arch)
  return _impl_.arch_.Release();
}
inline void SoftwareInfo::set_allocated_arch(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.arch_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.arch_.IsDefault()) {
          _impl_.arch_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SoftwareInfo.arch)
}

// string hostname = 5;
inline void SoftwareInfo::clear_hostname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.hostname_.ClearToEmpty();
}
inline const std::string& SoftwareInfo::hostname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.hostname)
  return _internal_hostname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SoftwareInfo::set_hostname(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.hostname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.hostname)
}
inline std::string* SoftwareInfo::mutable_hostname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SoftwareInfo.hostname)
  return _s;
}
inline const std::string& SoftwareInfo::_internal_hostname() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.hostname_.Get();
}
inline void SoftwareInfo::_internal_set_hostname(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.hostname_.Set(value, GetArena());
}
inline std::string* SoftwareInfo::_internal_mutable_hostname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.hostname_.Mutable( GetArena());
}
inline std::string* SoftwareInfo::release_hostname() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dcv.extensions.SoftwareInfo.hostname)
  return _impl_.hostname_.Release();
}
inline void SoftwareInfo::set_allocated_hostname(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.hostname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hostname_.IsDefault()) {
          _impl_.hostname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SoftwareInfo.hostname)
}

// -------------------------------------------------------------------

// Point

// int32 x = 1;
inline void Point::clear_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.x_ = 0;
}
inline ::int32_t Point::x() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Point.x)
  return _internal_x();
}
inline void Point::set_x(::int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.Point.x)
}
inline ::int32_t Point::_internal_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_;
}
inline void Point::_internal_set_x(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.x_ = value;
}

// int32 y = 2;
inline void Point::clear_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.y_ = 0;
}
inline ::int32_t Point::y() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Point.y)
  return _internal_y();
}
inline void Point::set_y(::int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.Point.y)
}
inline ::int32_t Point::_internal_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_;
}
inline void Point::_internal_set_y(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.y_ = value;
}

// -------------------------------------------------------------------

// Rect

// int32 x = 1;
inline void Rect::clear_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.x_ = 0;
}
inline ::int32_t Rect::x() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Rect.x)
  return _internal_x();
}
inline void Rect::set_x(::int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.Rect.x)
}
inline ::int32_t Rect::_internal_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_;
}
inline void Rect::_internal_set_x(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.x_ = value;
}

// int32 y = 2;
inline void Rect::clear_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.y_ = 0;
}
inline ::int32_t Rect::y() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Rect.y)
  return _internal_y();
}
inline void Rect::set_y(::int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.Rect.y)
}
inline ::int32_t Rect::_internal_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_;
}
inline void Rect::_internal_set_y(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.y_ = value;
}

// uint32 width = 3;
inline void Rect::clear_width() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.width_ = 0u;
}
inline ::uint32_t Rect::width() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Rect.width)
  return _internal_width();
}
inline void Rect::set_width(::uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.Rect.width)
}
inline ::uint32_t Rect::_internal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_;
}
inline void Rect::_internal_set_width(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.width_ = value;
}

// uint32 height = 4;
inline void Rect::clear_height() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.height_ = 0u;
}
inline ::uint32_t Rect::height() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Rect.height)
  return _internal_height();
}
inline void Rect::set_height(::uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.Rect.height)
}
inline ::uint32_t Rect::_internal_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_;
}
inline void Rect::_internal_set_height(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.height_ = value;
}

// -------------------------------------------------------------------

// StreamingViews_StreamingView

// int32 view_id = 1;
inline void StreamingViews_StreamingView::clear_view_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.view_id_ = 0;
}
inline ::int32_t StreamingViews_StreamingView::view_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.StreamingViews.StreamingView.view_id)
  return _internal_view_id();
}
inline void StreamingViews_StreamingView::set_view_id(::int32_t value) {
  _internal_set_view_id(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.StreamingViews.StreamingView.view_id)
}
inline ::int32_t StreamingViews_StreamingView::_internal_view_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.view_id_;
}
inline void StreamingViews_StreamingView::_internal_set_view_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.view_id_ = value;
}

// .dcv.extensions.Rect local_area = 2;
inline bool StreamingViews_StreamingView::has_local_area() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.local_area_ != nullptr);
  return value;
}
inline void StreamingViews_StreamingView::clear_local_area() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.local_area_ != nullptr) _impl_.local_area_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::dcv::extensions::Rect& StreamingViews_StreamingView::_internal_local_area() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::dcv::extensions::Rect* p = _impl_.local_area_;
  return p != nullptr ? *p : reinterpret_cast<const ::dcv::extensions::Rect&>(::dcv::extensions::_Rect_default_instance_);
}
inline const ::dcv::extensions::Rect& StreamingViews_StreamingView::local_area() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.StreamingViews.StreamingView.local_area)
  return _internal_local_area();
}
inline void StreamingViews_StreamingView::unsafe_arena_set_allocated_local_area(::dcv::extensions::Rect* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.local_area_);
  }
  _impl_.local_area_ = reinterpret_cast<::dcv::extensions::Rect*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.StreamingViews.StreamingView.local_area)
}
inline ::dcv::extensions::Rect* StreamingViews_StreamingView::release_local_area() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dcv::extensions::Rect* released = _impl_.local_area_;
  _impl_.local_area_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::dcv::extensions::Rect* StreamingViews_StreamingView::unsafe_arena_release_local_area() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dcv.extensions.StreamingViews.StreamingView.local_area)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dcv::extensions::Rect* temp = _impl_.local_area_;
  _impl_.local_area_ = nullptr;
  return temp;
}
inline ::dcv::extensions::Rect* StreamingViews_StreamingView::_internal_mutable_local_area() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.local_area_ == nullptr) {
    auto* p = CreateMaybeMessage<::dcv::extensions::Rect>(GetArena());
    _impl_.local_area_ = reinterpret_cast<::dcv::extensions::Rect*>(p);
  }
  return _impl_.local_area_;
}
inline ::dcv::extensions::Rect* StreamingViews_StreamingView::mutable_local_area() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::Rect* _msg = _internal_mutable_local_area();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.StreamingViews.StreamingView.local_area)
  return _msg;
}
inline void StreamingViews_StreamingView::set_allocated_local_area(::dcv::extensions::Rect* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::dcv::extensions::Rect*>(_impl_.local_area_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::dcv::extensions::Rect*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.local_area_ = reinterpret_cast<::dcv::extensions::Rect*>(value);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.StreamingViews.StreamingView.local_area)
}

// double zoom_factor = 3;
inline void StreamingViews_StreamingView::clear_zoom_factor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.zoom_factor_ = 0;
}
inline double StreamingViews_StreamingView::zoom_factor() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.StreamingViews.StreamingView.zoom_factor)
  return _internal_zoom_factor();
}
inline void StreamingViews_StreamingView::set_zoom_factor(double value) {
  _internal_set_zoom_factor(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.StreamingViews.StreamingView.zoom_factor)
}
inline double StreamingViews_StreamingView::_internal_zoom_factor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.zoom_factor_;
}
inline void StreamingViews_StreamingView::_internal_set_zoom_factor(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.zoom_factor_ = value;
}

// .dcv.extensions.Point remote_offset = 4;
inline bool StreamingViews_StreamingView::has_remote_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.remote_offset_ != nullptr);
  return value;
}
inline void StreamingViews_StreamingView::clear_remote_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.remote_offset_ != nullptr) _impl_.remote_offset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::dcv::extensions::Point& StreamingViews_StreamingView::_internal_remote_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::dcv::extensions::Point* p = _impl_.remote_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::dcv::extensions::Point&>(::dcv::extensions::_Point_default_instance_);
}
inline const ::dcv::extensions::Point& StreamingViews_StreamingView::remote_offset() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.StreamingViews.StreamingView.remote_offset)
  return _internal_remote_offset();
}
inline void StreamingViews_StreamingView::unsafe_arena_set_allocated_remote_offset(::dcv::extensions::Point* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.remote_offset_);
  }
  _impl_.remote_offset_ = reinterpret_cast<::dcv::extensions::Point*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.StreamingViews.StreamingView.remote_offset)
}
inline ::dcv::extensions::Point* StreamingViews_StreamingView::release_remote_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::dcv::extensions::Point* released = _impl_.remote_offset_;
  _impl_.remote_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::dcv::extensions::Point* StreamingViews_StreamingView::unsafe_arena_release_remote_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dcv.extensions.StreamingViews.StreamingView.remote_offset)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::dcv::extensions::Point* temp = _impl_.remote_offset_;
  _impl_.remote_offset_ = nullptr;
  return temp;
}
inline ::dcv::extensions::Point* StreamingViews_StreamingView::_internal_mutable_remote_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.remote_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::dcv::extensions::Point>(GetArena());
    _impl_.remote_offset_ = reinterpret_cast<::dcv::extensions::Point*>(p);
  }
  return _impl_.remote_offset_;
}
inline ::dcv::extensions::Point* StreamingViews_StreamingView::mutable_remote_offset() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::Point* _msg = _internal_mutable_remote_offset();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.StreamingViews.StreamingView.remote_offset)
  return _msg;
}
inline void StreamingViews_StreamingView::set_allocated_remote_offset(::dcv::extensions::Point* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::dcv::extensions::Point*>(_impl_.remote_offset_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::dcv::extensions::Point*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.remote_offset_ = reinterpret_cast<::dcv::extensions::Point*>(value);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.StreamingViews.StreamingView.remote_offset)
}

// -------------------------------------------------------------------

// StreamingViews

// repeated .dcv.extensions.StreamingViews.StreamingView streaming_view = 1;
inline int StreamingViews::_internal_streaming_view_size() const {
  return _internal_streaming_view().size();
}
inline int StreamingViews::streaming_view_size() const {
  return _internal_streaming_view_size();
}
inline void StreamingViews::clear_streaming_view() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.streaming_view_.Clear();
}
inline ::dcv::extensions::StreamingViews_StreamingView* StreamingViews::mutable_streaming_view(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.StreamingViews.streaming_view)
  return _internal_mutable_streaming_view()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::dcv::extensions::StreamingViews_StreamingView>* StreamingViews::mutable_streaming_view()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:dcv.extensions.StreamingViews.streaming_view)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_streaming_view();
}
inline const ::dcv::extensions::StreamingViews_StreamingView& StreamingViews::streaming_view(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.StreamingViews.streaming_view)
  return _internal_streaming_view().Get(index);
}
inline ::dcv::extensions::StreamingViews_StreamingView* StreamingViews::add_streaming_view() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::dcv::extensions::StreamingViews_StreamingView* _add = _internal_mutable_streaming_view()->Add();
  // @@protoc_insertion_point(field_add:dcv.extensions.StreamingViews.streaming_view)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::dcv::extensions::StreamingViews_StreamingView>& StreamingViews::streaming_view() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:dcv.extensions.StreamingViews.streaming_view)
  return _internal_streaming_view();
}
inline const ::google::protobuf::RepeatedPtrField<::dcv::extensions::StreamingViews_StreamingView>&
StreamingViews::_internal_streaming_view() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.streaming_view_;
}
inline ::google::protobuf::RepeatedPtrField<::dcv::extensions::StreamingViews_StreamingView>*
StreamingViews::_internal_mutable_streaming_view() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.streaming_view_;
}

// -------------------------------------------------------------------

// GetDcvInfoRequest

// -------------------------------------------------------------------

// GetManifestRequest

// -------------------------------------------------------------------

// SetupVirtualChannelRequest

// string virtual_channel_name = 1;
inline void SetupVirtualChannelRequest::clear_virtual_channel_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.virtual_channel_name_.ClearToEmpty();
}
inline const std::string& SetupVirtualChannelRequest::virtual_channel_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
  return _internal_virtual_channel_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetupVirtualChannelRequest::set_virtual_channel_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.virtual_channel_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
}
inline std::string* SetupVirtualChannelRequest::mutable_virtual_channel_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_virtual_channel_name();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
  return _s;
}
inline const std::string& SetupVirtualChannelRequest::_internal_virtual_channel_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.virtual_channel_name_.Get();
}
inline void SetupVirtualChannelRequest::_internal_set_virtual_channel_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.virtual_channel_name_.Set(value, GetArena());
}
inline std::string* SetupVirtualChannelRequest::_internal_mutable_virtual_channel_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.virtual_channel_name_.Mutable( GetArena());
}
inline std::string* SetupVirtualChannelRequest::release_virtual_channel_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
  return _impl_.virtual_channel_name_.Release();
}
inline void SetupVirtualChannelRequest::set_allocated_virtual_channel_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.virtual_channel_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.virtual_channel_name_.IsDefault()) {
          _impl_.virtual_channel_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
}

// int64 relay_client_process_id = 2;
inline void SetupVirtualChannelRequest::clear_relay_client_process_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.relay_client_process_id_ = ::int64_t{0};
}
inline ::int64_t SetupVirtualChannelRequest::relay_client_process_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetupVirtualChannelRequest.relay_client_process_id)
  return _internal_relay_client_process_id();
}
inline void SetupVirtualChannelRequest::set_relay_client_process_id(::int64_t value) {
  _internal_set_relay_client_process_id(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SetupVirtualChannelRequest.relay_client_process_id)
}
inline ::int64_t SetupVirtualChannelRequest::_internal_relay_client_process_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.relay_client_process_id_;
}
inline void SetupVirtualChannelRequest::_internal_set_relay_client_process_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.relay_client_process_id_ = value;
}

// -------------------------------------------------------------------

// CloseVirtualChannelRequest

// string virtual_channel_name = 1;
inline void CloseVirtualChannelRequest::clear_virtual_channel_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.virtual_channel_name_.ClearToEmpty();
}
inline const std::string& CloseVirtualChannelRequest::virtual_channel_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
  return _internal_virtual_channel_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CloseVirtualChannelRequest::set_virtual_channel_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.virtual_channel_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
}
inline std::string* CloseVirtualChannelRequest::mutable_virtual_channel_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_virtual_channel_name();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
  return _s;
}
inline const std::string& CloseVirtualChannelRequest::_internal_virtual_channel_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.virtual_channel_name_.Get();
}
inline void CloseVirtualChannelRequest::_internal_set_virtual_channel_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.virtual_channel_name_.Set(value, GetArena());
}
inline std::string* CloseVirtualChannelRequest::_internal_mutable_virtual_channel_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.virtual_channel_name_.Mutable( GetArena());
}
inline std::string* CloseVirtualChannelRequest::release_virtual_channel_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
  return _impl_.virtual_channel_name_.Release();
}
inline void CloseVirtualChannelRequest::set_allocated_virtual_channel_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.virtual_channel_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.virtual_channel_name_.IsDefault()) {
          _impl_.virtual_channel_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
}

// -------------------------------------------------------------------

// SetCursorPointRequest

// .dcv.extensions.Point point = 1;
inline bool SetCursorPointRequest::has_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.point_ != nullptr);
  return value;
}
inline void SetCursorPointRequest::clear_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.point_ != nullptr) _impl_.point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::dcv::extensions::Point& SetCursorPointRequest::_internal_point() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::dcv::extensions::Point* p = _impl_.point_;
  return p != nullptr ? *p : reinterpret_cast<const ::dcv::extensions::Point&>(::dcv::extensions::_Point_default_instance_);
}
inline const ::dcv::extensions::Point& SetCursorPointRequest::point() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetCursorPointRequest.point)
  return _internal_point();
}
inline void SetCursorPointRequest::unsafe_arena_set_allocated_point(::dcv::extensions::Point* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.point_);
  }
  _impl_.point_ = reinterpret_cast<::dcv::extensions::Point*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.SetCursorPointRequest.point)
}
inline ::dcv::extensions::Point* SetCursorPointRequest::release_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dcv::extensions::Point* released = _impl_.point_;
  _impl_.point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::dcv::extensions::Point* SetCursorPointRequest::unsafe_arena_release_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dcv.extensions.SetCursorPointRequest.point)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dcv::extensions::Point* temp = _impl_.point_;
  _impl_.point_ = nullptr;
  return temp;
}
inline ::dcv::extensions::Point* SetCursorPointRequest::_internal_mutable_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.point_ == nullptr) {
    auto* p = CreateMaybeMessage<::dcv::extensions::Point>(GetArena());
    _impl_.point_ = reinterpret_cast<::dcv::extensions::Point*>(p);
  }
  return _impl_.point_;
}
inline ::dcv::extensions::Point* SetCursorPointRequest::mutable_point() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::Point* _msg = _internal_mutable_point();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SetCursorPointRequest.point)
  return _msg;
}
inline void SetCursorPointRequest::set_allocated_point(::dcv::extensions::Point* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::dcv::extensions::Point*>(_impl_.point_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::dcv::extensions::Point*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.point_ = reinterpret_cast<::dcv::extensions::Point*>(value);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SetCursorPointRequest.point)
}

// -------------------------------------------------------------------

// GetStreamingViewsRequest

// -------------------------------------------------------------------

// IsPointInsideStreamingViewsRequest

// .dcv.extensions.Point point = 1;
inline bool IsPointInsideStreamingViewsRequest::has_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.point_ != nullptr);
  return value;
}
inline void IsPointInsideStreamingViewsRequest::clear_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.point_ != nullptr) _impl_.point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::dcv::extensions::Point& IsPointInsideStreamingViewsRequest::_internal_point() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::dcv::extensions::Point* p = _impl_.point_;
  return p != nullptr ? *p : reinterpret_cast<const ::dcv::extensions::Point&>(::dcv::extensions::_Point_default_instance_);
}
inline const ::dcv::extensions::Point& IsPointInsideStreamingViewsRequest::point() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.IsPointInsideStreamingViewsRequest.point)
  return _internal_point();
}
inline void IsPointInsideStreamingViewsRequest::unsafe_arena_set_allocated_point(::dcv::extensions::Point* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.point_);
  }
  _impl_.point_ = reinterpret_cast<::dcv::extensions::Point*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.IsPointInsideStreamingViewsRequest.point)
}
inline ::dcv::extensions::Point* IsPointInsideStreamingViewsRequest::release_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dcv::extensions::Point* released = _impl_.point_;
  _impl_.point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::dcv::extensions::Point* IsPointInsideStreamingViewsRequest::unsafe_arena_release_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dcv.extensions.IsPointInsideStreamingViewsRequest.point)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dcv::extensions::Point* temp = _impl_.point_;
  _impl_.point_ = nullptr;
  return temp;
}
inline ::dcv::extensions::Point* IsPointInsideStreamingViewsRequest::_internal_mutable_point() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.point_ == nullptr) {
    auto* p = CreateMaybeMessage<::dcv::extensions::Point>(GetArena());
    _impl_.point_ = reinterpret_cast<::dcv::extensions::Point*>(p);
  }
  return _impl_.point_;
}
inline ::dcv::extensions::Point* IsPointInsideStreamingViewsRequest::mutable_point() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::Point* _msg = _internal_mutable_point();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.IsPointInsideStreamingViewsRequest.point)
  return _msg;
}
inline void IsPointInsideStreamingViewsRequest::set_allocated_point(::dcv::extensions::Point* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::dcv::extensions::Point*>(_impl_.point_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::dcv::extensions::Point*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.point_ = reinterpret_cast<::dcv::extensions::Point*>(value);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.IsPointInsideStreamingViewsRequest.point)
}

// -------------------------------------------------------------------

// GetDcvInfoResponse

// .dcv.extensions.GetDcvInfoResponse.DcvRole dcv_role = 1;
inline void GetDcvInfoResponse::clear_dcv_role() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dcv_role_ = 0;
}
inline ::dcv::extensions::GetDcvInfoResponse_DcvRole GetDcvInfoResponse::dcv_role() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.GetDcvInfoResponse.dcv_role)
  return _internal_dcv_role();
}
inline void GetDcvInfoResponse::set_dcv_role(::dcv::extensions::GetDcvInfoResponse_DcvRole value) {
  _internal_set_dcv_role(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.GetDcvInfoResponse.dcv_role)
}
inline ::dcv::extensions::GetDcvInfoResponse_DcvRole GetDcvInfoResponse::_internal_dcv_role() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::dcv::extensions::GetDcvInfoResponse_DcvRole>(_impl_.dcv_role_);
}
inline void GetDcvInfoResponse::_internal_set_dcv_role(::dcv::extensions::GetDcvInfoResponse_DcvRole value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dcv_role_ = value;
}

// int64 dcv_process_id = 2;
inline void GetDcvInfoResponse::clear_dcv_process_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dcv_process_id_ = ::int64_t{0};
}
inline ::int64_t GetDcvInfoResponse::dcv_process_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.GetDcvInfoResponse.dcv_process_id)
  return _internal_dcv_process_id();
}
inline void GetDcvInfoResponse::set_dcv_process_id(::int64_t value) {
  _internal_set_dcv_process_id(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.GetDcvInfoResponse.dcv_process_id)
}
inline ::int64_t GetDcvInfoResponse::_internal_dcv_process_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dcv_process_id_;
}
inline void GetDcvInfoResponse::_internal_set_dcv_process_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dcv_process_id_ = value;
}

// .dcv.extensions.SoftwareInfo server_info = 3;
inline bool GetDcvInfoResponse::has_server_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.server_info_ != nullptr);
  return value;
}
inline void GetDcvInfoResponse::clear_server_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.server_info_ != nullptr) _impl_.server_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::dcv::extensions::SoftwareInfo& GetDcvInfoResponse::_internal_server_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::dcv::extensions::SoftwareInfo* p = _impl_.server_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::dcv::extensions::SoftwareInfo&>(::dcv::extensions::_SoftwareInfo_default_instance_);
}
inline const ::dcv::extensions::SoftwareInfo& GetDcvInfoResponse::server_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.GetDcvInfoResponse.server_info)
  return _internal_server_info();
}
inline void GetDcvInfoResponse::unsafe_arena_set_allocated_server_info(::dcv::extensions::SoftwareInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.server_info_);
  }
  _impl_.server_info_ = reinterpret_cast<::dcv::extensions::SoftwareInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.GetDcvInfoResponse.server_info)
}
inline ::dcv::extensions::SoftwareInfo* GetDcvInfoResponse::release_server_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dcv::extensions::SoftwareInfo* released = _impl_.server_info_;
  _impl_.server_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::dcv::extensions::SoftwareInfo* GetDcvInfoResponse::unsafe_arena_release_server_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dcv.extensions.GetDcvInfoResponse.server_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dcv::extensions::SoftwareInfo* temp = _impl_.server_info_;
  _impl_.server_info_ = nullptr;
  return temp;
}
inline ::dcv::extensions::SoftwareInfo* GetDcvInfoResponse::_internal_mutable_server_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.server_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::dcv::extensions::SoftwareInfo>(GetArena());
    _impl_.server_info_ = reinterpret_cast<::dcv::extensions::SoftwareInfo*>(p);
  }
  return _impl_.server_info_;
}
inline ::dcv::extensions::SoftwareInfo* GetDcvInfoResponse::mutable_server_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::SoftwareInfo* _msg = _internal_mutable_server_info();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.GetDcvInfoResponse.server_info)
  return _msg;
}
inline void GetDcvInfoResponse::set_allocated_server_info(::dcv::extensions::SoftwareInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::dcv::extensions::SoftwareInfo*>(_impl_.server_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::dcv::extensions::SoftwareInfo*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.server_info_ = reinterpret_cast<::dcv::extensions::SoftwareInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.GetDcvInfoResponse.server_info)
}

// .dcv.extensions.SoftwareInfo client_info = 4;
inline bool GetDcvInfoResponse::has_client_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.client_info_ != nullptr);
  return value;
}
inline void GetDcvInfoResponse::clear_client_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.client_info_ != nullptr) _impl_.client_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::dcv::extensions::SoftwareInfo& GetDcvInfoResponse::_internal_client_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::dcv::extensions::SoftwareInfo* p = _impl_.client_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::dcv::extensions::SoftwareInfo&>(::dcv::extensions::_SoftwareInfo_default_instance_);
}
inline const ::dcv::extensions::SoftwareInfo& GetDcvInfoResponse::client_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.GetDcvInfoResponse.client_info)
  return _internal_client_info();
}
inline void GetDcvInfoResponse::unsafe_arena_set_allocated_client_info(::dcv::extensions::SoftwareInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.client_info_);
  }
  _impl_.client_info_ = reinterpret_cast<::dcv::extensions::SoftwareInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.GetDcvInfoResponse.client_info)
}
inline ::dcv::extensions::SoftwareInfo* GetDcvInfoResponse::release_client_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::dcv::extensions::SoftwareInfo* released = _impl_.client_info_;
  _impl_.client_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::dcv::extensions::SoftwareInfo* GetDcvInfoResponse::unsafe_arena_release_client_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dcv.extensions.GetDcvInfoResponse.client_info)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::dcv::extensions::SoftwareInfo* temp = _impl_.client_info_;
  _impl_.client_info_ = nullptr;
  return temp;
}
inline ::dcv::extensions::SoftwareInfo* GetDcvInfoResponse::_internal_mutable_client_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.client_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::dcv::extensions::SoftwareInfo>(GetArena());
    _impl_.client_info_ = reinterpret_cast<::dcv::extensions::SoftwareInfo*>(p);
  }
  return _impl_.client_info_;
}
inline ::dcv::extensions::SoftwareInfo* GetDcvInfoResponse::mutable_client_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::SoftwareInfo* _msg = _internal_mutable_client_info();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.GetDcvInfoResponse.client_info)
  return _msg;
}
inline void GetDcvInfoResponse::set_allocated_client_info(::dcv::extensions::SoftwareInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::dcv::extensions::SoftwareInfo*>(_impl_.client_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::dcv::extensions::SoftwareInfo*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.client_info_ = reinterpret_cast<::dcv::extensions::SoftwareInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.GetDcvInfoResponse.client_info)
}

// -------------------------------------------------------------------

// GetManifestResponse

// string manifest_path = 1;
inline void GetManifestResponse::clear_manifest_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.manifest_path_.ClearToEmpty();
}
inline const std::string& GetManifestResponse::manifest_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.GetManifestResponse.manifest_path)
  return _internal_manifest_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetManifestResponse::set_manifest_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.manifest_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dcv.extensions.GetManifestResponse.manifest_path)
}
inline std::string* GetManifestResponse::mutable_manifest_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_manifest_path();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.GetManifestResponse.manifest_path)
  return _s;
}
inline const std::string& GetManifestResponse::_internal_manifest_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.manifest_path_.Get();
}
inline void GetManifestResponse::_internal_set_manifest_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.manifest_path_.Set(value, GetArena());
}
inline std::string* GetManifestResponse::_internal_mutable_manifest_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.manifest_path_.Mutable( GetArena());
}
inline std::string* GetManifestResponse::release_manifest_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dcv.extensions.GetManifestResponse.manifest_path)
  return _impl_.manifest_path_.Release();
}
inline void GetManifestResponse::set_allocated_manifest_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.manifest_path_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.manifest_path_.IsDefault()) {
          _impl_.manifest_path_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.GetManifestResponse.manifest_path)
}

// -------------------------------------------------------------------

// SetupVirtualChannelResponse

// string virtual_channel_name = 1;
inline void SetupVirtualChannelResponse::clear_virtual_channel_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.virtual_channel_name_.ClearToEmpty();
}
inline const std::string& SetupVirtualChannelResponse::virtual_channel_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
  return _internal_virtual_channel_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetupVirtualChannelResponse::set_virtual_channel_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.virtual_channel_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
}
inline std::string* SetupVirtualChannelResponse::mutable_virtual_channel_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_virtual_channel_name();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
  return _s;
}
inline const std::string& SetupVirtualChannelResponse::_internal_virtual_channel_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.virtual_channel_name_.Get();
}
inline void SetupVirtualChannelResponse::_internal_set_virtual_channel_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.virtual_channel_name_.Set(value, GetArena());
}
inline std::string* SetupVirtualChannelResponse::_internal_mutable_virtual_channel_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.virtual_channel_name_.Mutable( GetArena());
}
inline std::string* SetupVirtualChannelResponse::release_virtual_channel_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
  return _impl_.virtual_channel_name_.Release();
}
inline void SetupVirtualChannelResponse::set_allocated_virtual_channel_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.virtual_channel_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.virtual_channel_name_.IsDefault()) {
          _impl_.virtual_channel_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
}

// string relay_path = 2;
inline void SetupVirtualChannelResponse::clear_relay_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.relay_path_.ClearToEmpty();
}
inline const std::string& SetupVirtualChannelResponse::relay_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetupVirtualChannelResponse.relay_path)
  return _internal_relay_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetupVirtualChannelResponse::set_relay_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.relay_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dcv.extensions.SetupVirtualChannelResponse.relay_path)
}
inline std::string* SetupVirtualChannelResponse::mutable_relay_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_relay_path();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SetupVirtualChannelResponse.relay_path)
  return _s;
}
inline const std::string& SetupVirtualChannelResponse::_internal_relay_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.relay_path_.Get();
}
inline void SetupVirtualChannelResponse::_internal_set_relay_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.relay_path_.Set(value, GetArena());
}
inline std::string* SetupVirtualChannelResponse::_internal_mutable_relay_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.relay_path_.Mutable( GetArena());
}
inline std::string* SetupVirtualChannelResponse::release_relay_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dcv.extensions.SetupVirtualChannelResponse.relay_path)
  return _impl_.relay_path_.Release();
}
inline void SetupVirtualChannelResponse::set_allocated_relay_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.relay_path_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.relay_path_.IsDefault()) {
          _impl_.relay_path_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SetupVirtualChannelResponse.relay_path)
}

// int64 relay_server_process_id = 3;
inline void SetupVirtualChannelResponse::clear_relay_server_process_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.relay_server_process_id_ = ::int64_t{0};
}
inline ::int64_t SetupVirtualChannelResponse::relay_server_process_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetupVirtualChannelResponse.relay_server_process_id)
  return _internal_relay_server_process_id();
}
inline void SetupVirtualChannelResponse::set_relay_server_process_id(::int64_t value) {
  _internal_set_relay_server_process_id(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SetupVirtualChannelResponse.relay_server_process_id)
}
inline ::int64_t SetupVirtualChannelResponse::_internal_relay_server_process_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.relay_server_process_id_;
}
inline void SetupVirtualChannelResponse::_internal_set_relay_server_process_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.relay_server_process_id_ = value;
}

// bytes virtual_channel_auth_token = 4;
inline void SetupVirtualChannelResponse::clear_virtual_channel_auth_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.virtual_channel_auth_token_.ClearToEmpty();
}
inline const std::string& SetupVirtualChannelResponse::virtual_channel_auth_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
  return _internal_virtual_channel_auth_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SetupVirtualChannelResponse::set_virtual_channel_auth_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.virtual_channel_auth_token_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
}
inline std::string* SetupVirtualChannelResponse::mutable_virtual_channel_auth_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_virtual_channel_auth_token();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
  return _s;
}
inline const std::string& SetupVirtualChannelResponse::_internal_virtual_channel_auth_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.virtual_channel_auth_token_.Get();
}
inline void SetupVirtualChannelResponse::_internal_set_virtual_channel_auth_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.virtual_channel_auth_token_.Set(value, GetArena());
}
inline std::string* SetupVirtualChannelResponse::_internal_mutable_virtual_channel_auth_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.virtual_channel_auth_token_.Mutable( GetArena());
}
inline std::string* SetupVirtualChannelResponse::release_virtual_channel_auth_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
  return _impl_.virtual_channel_auth_token_.Release();
}
inline void SetupVirtualChannelResponse::set_allocated_virtual_channel_auth_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.virtual_channel_auth_token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.virtual_channel_auth_token_.IsDefault()) {
          _impl_.virtual_channel_auth_token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
}

// -------------------------------------------------------------------

// CloseVirtualChannelResponse

// string virtual_channel_name = 1;
inline void CloseVirtualChannelResponse::clear_virtual_channel_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.virtual_channel_name_.ClearToEmpty();
}
inline const std::string& CloseVirtualChannelResponse::virtual_channel_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
  return _internal_virtual_channel_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CloseVirtualChannelResponse::set_virtual_channel_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.virtual_channel_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
}
inline std::string* CloseVirtualChannelResponse::mutable_virtual_channel_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_virtual_channel_name();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
  return _s;
}
inline const std::string& CloseVirtualChannelResponse::_internal_virtual_channel_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.virtual_channel_name_.Get();
}
inline void CloseVirtualChannelResponse::_internal_set_virtual_channel_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.virtual_channel_name_.Set(value, GetArena());
}
inline std::string* CloseVirtualChannelResponse::_internal_mutable_virtual_channel_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.virtual_channel_name_.Mutable( GetArena());
}
inline std::string* CloseVirtualChannelResponse::release_virtual_channel_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
  return _impl_.virtual_channel_name_.Release();
}
inline void CloseVirtualChannelResponse::set_allocated_virtual_channel_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.virtual_channel_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.virtual_channel_name_.IsDefault()) {
          _impl_.virtual_channel_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
}

// -------------------------------------------------------------------

// SetCursorPointResponse

// -------------------------------------------------------------------

// GetStreamingViewsResponse

// .dcv.extensions.StreamingViews streaming_views = 1;
inline bool GetStreamingViewsResponse::has_streaming_views() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.streaming_views_ != nullptr);
  return value;
}
inline void GetStreamingViewsResponse::clear_streaming_views() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.streaming_views_ != nullptr) _impl_.streaming_views_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::dcv::extensions::StreamingViews& GetStreamingViewsResponse::_internal_streaming_views() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::dcv::extensions::StreamingViews* p = _impl_.streaming_views_;
  return p != nullptr ? *p : reinterpret_cast<const ::dcv::extensions::StreamingViews&>(::dcv::extensions::_StreamingViews_default_instance_);
}
inline const ::dcv::extensions::StreamingViews& GetStreamingViewsResponse::streaming_views() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.GetStreamingViewsResponse.streaming_views)
  return _internal_streaming_views();
}
inline void GetStreamingViewsResponse::unsafe_arena_set_allocated_streaming_views(::dcv::extensions::StreamingViews* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.streaming_views_);
  }
  _impl_.streaming_views_ = reinterpret_cast<::dcv::extensions::StreamingViews*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.GetStreamingViewsResponse.streaming_views)
}
inline ::dcv::extensions::StreamingViews* GetStreamingViewsResponse::release_streaming_views() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dcv::extensions::StreamingViews* released = _impl_.streaming_views_;
  _impl_.streaming_views_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::dcv::extensions::StreamingViews* GetStreamingViewsResponse::unsafe_arena_release_streaming_views() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dcv.extensions.GetStreamingViewsResponse.streaming_views)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dcv::extensions::StreamingViews* temp = _impl_.streaming_views_;
  _impl_.streaming_views_ = nullptr;
  return temp;
}
inline ::dcv::extensions::StreamingViews* GetStreamingViewsResponse::_internal_mutable_streaming_views() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.streaming_views_ == nullptr) {
    auto* p = CreateMaybeMessage<::dcv::extensions::StreamingViews>(GetArena());
    _impl_.streaming_views_ = reinterpret_cast<::dcv::extensions::StreamingViews*>(p);
  }
  return _impl_.streaming_views_;
}
inline ::dcv::extensions::StreamingViews* GetStreamingViewsResponse::mutable_streaming_views() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::StreamingViews* _msg = _internal_mutable_streaming_views();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.GetStreamingViewsResponse.streaming_views)
  return _msg;
}
inline void GetStreamingViewsResponse::set_allocated_streaming_views(::dcv::extensions::StreamingViews* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::dcv::extensions::StreamingViews*>(_impl_.streaming_views_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::dcv::extensions::StreamingViews*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.streaming_views_ = reinterpret_cast<::dcv::extensions::StreamingViews*>(value);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.GetStreamingViewsResponse.streaming_views)
}

// -------------------------------------------------------------------

// IsPointInsideStreamingViewsResponse

// int32 view_id = 1;
inline void IsPointInsideStreamingViewsResponse::clear_view_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.view_id_ = 0;
}
inline ::int32_t IsPointInsideStreamingViewsResponse::view_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.IsPointInsideStreamingViewsResponse.view_id)
  return _internal_view_id();
}
inline void IsPointInsideStreamingViewsResponse::set_view_id(::int32_t value) {
  _internal_set_view_id(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.IsPointInsideStreamingViewsResponse.view_id)
}
inline ::int32_t IsPointInsideStreamingViewsResponse::_internal_view_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.view_id_;
}
inline void IsPointInsideStreamingViewsResponse::_internal_set_view_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.view_id_ = value;
}

// -------------------------------------------------------------------

// VirtualChannelReadyEvent

// string virtual_channel_name = 1;
inline void VirtualChannelReadyEvent::clear_virtual_channel_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.virtual_channel_name_.ClearToEmpty();
}
inline const std::string& VirtualChannelReadyEvent::virtual_channel_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
  return _internal_virtual_channel_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VirtualChannelReadyEvent::set_virtual_channel_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.virtual_channel_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
}
inline std::string* VirtualChannelReadyEvent::mutable_virtual_channel_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_virtual_channel_name();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
  return _s;
}
inline const std::string& VirtualChannelReadyEvent::_internal_virtual_channel_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.virtual_channel_name_.Get();
}
inline void VirtualChannelReadyEvent::_internal_set_virtual_channel_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.virtual_channel_name_.Set(value, GetArena());
}
inline std::string* VirtualChannelReadyEvent::_internal_mutable_virtual_channel_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.virtual_channel_name_.Mutable( GetArena());
}
inline std::string* VirtualChannelReadyEvent::release_virtual_channel_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
  return _impl_.virtual_channel_name_.Release();
}
inline void VirtualChannelReadyEvent::set_allocated_virtual_channel_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.virtual_channel_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.virtual_channel_name_.IsDefault()) {
          _impl_.virtual_channel_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
}

// -------------------------------------------------------------------

// VirtualChannelClosedEvent

// string virtual_channel_name = 1;
inline void VirtualChannelClosedEvent::clear_virtual_channel_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.virtual_channel_name_.ClearToEmpty();
}
inline const std::string& VirtualChannelClosedEvent::virtual_channel_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
  return _internal_virtual_channel_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VirtualChannelClosedEvent::set_virtual_channel_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.virtual_channel_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
}
inline std::string* VirtualChannelClosedEvent::mutable_virtual_channel_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_virtual_channel_name();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
  return _s;
}
inline const std::string& VirtualChannelClosedEvent::_internal_virtual_channel_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.virtual_channel_name_.Get();
}
inline void VirtualChannelClosedEvent::_internal_set_virtual_channel_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.virtual_channel_name_.Set(value, GetArena());
}
inline std::string* VirtualChannelClosedEvent::_internal_mutable_virtual_channel_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.virtual_channel_name_.Mutable( GetArena());
}
inline std::string* VirtualChannelClosedEvent::release_virtual_channel_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
  return _impl_.virtual_channel_name_.Release();
}
inline void VirtualChannelClosedEvent::set_allocated_virtual_channel_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.virtual_channel_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.virtual_channel_name_.IsDefault()) {
          _impl_.virtual_channel_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
}

// -------------------------------------------------------------------

// StreamingViewsChangedEvent

// .dcv.extensions.StreamingViews streaming_views = 1;
inline bool StreamingViewsChangedEvent::has_streaming_views() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.streaming_views_ != nullptr);
  return value;
}
inline void StreamingViewsChangedEvent::clear_streaming_views() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.streaming_views_ != nullptr) _impl_.streaming_views_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::dcv::extensions::StreamingViews& StreamingViewsChangedEvent::_internal_streaming_views() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::dcv::extensions::StreamingViews* p = _impl_.streaming_views_;
  return p != nullptr ? *p : reinterpret_cast<const ::dcv::extensions::StreamingViews&>(::dcv::extensions::_StreamingViews_default_instance_);
}
inline const ::dcv::extensions::StreamingViews& StreamingViewsChangedEvent::streaming_views() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.StreamingViewsChangedEvent.streaming_views)
  return _internal_streaming_views();
}
inline void StreamingViewsChangedEvent::unsafe_arena_set_allocated_streaming_views(::dcv::extensions::StreamingViews* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.streaming_views_);
  }
  _impl_.streaming_views_ = reinterpret_cast<::dcv::extensions::StreamingViews*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.StreamingViewsChangedEvent.streaming_views)
}
inline ::dcv::extensions::StreamingViews* StreamingViewsChangedEvent::release_streaming_views() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dcv::extensions::StreamingViews* released = _impl_.streaming_views_;
  _impl_.streaming_views_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::dcv::extensions::StreamingViews* StreamingViewsChangedEvent::unsafe_arena_release_streaming_views() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dcv.extensions.StreamingViewsChangedEvent.streaming_views)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::dcv::extensions::StreamingViews* temp = _impl_.streaming_views_;
  _impl_.streaming_views_ = nullptr;
  return temp;
}
inline ::dcv::extensions::StreamingViews* StreamingViewsChangedEvent::_internal_mutable_streaming_views() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.streaming_views_ == nullptr) {
    auto* p = CreateMaybeMessage<::dcv::extensions::StreamingViews>(GetArena());
    _impl_.streaming_views_ = reinterpret_cast<::dcv::extensions::StreamingViews*>(p);
  }
  return _impl_.streaming_views_;
}
inline ::dcv::extensions::StreamingViews* StreamingViewsChangedEvent::mutable_streaming_views() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::StreamingViews* _msg = _internal_mutable_streaming_views();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.StreamingViewsChangedEvent.streaming_views)
  return _msg;
}
inline void StreamingViewsChangedEvent::set_allocated_streaming_views(::dcv::extensions::StreamingViews* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::dcv::extensions::StreamingViews*>(_impl_.streaming_views_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::dcv::extensions::StreamingViews*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.streaming_views_ = reinterpret_cast<::dcv::extensions::StreamingViews*>(value);
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.StreamingViewsChangedEvent.streaming_views)
}

// -------------------------------------------------------------------

// Request

// string request_id = 1;
inline void Request::clear_request_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& Request::request_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.request_id)
  return _internal_request_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Request::set_request_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.request_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dcv.extensions.Request.request_id)
}
inline std::string* Request::mutable_request_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.request_id)
  return _s;
}
inline const std::string& Request::_internal_request_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.request_id_.Get();
}
inline void Request::_internal_set_request_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.request_id_.Set(value, GetArena());
}
inline std::string* Request::_internal_mutable_request_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.request_id_.Mutable( GetArena());
}
inline std::string* Request::release_request_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.request_id)
  return _impl_.request_id_.Release();
}
inline void Request::set_allocated_request_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.request_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.request_id_.IsDefault()) {
          _impl_.request_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.request_id)
}

// .dcv.extensions.GetDcvInfoRequest get_dcv_info_request = 10;
inline bool Request::has_get_dcv_info_request() const {
  return request_case() == kGetDcvInfoRequest;
}
inline bool Request::_internal_has_get_dcv_info_request() const {
  return request_case() == kGetDcvInfoRequest;
}
inline void Request::set_has_get_dcv_info_request() {
  _impl_._oneof_case_[0] = kGetDcvInfoRequest;
}
inline void Request::clear_get_dcv_info_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (request_case() == kGetDcvInfoRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.get_dcv_info_request_;
    }
    clear_has_request();
  }
}
inline ::dcv::extensions::GetDcvInfoRequest* Request::release_get_dcv_info_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.get_dcv_info_request)
  if (request_case() == kGetDcvInfoRequest) {
    clear_has_request();
    auto* temp = _impl_.request_.get_dcv_info_request_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.get_dcv_info_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::GetDcvInfoRequest& Request::_internal_get_dcv_info_request() const {
  return request_case() == kGetDcvInfoRequest ? *_impl_.request_.get_dcv_info_request_ : reinterpret_cast<::dcv::extensions::GetDcvInfoRequest&>(::dcv::extensions::_GetDcvInfoRequest_default_instance_);
}
inline const ::dcv::extensions::GetDcvInfoRequest& Request::get_dcv_info_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.get_dcv_info_request)
  return _internal_get_dcv_info_request();
}
inline ::dcv::extensions::GetDcvInfoRequest* Request::unsafe_arena_release_get_dcv_info_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Request.get_dcv_info_request)
  if (request_case() == kGetDcvInfoRequest) {
    clear_has_request();
    auto* temp = _impl_.request_.get_dcv_info_request_;
    _impl_.request_.get_dcv_info_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_get_dcv_info_request(::dcv::extensions::GetDcvInfoRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_get_dcv_info_request();
    _impl_.request_.get_dcv_info_request_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Request.get_dcv_info_request)
}
inline ::dcv::extensions::GetDcvInfoRequest* Request::_internal_mutable_get_dcv_info_request() {
  if (request_case() != kGetDcvInfoRequest) {
    clear_request();
    set_has_get_dcv_info_request();
    _impl_.request_.get_dcv_info_request_ = CreateMaybeMessage<::dcv::extensions::GetDcvInfoRequest>(GetArena());
  }
  return _impl_.request_.get_dcv_info_request_;
}
inline ::dcv::extensions::GetDcvInfoRequest* Request::mutable_get_dcv_info_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::GetDcvInfoRequest* _msg = _internal_mutable_get_dcv_info_request();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.get_dcv_info_request)
  return _msg;
}

// .dcv.extensions.GetManifestRequest get_manifest_request = 11;
inline bool Request::has_get_manifest_request() const {
  return request_case() == kGetManifestRequest;
}
inline bool Request::_internal_has_get_manifest_request() const {
  return request_case() == kGetManifestRequest;
}
inline void Request::set_has_get_manifest_request() {
  _impl_._oneof_case_[0] = kGetManifestRequest;
}
inline void Request::clear_get_manifest_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (request_case() == kGetManifestRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.get_manifest_request_;
    }
    clear_has_request();
  }
}
inline ::dcv::extensions::GetManifestRequest* Request::release_get_manifest_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.get_manifest_request)
  if (request_case() == kGetManifestRequest) {
    clear_has_request();
    auto* temp = _impl_.request_.get_manifest_request_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.get_manifest_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::GetManifestRequest& Request::_internal_get_manifest_request() const {
  return request_case() == kGetManifestRequest ? *_impl_.request_.get_manifest_request_ : reinterpret_cast<::dcv::extensions::GetManifestRequest&>(::dcv::extensions::_GetManifestRequest_default_instance_);
}
inline const ::dcv::extensions::GetManifestRequest& Request::get_manifest_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.get_manifest_request)
  return _internal_get_manifest_request();
}
inline ::dcv::extensions::GetManifestRequest* Request::unsafe_arena_release_get_manifest_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Request.get_manifest_request)
  if (request_case() == kGetManifestRequest) {
    clear_has_request();
    auto* temp = _impl_.request_.get_manifest_request_;
    _impl_.request_.get_manifest_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_get_manifest_request(::dcv::extensions::GetManifestRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_get_manifest_request();
    _impl_.request_.get_manifest_request_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Request.get_manifest_request)
}
inline ::dcv::extensions::GetManifestRequest* Request::_internal_mutable_get_manifest_request() {
  if (request_case() != kGetManifestRequest) {
    clear_request();
    set_has_get_manifest_request();
    _impl_.request_.get_manifest_request_ = CreateMaybeMessage<::dcv::extensions::GetManifestRequest>(GetArena());
  }
  return _impl_.request_.get_manifest_request_;
}
inline ::dcv::extensions::GetManifestRequest* Request::mutable_get_manifest_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::GetManifestRequest* _msg = _internal_mutable_get_manifest_request();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.get_manifest_request)
  return _msg;
}

// .dcv.extensions.SetupVirtualChannelRequest setup_virtual_channel_request = 20;
inline bool Request::has_setup_virtual_channel_request() const {
  return request_case() == kSetupVirtualChannelRequest;
}
inline bool Request::_internal_has_setup_virtual_channel_request() const {
  return request_case() == kSetupVirtualChannelRequest;
}
inline void Request::set_has_setup_virtual_channel_request() {
  _impl_._oneof_case_[0] = kSetupVirtualChannelRequest;
}
inline void Request::clear_setup_virtual_channel_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (request_case() == kSetupVirtualChannelRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.setup_virtual_channel_request_;
    }
    clear_has_request();
  }
}
inline ::dcv::extensions::SetupVirtualChannelRequest* Request::release_setup_virtual_channel_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.setup_virtual_channel_request)
  if (request_case() == kSetupVirtualChannelRequest) {
    clear_has_request();
    auto* temp = _impl_.request_.setup_virtual_channel_request_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.setup_virtual_channel_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::SetupVirtualChannelRequest& Request::_internal_setup_virtual_channel_request() const {
  return request_case() == kSetupVirtualChannelRequest ? *_impl_.request_.setup_virtual_channel_request_ : reinterpret_cast<::dcv::extensions::SetupVirtualChannelRequest&>(::dcv::extensions::_SetupVirtualChannelRequest_default_instance_);
}
inline const ::dcv::extensions::SetupVirtualChannelRequest& Request::setup_virtual_channel_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.setup_virtual_channel_request)
  return _internal_setup_virtual_channel_request();
}
inline ::dcv::extensions::SetupVirtualChannelRequest* Request::unsafe_arena_release_setup_virtual_channel_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Request.setup_virtual_channel_request)
  if (request_case() == kSetupVirtualChannelRequest) {
    clear_has_request();
    auto* temp = _impl_.request_.setup_virtual_channel_request_;
    _impl_.request_.setup_virtual_channel_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_setup_virtual_channel_request(::dcv::extensions::SetupVirtualChannelRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_setup_virtual_channel_request();
    _impl_.request_.setup_virtual_channel_request_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Request.setup_virtual_channel_request)
}
inline ::dcv::extensions::SetupVirtualChannelRequest* Request::_internal_mutable_setup_virtual_channel_request() {
  if (request_case() != kSetupVirtualChannelRequest) {
    clear_request();
    set_has_setup_virtual_channel_request();
    _impl_.request_.setup_virtual_channel_request_ = CreateMaybeMessage<::dcv::extensions::SetupVirtualChannelRequest>(GetArena());
  }
  return _impl_.request_.setup_virtual_channel_request_;
}
inline ::dcv::extensions::SetupVirtualChannelRequest* Request::mutable_setup_virtual_channel_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::SetupVirtualChannelRequest* _msg = _internal_mutable_setup_virtual_channel_request();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.setup_virtual_channel_request)
  return _msg;
}

// .dcv.extensions.CloseVirtualChannelRequest close_virtual_channel_request = 21;
inline bool Request::has_close_virtual_channel_request() const {
  return request_case() == kCloseVirtualChannelRequest;
}
inline bool Request::_internal_has_close_virtual_channel_request() const {
  return request_case() == kCloseVirtualChannelRequest;
}
inline void Request::set_has_close_virtual_channel_request() {
  _impl_._oneof_case_[0] = kCloseVirtualChannelRequest;
}
inline void Request::clear_close_virtual_channel_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (request_case() == kCloseVirtualChannelRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.close_virtual_channel_request_;
    }
    clear_has_request();
  }
}
inline ::dcv::extensions::CloseVirtualChannelRequest* Request::release_close_virtual_channel_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.close_virtual_channel_request)
  if (request_case() == kCloseVirtualChannelRequest) {
    clear_has_request();
    auto* temp = _impl_.request_.close_virtual_channel_request_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.close_virtual_channel_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::CloseVirtualChannelRequest& Request::_internal_close_virtual_channel_request() const {
  return request_case() == kCloseVirtualChannelRequest ? *_impl_.request_.close_virtual_channel_request_ : reinterpret_cast<::dcv::extensions::CloseVirtualChannelRequest&>(::dcv::extensions::_CloseVirtualChannelRequest_default_instance_);
}
inline const ::dcv::extensions::CloseVirtualChannelRequest& Request::close_virtual_channel_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.close_virtual_channel_request)
  return _internal_close_virtual_channel_request();
}
inline ::dcv::extensions::CloseVirtualChannelRequest* Request::unsafe_arena_release_close_virtual_channel_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Request.close_virtual_channel_request)
  if (request_case() == kCloseVirtualChannelRequest) {
    clear_has_request();
    auto* temp = _impl_.request_.close_virtual_channel_request_;
    _impl_.request_.close_virtual_channel_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_close_virtual_channel_request(::dcv::extensions::CloseVirtualChannelRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_close_virtual_channel_request();
    _impl_.request_.close_virtual_channel_request_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Request.close_virtual_channel_request)
}
inline ::dcv::extensions::CloseVirtualChannelRequest* Request::_internal_mutable_close_virtual_channel_request() {
  if (request_case() != kCloseVirtualChannelRequest) {
    clear_request();
    set_has_close_virtual_channel_request();
    _impl_.request_.close_virtual_channel_request_ = CreateMaybeMessage<::dcv::extensions::CloseVirtualChannelRequest>(GetArena());
  }
  return _impl_.request_.close_virtual_channel_request_;
}
inline ::dcv::extensions::CloseVirtualChannelRequest* Request::mutable_close_virtual_channel_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::CloseVirtualChannelRequest* _msg = _internal_mutable_close_virtual_channel_request();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.close_virtual_channel_request)
  return _msg;
}

// .dcv.extensions.SetCursorPointRequest set_cursor_point_request = 30;
inline bool Request::has_set_cursor_point_request() const {
  return request_case() == kSetCursorPointRequest;
}
inline bool Request::_internal_has_set_cursor_point_request() const {
  return request_case() == kSetCursorPointRequest;
}
inline void Request::set_has_set_cursor_point_request() {
  _impl_._oneof_case_[0] = kSetCursorPointRequest;
}
inline void Request::clear_set_cursor_point_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (request_case() == kSetCursorPointRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.set_cursor_point_request_;
    }
    clear_has_request();
  }
}
inline ::dcv::extensions::SetCursorPointRequest* Request::release_set_cursor_point_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.set_cursor_point_request)
  if (request_case() == kSetCursorPointRequest) {
    clear_has_request();
    auto* temp = _impl_.request_.set_cursor_point_request_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.set_cursor_point_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::SetCursorPointRequest& Request::_internal_set_cursor_point_request() const {
  return request_case() == kSetCursorPointRequest ? *_impl_.request_.set_cursor_point_request_ : reinterpret_cast<::dcv::extensions::SetCursorPointRequest&>(::dcv::extensions::_SetCursorPointRequest_default_instance_);
}
inline const ::dcv::extensions::SetCursorPointRequest& Request::set_cursor_point_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.set_cursor_point_request)
  return _internal_set_cursor_point_request();
}
inline ::dcv::extensions::SetCursorPointRequest* Request::unsafe_arena_release_set_cursor_point_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Request.set_cursor_point_request)
  if (request_case() == kSetCursorPointRequest) {
    clear_has_request();
    auto* temp = _impl_.request_.set_cursor_point_request_;
    _impl_.request_.set_cursor_point_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_set_cursor_point_request(::dcv::extensions::SetCursorPointRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_set_cursor_point_request();
    _impl_.request_.set_cursor_point_request_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Request.set_cursor_point_request)
}
inline ::dcv::extensions::SetCursorPointRequest* Request::_internal_mutable_set_cursor_point_request() {
  if (request_case() != kSetCursorPointRequest) {
    clear_request();
    set_has_set_cursor_point_request();
    _impl_.request_.set_cursor_point_request_ = CreateMaybeMessage<::dcv::extensions::SetCursorPointRequest>(GetArena());
  }
  return _impl_.request_.set_cursor_point_request_;
}
inline ::dcv::extensions::SetCursorPointRequest* Request::mutable_set_cursor_point_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::SetCursorPointRequest* _msg = _internal_mutable_set_cursor_point_request();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.set_cursor_point_request)
  return _msg;
}

// .dcv.extensions.GetStreamingViewsRequest get_streaming_views_request = 31;
inline bool Request::has_get_streaming_views_request() const {
  return request_case() == kGetStreamingViewsRequest;
}
inline bool Request::_internal_has_get_streaming_views_request() const {
  return request_case() == kGetStreamingViewsRequest;
}
inline void Request::set_has_get_streaming_views_request() {
  _impl_._oneof_case_[0] = kGetStreamingViewsRequest;
}
inline void Request::clear_get_streaming_views_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (request_case() == kGetStreamingViewsRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.get_streaming_views_request_;
    }
    clear_has_request();
  }
}
inline ::dcv::extensions::GetStreamingViewsRequest* Request::release_get_streaming_views_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.get_streaming_views_request)
  if (request_case() == kGetStreamingViewsRequest) {
    clear_has_request();
    auto* temp = _impl_.request_.get_streaming_views_request_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.get_streaming_views_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::GetStreamingViewsRequest& Request::_internal_get_streaming_views_request() const {
  return request_case() == kGetStreamingViewsRequest ? *_impl_.request_.get_streaming_views_request_ : reinterpret_cast<::dcv::extensions::GetStreamingViewsRequest&>(::dcv::extensions::_GetStreamingViewsRequest_default_instance_);
}
inline const ::dcv::extensions::GetStreamingViewsRequest& Request::get_streaming_views_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.get_streaming_views_request)
  return _internal_get_streaming_views_request();
}
inline ::dcv::extensions::GetStreamingViewsRequest* Request::unsafe_arena_release_get_streaming_views_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Request.get_streaming_views_request)
  if (request_case() == kGetStreamingViewsRequest) {
    clear_has_request();
    auto* temp = _impl_.request_.get_streaming_views_request_;
    _impl_.request_.get_streaming_views_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_get_streaming_views_request(::dcv::extensions::GetStreamingViewsRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_get_streaming_views_request();
    _impl_.request_.get_streaming_views_request_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Request.get_streaming_views_request)
}
inline ::dcv::extensions::GetStreamingViewsRequest* Request::_internal_mutable_get_streaming_views_request() {
  if (request_case() != kGetStreamingViewsRequest) {
    clear_request();
    set_has_get_streaming_views_request();
    _impl_.request_.get_streaming_views_request_ = CreateMaybeMessage<::dcv::extensions::GetStreamingViewsRequest>(GetArena());
  }
  return _impl_.request_.get_streaming_views_request_;
}
inline ::dcv::extensions::GetStreamingViewsRequest* Request::mutable_get_streaming_views_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::GetStreamingViewsRequest* _msg = _internal_mutable_get_streaming_views_request();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.get_streaming_views_request)
  return _msg;
}

// .dcv.extensions.IsPointInsideStreamingViewsRequest is_point_inside_streaming_views_request = 32;
inline bool Request::has_is_point_inside_streaming_views_request() const {
  return request_case() == kIsPointInsideStreamingViewsRequest;
}
inline bool Request::_internal_has_is_point_inside_streaming_views_request() const {
  return request_case() == kIsPointInsideStreamingViewsRequest;
}
inline void Request::set_has_is_point_inside_streaming_views_request() {
  _impl_._oneof_case_[0] = kIsPointInsideStreamingViewsRequest;
}
inline void Request::clear_is_point_inside_streaming_views_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (request_case() == kIsPointInsideStreamingViewsRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.is_point_inside_streaming_views_request_;
    }
    clear_has_request();
  }
}
inline ::dcv::extensions::IsPointInsideStreamingViewsRequest* Request::release_is_point_inside_streaming_views_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.is_point_inside_streaming_views_request)
  if (request_case() == kIsPointInsideStreamingViewsRequest) {
    clear_has_request();
    auto* temp = _impl_.request_.is_point_inside_streaming_views_request_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.is_point_inside_streaming_views_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::IsPointInsideStreamingViewsRequest& Request::_internal_is_point_inside_streaming_views_request() const {
  return request_case() == kIsPointInsideStreamingViewsRequest ? *_impl_.request_.is_point_inside_streaming_views_request_ : reinterpret_cast<::dcv::extensions::IsPointInsideStreamingViewsRequest&>(::dcv::extensions::_IsPointInsideStreamingViewsRequest_default_instance_);
}
inline const ::dcv::extensions::IsPointInsideStreamingViewsRequest& Request::is_point_inside_streaming_views_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.is_point_inside_streaming_views_request)
  return _internal_is_point_inside_streaming_views_request();
}
inline ::dcv::extensions::IsPointInsideStreamingViewsRequest* Request::unsafe_arena_release_is_point_inside_streaming_views_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Request.is_point_inside_streaming_views_request)
  if (request_case() == kIsPointInsideStreamingViewsRequest) {
    clear_has_request();
    auto* temp = _impl_.request_.is_point_inside_streaming_views_request_;
    _impl_.request_.is_point_inside_streaming_views_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_is_point_inside_streaming_views_request(::dcv::extensions::IsPointInsideStreamingViewsRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_is_point_inside_streaming_views_request();
    _impl_.request_.is_point_inside_streaming_views_request_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Request.is_point_inside_streaming_views_request)
}
inline ::dcv::extensions::IsPointInsideStreamingViewsRequest* Request::_internal_mutable_is_point_inside_streaming_views_request() {
  if (request_case() != kIsPointInsideStreamingViewsRequest) {
    clear_request();
    set_has_is_point_inside_streaming_views_request();
    _impl_.request_.is_point_inside_streaming_views_request_ = CreateMaybeMessage<::dcv::extensions::IsPointInsideStreamingViewsRequest>(GetArena());
  }
  return _impl_.request_.is_point_inside_streaming_views_request_;
}
inline ::dcv::extensions::IsPointInsideStreamingViewsRequest* Request::mutable_is_point_inside_streaming_views_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::IsPointInsideStreamingViewsRequest* _msg = _internal_mutable_is_point_inside_streaming_views_request();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.is_point_inside_streaming_views_request)
  return _msg;
}

inline bool Request::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void Request::clear_has_request() {
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}
inline Request::RequestCase Request::request_case() const {
  return Request::RequestCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Response

// string request_id = 1;
inline void Response::clear_request_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& Response::request_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.request_id)
  return _internal_request_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Response::set_request_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.request_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:dcv.extensions.Response.request_id)
}
inline std::string* Response::mutable_request_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.request_id)
  return _s;
}
inline const std::string& Response::_internal_request_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.request_id_.Get();
}
inline void Response::_internal_set_request_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.request_id_.Set(value, GetArena());
}
inline std::string* Response::_internal_mutable_request_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.request_id_.Mutable( GetArena());
}
inline std::string* Response::release_request_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.request_id)
  return _impl_.request_id_.Release();
}
inline void Response::set_allocated_request_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.request_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.request_id_.IsDefault()) {
          _impl_.request_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.request_id)
}

// .dcv.extensions.Response.Status status = 2;
inline void Response::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = 0;
}
inline ::dcv::extensions::Response_Status Response::status() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.status)
  return _internal_status();
}
inline void Response::set_status(::dcv::extensions::Response_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.Response.status)
}
inline ::dcv::extensions::Response_Status Response::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::dcv::extensions::Response_Status>(_impl_.status_);
}
inline void Response::_internal_set_status(::dcv::extensions::Response_Status value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// .dcv.extensions.GetDcvInfoResponse get_dcv_info_response = 10;
inline bool Response::has_get_dcv_info_response() const {
  return response_case() == kGetDcvInfoResponse;
}
inline bool Response::_internal_has_get_dcv_info_response() const {
  return response_case() == kGetDcvInfoResponse;
}
inline void Response::set_has_get_dcv_info_response() {
  _impl_._oneof_case_[0] = kGetDcvInfoResponse;
}
inline void Response::clear_get_dcv_info_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (response_case() == kGetDcvInfoResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.get_dcv_info_response_;
    }
    clear_has_response();
  }
}
inline ::dcv::extensions::GetDcvInfoResponse* Response::release_get_dcv_info_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.get_dcv_info_response)
  if (response_case() == kGetDcvInfoResponse) {
    clear_has_response();
    auto* temp = _impl_.response_.get_dcv_info_response_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.get_dcv_info_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::GetDcvInfoResponse& Response::_internal_get_dcv_info_response() const {
  return response_case() == kGetDcvInfoResponse ? *_impl_.response_.get_dcv_info_response_ : reinterpret_cast<::dcv::extensions::GetDcvInfoResponse&>(::dcv::extensions::_GetDcvInfoResponse_default_instance_);
}
inline const ::dcv::extensions::GetDcvInfoResponse& Response::get_dcv_info_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.get_dcv_info_response)
  return _internal_get_dcv_info_response();
}
inline ::dcv::extensions::GetDcvInfoResponse* Response::unsafe_arena_release_get_dcv_info_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Response.get_dcv_info_response)
  if (response_case() == kGetDcvInfoResponse) {
    clear_has_response();
    auto* temp = _impl_.response_.get_dcv_info_response_;
    _impl_.response_.get_dcv_info_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_get_dcv_info_response(::dcv::extensions::GetDcvInfoResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_get_dcv_info_response();
    _impl_.response_.get_dcv_info_response_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Response.get_dcv_info_response)
}
inline ::dcv::extensions::GetDcvInfoResponse* Response::_internal_mutable_get_dcv_info_response() {
  if (response_case() != kGetDcvInfoResponse) {
    clear_response();
    set_has_get_dcv_info_response();
    _impl_.response_.get_dcv_info_response_ = CreateMaybeMessage<::dcv::extensions::GetDcvInfoResponse>(GetArena());
  }
  return _impl_.response_.get_dcv_info_response_;
}
inline ::dcv::extensions::GetDcvInfoResponse* Response::mutable_get_dcv_info_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::GetDcvInfoResponse* _msg = _internal_mutable_get_dcv_info_response();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.get_dcv_info_response)
  return _msg;
}

// .dcv.extensions.GetManifestResponse get_manifest_response = 11;
inline bool Response::has_get_manifest_response() const {
  return response_case() == kGetManifestResponse;
}
inline bool Response::_internal_has_get_manifest_response() const {
  return response_case() == kGetManifestResponse;
}
inline void Response::set_has_get_manifest_response() {
  _impl_._oneof_case_[0] = kGetManifestResponse;
}
inline void Response::clear_get_manifest_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (response_case() == kGetManifestResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.get_manifest_response_;
    }
    clear_has_response();
  }
}
inline ::dcv::extensions::GetManifestResponse* Response::release_get_manifest_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.get_manifest_response)
  if (response_case() == kGetManifestResponse) {
    clear_has_response();
    auto* temp = _impl_.response_.get_manifest_response_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.get_manifest_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::GetManifestResponse& Response::_internal_get_manifest_response() const {
  return response_case() == kGetManifestResponse ? *_impl_.response_.get_manifest_response_ : reinterpret_cast<::dcv::extensions::GetManifestResponse&>(::dcv::extensions::_GetManifestResponse_default_instance_);
}
inline const ::dcv::extensions::GetManifestResponse& Response::get_manifest_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.get_manifest_response)
  return _internal_get_manifest_response();
}
inline ::dcv::extensions::GetManifestResponse* Response::unsafe_arena_release_get_manifest_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Response.get_manifest_response)
  if (response_case() == kGetManifestResponse) {
    clear_has_response();
    auto* temp = _impl_.response_.get_manifest_response_;
    _impl_.response_.get_manifest_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_get_manifest_response(::dcv::extensions::GetManifestResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_get_manifest_response();
    _impl_.response_.get_manifest_response_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Response.get_manifest_response)
}
inline ::dcv::extensions::GetManifestResponse* Response::_internal_mutable_get_manifest_response() {
  if (response_case() != kGetManifestResponse) {
    clear_response();
    set_has_get_manifest_response();
    _impl_.response_.get_manifest_response_ = CreateMaybeMessage<::dcv::extensions::GetManifestResponse>(GetArena());
  }
  return _impl_.response_.get_manifest_response_;
}
inline ::dcv::extensions::GetManifestResponse* Response::mutable_get_manifest_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::GetManifestResponse* _msg = _internal_mutable_get_manifest_response();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.get_manifest_response)
  return _msg;
}

// .dcv.extensions.SetupVirtualChannelResponse setup_virtual_channel_response = 20;
inline bool Response::has_setup_virtual_channel_response() const {
  return response_case() == kSetupVirtualChannelResponse;
}
inline bool Response::_internal_has_setup_virtual_channel_response() const {
  return response_case() == kSetupVirtualChannelResponse;
}
inline void Response::set_has_setup_virtual_channel_response() {
  _impl_._oneof_case_[0] = kSetupVirtualChannelResponse;
}
inline void Response::clear_setup_virtual_channel_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (response_case() == kSetupVirtualChannelResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.setup_virtual_channel_response_;
    }
    clear_has_response();
  }
}
inline ::dcv::extensions::SetupVirtualChannelResponse* Response::release_setup_virtual_channel_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.setup_virtual_channel_response)
  if (response_case() == kSetupVirtualChannelResponse) {
    clear_has_response();
    auto* temp = _impl_.response_.setup_virtual_channel_response_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.setup_virtual_channel_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::SetupVirtualChannelResponse& Response::_internal_setup_virtual_channel_response() const {
  return response_case() == kSetupVirtualChannelResponse ? *_impl_.response_.setup_virtual_channel_response_ : reinterpret_cast<::dcv::extensions::SetupVirtualChannelResponse&>(::dcv::extensions::_SetupVirtualChannelResponse_default_instance_);
}
inline const ::dcv::extensions::SetupVirtualChannelResponse& Response::setup_virtual_channel_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.setup_virtual_channel_response)
  return _internal_setup_virtual_channel_response();
}
inline ::dcv::extensions::SetupVirtualChannelResponse* Response::unsafe_arena_release_setup_virtual_channel_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Response.setup_virtual_channel_response)
  if (response_case() == kSetupVirtualChannelResponse) {
    clear_has_response();
    auto* temp = _impl_.response_.setup_virtual_channel_response_;
    _impl_.response_.setup_virtual_channel_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_setup_virtual_channel_response(::dcv::extensions::SetupVirtualChannelResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_setup_virtual_channel_response();
    _impl_.response_.setup_virtual_channel_response_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Response.setup_virtual_channel_response)
}
inline ::dcv::extensions::SetupVirtualChannelResponse* Response::_internal_mutable_setup_virtual_channel_response() {
  if (response_case() != kSetupVirtualChannelResponse) {
    clear_response();
    set_has_setup_virtual_channel_response();
    _impl_.response_.setup_virtual_channel_response_ = CreateMaybeMessage<::dcv::extensions::SetupVirtualChannelResponse>(GetArena());
  }
  return _impl_.response_.setup_virtual_channel_response_;
}
inline ::dcv::extensions::SetupVirtualChannelResponse* Response::mutable_setup_virtual_channel_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::SetupVirtualChannelResponse* _msg = _internal_mutable_setup_virtual_channel_response();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.setup_virtual_channel_response)
  return _msg;
}

// .dcv.extensions.CloseVirtualChannelResponse close_virtual_channel_response = 21;
inline bool Response::has_close_virtual_channel_response() const {
  return response_case() == kCloseVirtualChannelResponse;
}
inline bool Response::_internal_has_close_virtual_channel_response() const {
  return response_case() == kCloseVirtualChannelResponse;
}
inline void Response::set_has_close_virtual_channel_response() {
  _impl_._oneof_case_[0] = kCloseVirtualChannelResponse;
}
inline void Response::clear_close_virtual_channel_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (response_case() == kCloseVirtualChannelResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.close_virtual_channel_response_;
    }
    clear_has_response();
  }
}
inline ::dcv::extensions::CloseVirtualChannelResponse* Response::release_close_virtual_channel_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.close_virtual_channel_response)
  if (response_case() == kCloseVirtualChannelResponse) {
    clear_has_response();
    auto* temp = _impl_.response_.close_virtual_channel_response_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.close_virtual_channel_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::CloseVirtualChannelResponse& Response::_internal_close_virtual_channel_response() const {
  return response_case() == kCloseVirtualChannelResponse ? *_impl_.response_.close_virtual_channel_response_ : reinterpret_cast<::dcv::extensions::CloseVirtualChannelResponse&>(::dcv::extensions::_CloseVirtualChannelResponse_default_instance_);
}
inline const ::dcv::extensions::CloseVirtualChannelResponse& Response::close_virtual_channel_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.close_virtual_channel_response)
  return _internal_close_virtual_channel_response();
}
inline ::dcv::extensions::CloseVirtualChannelResponse* Response::unsafe_arena_release_close_virtual_channel_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Response.close_virtual_channel_response)
  if (response_case() == kCloseVirtualChannelResponse) {
    clear_has_response();
    auto* temp = _impl_.response_.close_virtual_channel_response_;
    _impl_.response_.close_virtual_channel_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_close_virtual_channel_response(::dcv::extensions::CloseVirtualChannelResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_close_virtual_channel_response();
    _impl_.response_.close_virtual_channel_response_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Response.close_virtual_channel_response)
}
inline ::dcv::extensions::CloseVirtualChannelResponse* Response::_internal_mutable_close_virtual_channel_response() {
  if (response_case() != kCloseVirtualChannelResponse) {
    clear_response();
    set_has_close_virtual_channel_response();
    _impl_.response_.close_virtual_channel_response_ = CreateMaybeMessage<::dcv::extensions::CloseVirtualChannelResponse>(GetArena());
  }
  return _impl_.response_.close_virtual_channel_response_;
}
inline ::dcv::extensions::CloseVirtualChannelResponse* Response::mutable_close_virtual_channel_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::CloseVirtualChannelResponse* _msg = _internal_mutable_close_virtual_channel_response();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.close_virtual_channel_response)
  return _msg;
}

// .dcv.extensions.SetCursorPointResponse set_cursor_point_response = 30;
inline bool Response::has_set_cursor_point_response() const {
  return response_case() == kSetCursorPointResponse;
}
inline bool Response::_internal_has_set_cursor_point_response() const {
  return response_case() == kSetCursorPointResponse;
}
inline void Response::set_has_set_cursor_point_response() {
  _impl_._oneof_case_[0] = kSetCursorPointResponse;
}
inline void Response::clear_set_cursor_point_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (response_case() == kSetCursorPointResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.set_cursor_point_response_;
    }
    clear_has_response();
  }
}
inline ::dcv::extensions::SetCursorPointResponse* Response::release_set_cursor_point_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.set_cursor_point_response)
  if (response_case() == kSetCursorPointResponse) {
    clear_has_response();
    auto* temp = _impl_.response_.set_cursor_point_response_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.set_cursor_point_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::SetCursorPointResponse& Response::_internal_set_cursor_point_response() const {
  return response_case() == kSetCursorPointResponse ? *_impl_.response_.set_cursor_point_response_ : reinterpret_cast<::dcv::extensions::SetCursorPointResponse&>(::dcv::extensions::_SetCursorPointResponse_default_instance_);
}
inline const ::dcv::extensions::SetCursorPointResponse& Response::set_cursor_point_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.set_cursor_point_response)
  return _internal_set_cursor_point_response();
}
inline ::dcv::extensions::SetCursorPointResponse* Response::unsafe_arena_release_set_cursor_point_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Response.set_cursor_point_response)
  if (response_case() == kSetCursorPointResponse) {
    clear_has_response();
    auto* temp = _impl_.response_.set_cursor_point_response_;
    _impl_.response_.set_cursor_point_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_set_cursor_point_response(::dcv::extensions::SetCursorPointResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_set_cursor_point_response();
    _impl_.response_.set_cursor_point_response_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Response.set_cursor_point_response)
}
inline ::dcv::extensions::SetCursorPointResponse* Response::_internal_mutable_set_cursor_point_response() {
  if (response_case() != kSetCursorPointResponse) {
    clear_response();
    set_has_set_cursor_point_response();
    _impl_.response_.set_cursor_point_response_ = CreateMaybeMessage<::dcv::extensions::SetCursorPointResponse>(GetArena());
  }
  return _impl_.response_.set_cursor_point_response_;
}
inline ::dcv::extensions::SetCursorPointResponse* Response::mutable_set_cursor_point_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::SetCursorPointResponse* _msg = _internal_mutable_set_cursor_point_response();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.set_cursor_point_response)
  return _msg;
}

// .dcv.extensions.GetStreamingViewsResponse get_streaming_views_response = 31;
inline bool Response::has_get_streaming_views_response() const {
  return response_case() == kGetStreamingViewsResponse;
}
inline bool Response::_internal_has_get_streaming_views_response() const {
  return response_case() == kGetStreamingViewsResponse;
}
inline void Response::set_has_get_streaming_views_response() {
  _impl_._oneof_case_[0] = kGetStreamingViewsResponse;
}
inline void Response::clear_get_streaming_views_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (response_case() == kGetStreamingViewsResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.get_streaming_views_response_;
    }
    clear_has_response();
  }
}
inline ::dcv::extensions::GetStreamingViewsResponse* Response::release_get_streaming_views_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.get_streaming_views_response)
  if (response_case() == kGetStreamingViewsResponse) {
    clear_has_response();
    auto* temp = _impl_.response_.get_streaming_views_response_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.get_streaming_views_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::GetStreamingViewsResponse& Response::_internal_get_streaming_views_response() const {
  return response_case() == kGetStreamingViewsResponse ? *_impl_.response_.get_streaming_views_response_ : reinterpret_cast<::dcv::extensions::GetStreamingViewsResponse&>(::dcv::extensions::_GetStreamingViewsResponse_default_instance_);
}
inline const ::dcv::extensions::GetStreamingViewsResponse& Response::get_streaming_views_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.get_streaming_views_response)
  return _internal_get_streaming_views_response();
}
inline ::dcv::extensions::GetStreamingViewsResponse* Response::unsafe_arena_release_get_streaming_views_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Response.get_streaming_views_response)
  if (response_case() == kGetStreamingViewsResponse) {
    clear_has_response();
    auto* temp = _impl_.response_.get_streaming_views_response_;
    _impl_.response_.get_streaming_views_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_get_streaming_views_response(::dcv::extensions::GetStreamingViewsResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_get_streaming_views_response();
    _impl_.response_.get_streaming_views_response_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Response.get_streaming_views_response)
}
inline ::dcv::extensions::GetStreamingViewsResponse* Response::_internal_mutable_get_streaming_views_response() {
  if (response_case() != kGetStreamingViewsResponse) {
    clear_response();
    set_has_get_streaming_views_response();
    _impl_.response_.get_streaming_views_response_ = CreateMaybeMessage<::dcv::extensions::GetStreamingViewsResponse>(GetArena());
  }
  return _impl_.response_.get_streaming_views_response_;
}
inline ::dcv::extensions::GetStreamingViewsResponse* Response::mutable_get_streaming_views_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::GetStreamingViewsResponse* _msg = _internal_mutable_get_streaming_views_response();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.get_streaming_views_response)
  return _msg;
}

// .dcv.extensions.IsPointInsideStreamingViewsResponse is_point_inside_streaming_views_response = 32;
inline bool Response::has_is_point_inside_streaming_views_response() const {
  return response_case() == kIsPointInsideStreamingViewsResponse;
}
inline bool Response::_internal_has_is_point_inside_streaming_views_response() const {
  return response_case() == kIsPointInsideStreamingViewsResponse;
}
inline void Response::set_has_is_point_inside_streaming_views_response() {
  _impl_._oneof_case_[0] = kIsPointInsideStreamingViewsResponse;
}
inline void Response::clear_is_point_inside_streaming_views_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (response_case() == kIsPointInsideStreamingViewsResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.is_point_inside_streaming_views_response_;
    }
    clear_has_response();
  }
}
inline ::dcv::extensions::IsPointInsideStreamingViewsResponse* Response::release_is_point_inside_streaming_views_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.is_point_inside_streaming_views_response)
  if (response_case() == kIsPointInsideStreamingViewsResponse) {
    clear_has_response();
    auto* temp = _impl_.response_.is_point_inside_streaming_views_response_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.is_point_inside_streaming_views_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::IsPointInsideStreamingViewsResponse& Response::_internal_is_point_inside_streaming_views_response() const {
  return response_case() == kIsPointInsideStreamingViewsResponse ? *_impl_.response_.is_point_inside_streaming_views_response_ : reinterpret_cast<::dcv::extensions::IsPointInsideStreamingViewsResponse&>(::dcv::extensions::_IsPointInsideStreamingViewsResponse_default_instance_);
}
inline const ::dcv::extensions::IsPointInsideStreamingViewsResponse& Response::is_point_inside_streaming_views_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.is_point_inside_streaming_views_response)
  return _internal_is_point_inside_streaming_views_response();
}
inline ::dcv::extensions::IsPointInsideStreamingViewsResponse* Response::unsafe_arena_release_is_point_inside_streaming_views_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Response.is_point_inside_streaming_views_response)
  if (response_case() == kIsPointInsideStreamingViewsResponse) {
    clear_has_response();
    auto* temp = _impl_.response_.is_point_inside_streaming_views_response_;
    _impl_.response_.is_point_inside_streaming_views_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_is_point_inside_streaming_views_response(::dcv::extensions::IsPointInsideStreamingViewsResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_is_point_inside_streaming_views_response();
    _impl_.response_.is_point_inside_streaming_views_response_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Response.is_point_inside_streaming_views_response)
}
inline ::dcv::extensions::IsPointInsideStreamingViewsResponse* Response::_internal_mutable_is_point_inside_streaming_views_response() {
  if (response_case() != kIsPointInsideStreamingViewsResponse) {
    clear_response();
    set_has_is_point_inside_streaming_views_response();
    _impl_.response_.is_point_inside_streaming_views_response_ = CreateMaybeMessage<::dcv::extensions::IsPointInsideStreamingViewsResponse>(GetArena());
  }
  return _impl_.response_.is_point_inside_streaming_views_response_;
}
inline ::dcv::extensions::IsPointInsideStreamingViewsResponse* Response::mutable_is_point_inside_streaming_views_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::IsPointInsideStreamingViewsResponse* _msg = _internal_mutable_is_point_inside_streaming_views_response();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.is_point_inside_streaming_views_response)
  return _msg;
}

inline bool Response::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void Response::clear_has_response() {
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}
inline Response::ResponseCase Response::response_case() const {
  return Response::ResponseCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Event

// .dcv.extensions.VirtualChannelReadyEvent virtual_channel_ready_event = 10;
inline bool Event::has_virtual_channel_ready_event() const {
  return event_case() == kVirtualChannelReadyEvent;
}
inline bool Event::_internal_has_virtual_channel_ready_event() const {
  return event_case() == kVirtualChannelReadyEvent;
}
inline void Event::set_has_virtual_channel_ready_event() {
  _impl_._oneof_case_[0] = kVirtualChannelReadyEvent;
}
inline void Event::clear_virtual_channel_ready_event() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (event_case() == kVirtualChannelReadyEvent) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.virtual_channel_ready_event_;
    }
    clear_has_event();
  }
}
inline ::dcv::extensions::VirtualChannelReadyEvent* Event::release_virtual_channel_ready_event() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Event.virtual_channel_ready_event)
  if (event_case() == kVirtualChannelReadyEvent) {
    clear_has_event();
    auto* temp = _impl_.event_.virtual_channel_ready_event_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.virtual_channel_ready_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::VirtualChannelReadyEvent& Event::_internal_virtual_channel_ready_event() const {
  return event_case() == kVirtualChannelReadyEvent ? *_impl_.event_.virtual_channel_ready_event_ : reinterpret_cast<::dcv::extensions::VirtualChannelReadyEvent&>(::dcv::extensions::_VirtualChannelReadyEvent_default_instance_);
}
inline const ::dcv::extensions::VirtualChannelReadyEvent& Event::virtual_channel_ready_event() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.Event.virtual_channel_ready_event)
  return _internal_virtual_channel_ready_event();
}
inline ::dcv::extensions::VirtualChannelReadyEvent* Event::unsafe_arena_release_virtual_channel_ready_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Event.virtual_channel_ready_event)
  if (event_case() == kVirtualChannelReadyEvent) {
    clear_has_event();
    auto* temp = _impl_.event_.virtual_channel_ready_event_;
    _impl_.event_.virtual_channel_ready_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_virtual_channel_ready_event(::dcv::extensions::VirtualChannelReadyEvent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_virtual_channel_ready_event();
    _impl_.event_.virtual_channel_ready_event_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Event.virtual_channel_ready_event)
}
inline ::dcv::extensions::VirtualChannelReadyEvent* Event::_internal_mutable_virtual_channel_ready_event() {
  if (event_case() != kVirtualChannelReadyEvent) {
    clear_event();
    set_has_virtual_channel_ready_event();
    _impl_.event_.virtual_channel_ready_event_ = CreateMaybeMessage<::dcv::extensions::VirtualChannelReadyEvent>(GetArena());
  }
  return _impl_.event_.virtual_channel_ready_event_;
}
inline ::dcv::extensions::VirtualChannelReadyEvent* Event::mutable_virtual_channel_ready_event() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::VirtualChannelReadyEvent* _msg = _internal_mutable_virtual_channel_ready_event();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Event.virtual_channel_ready_event)
  return _msg;
}

// .dcv.extensions.VirtualChannelClosedEvent virtual_channel_closed_event = 20;
inline bool Event::has_virtual_channel_closed_event() const {
  return event_case() == kVirtualChannelClosedEvent;
}
inline bool Event::_internal_has_virtual_channel_closed_event() const {
  return event_case() == kVirtualChannelClosedEvent;
}
inline void Event::set_has_virtual_channel_closed_event() {
  _impl_._oneof_case_[0] = kVirtualChannelClosedEvent;
}
inline void Event::clear_virtual_channel_closed_event() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (event_case() == kVirtualChannelClosedEvent) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.virtual_channel_closed_event_;
    }
    clear_has_event();
  }
}
inline ::dcv::extensions::VirtualChannelClosedEvent* Event::release_virtual_channel_closed_event() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Event.virtual_channel_closed_event)
  if (event_case() == kVirtualChannelClosedEvent) {
    clear_has_event();
    auto* temp = _impl_.event_.virtual_channel_closed_event_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.virtual_channel_closed_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::VirtualChannelClosedEvent& Event::_internal_virtual_channel_closed_event() const {
  return event_case() == kVirtualChannelClosedEvent ? *_impl_.event_.virtual_channel_closed_event_ : reinterpret_cast<::dcv::extensions::VirtualChannelClosedEvent&>(::dcv::extensions::_VirtualChannelClosedEvent_default_instance_);
}
inline const ::dcv::extensions::VirtualChannelClosedEvent& Event::virtual_channel_closed_event() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.Event.virtual_channel_closed_event)
  return _internal_virtual_channel_closed_event();
}
inline ::dcv::extensions::VirtualChannelClosedEvent* Event::unsafe_arena_release_virtual_channel_closed_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Event.virtual_channel_closed_event)
  if (event_case() == kVirtualChannelClosedEvent) {
    clear_has_event();
    auto* temp = _impl_.event_.virtual_channel_closed_event_;
    _impl_.event_.virtual_channel_closed_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_virtual_channel_closed_event(::dcv::extensions::VirtualChannelClosedEvent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_virtual_channel_closed_event();
    _impl_.event_.virtual_channel_closed_event_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Event.virtual_channel_closed_event)
}
inline ::dcv::extensions::VirtualChannelClosedEvent* Event::_internal_mutable_virtual_channel_closed_event() {
  if (event_case() != kVirtualChannelClosedEvent) {
    clear_event();
    set_has_virtual_channel_closed_event();
    _impl_.event_.virtual_channel_closed_event_ = CreateMaybeMessage<::dcv::extensions::VirtualChannelClosedEvent>(GetArena());
  }
  return _impl_.event_.virtual_channel_closed_event_;
}
inline ::dcv::extensions::VirtualChannelClosedEvent* Event::mutable_virtual_channel_closed_event() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::VirtualChannelClosedEvent* _msg = _internal_mutable_virtual_channel_closed_event();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Event.virtual_channel_closed_event)
  return _msg;
}

// .dcv.extensions.StreamingViewsChangedEvent streaming_views_changed_event = 30;
inline bool Event::has_streaming_views_changed_event() const {
  return event_case() == kStreamingViewsChangedEvent;
}
inline bool Event::_internal_has_streaming_views_changed_event() const {
  return event_case() == kStreamingViewsChangedEvent;
}
inline void Event::set_has_streaming_views_changed_event() {
  _impl_._oneof_case_[0] = kStreamingViewsChangedEvent;
}
inline void Event::clear_streaming_views_changed_event() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (event_case() == kStreamingViewsChangedEvent) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.streaming_views_changed_event_;
    }
    clear_has_event();
  }
}
inline ::dcv::extensions::StreamingViewsChangedEvent* Event::release_streaming_views_changed_event() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Event.streaming_views_changed_event)
  if (event_case() == kStreamingViewsChangedEvent) {
    clear_has_event();
    auto* temp = _impl_.event_.streaming_views_changed_event_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.streaming_views_changed_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::StreamingViewsChangedEvent& Event::_internal_streaming_views_changed_event() const {
  return event_case() == kStreamingViewsChangedEvent ? *_impl_.event_.streaming_views_changed_event_ : reinterpret_cast<::dcv::extensions::StreamingViewsChangedEvent&>(::dcv::extensions::_StreamingViewsChangedEvent_default_instance_);
}
inline const ::dcv::extensions::StreamingViewsChangedEvent& Event::streaming_views_changed_event() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.Event.streaming_views_changed_event)
  return _internal_streaming_views_changed_event();
}
inline ::dcv::extensions::StreamingViewsChangedEvent* Event::unsafe_arena_release_streaming_views_changed_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Event.streaming_views_changed_event)
  if (event_case() == kStreamingViewsChangedEvent) {
    clear_has_event();
    auto* temp = _impl_.event_.streaming_views_changed_event_;
    _impl_.event_.streaming_views_changed_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_streaming_views_changed_event(::dcv::extensions::StreamingViewsChangedEvent* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_streaming_views_changed_event();
    _impl_.event_.streaming_views_changed_event_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Event.streaming_views_changed_event)
}
inline ::dcv::extensions::StreamingViewsChangedEvent* Event::_internal_mutable_streaming_views_changed_event() {
  if (event_case() != kStreamingViewsChangedEvent) {
    clear_event();
    set_has_streaming_views_changed_event();
    _impl_.event_.streaming_views_changed_event_ = CreateMaybeMessage<::dcv::extensions::StreamingViewsChangedEvent>(GetArena());
  }
  return _impl_.event_.streaming_views_changed_event_;
}
inline ::dcv::extensions::StreamingViewsChangedEvent* Event::mutable_streaming_views_changed_event() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::StreamingViewsChangedEvent* _msg = _internal_mutable_streaming_views_changed_event();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Event.streaming_views_changed_event)
  return _msg;
}

inline bool Event::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void Event::clear_has_event() {
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}
inline Event::EventCase Event::event_case() const {
  return Event::EventCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExtensionMessage

// .dcv.extensions.Request request = 1;
inline bool ExtensionMessage::has_request() const {
  return msg_case() == kRequest;
}
inline bool ExtensionMessage::_internal_has_request() const {
  return msg_case() == kRequest;
}
inline void ExtensionMessage::set_has_request() {
  _impl_._oneof_case_[0] = kRequest;
}
inline void ExtensionMessage::clear_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_case() == kRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_.request_;
    }
    clear_has_msg();
  }
}
inline ::dcv::extensions::Request* ExtensionMessage::release_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.ExtensionMessage.request)
  if (msg_case() == kRequest) {
    clear_has_msg();
    auto* temp = _impl_.msg_.request_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::Request& ExtensionMessage::_internal_request() const {
  return msg_case() == kRequest ? *_impl_.msg_.request_ : reinterpret_cast<::dcv::extensions::Request&>(::dcv::extensions::_Request_default_instance_);
}
inline const ::dcv::extensions::Request& ExtensionMessage::request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.ExtensionMessage.request)
  return _internal_request();
}
inline ::dcv::extensions::Request* ExtensionMessage::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.ExtensionMessage.request)
  if (msg_case() == kRequest) {
    clear_has_msg();
    auto* temp = _impl_.msg_.request_;
    _impl_.msg_.request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExtensionMessage::unsafe_arena_set_allocated_request(::dcv::extensions::Request* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_msg();
  if (value) {
    set_has_request();
    _impl_.msg_.request_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.ExtensionMessage.request)
}
inline ::dcv::extensions::Request* ExtensionMessage::_internal_mutable_request() {
  if (msg_case() != kRequest) {
    clear_msg();
    set_has_request();
    _impl_.msg_.request_ = CreateMaybeMessage<::dcv::extensions::Request>(GetArena());
  }
  return _impl_.msg_.request_;
}
inline ::dcv::extensions::Request* ExtensionMessage::mutable_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::Request* _msg = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.ExtensionMessage.request)
  return _msg;
}

inline bool ExtensionMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void ExtensionMessage::clear_has_msg() {
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}
inline ExtensionMessage::MsgCase ExtensionMessage::msg_case() const {
  return ExtensionMessage::MsgCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// DcvMessage

// .dcv.extensions.Response response = 2;
inline bool DcvMessage::has_response() const {
  return msg_case() == kResponse;
}
inline bool DcvMessage::_internal_has_response() const {
  return msg_case() == kResponse;
}
inline void DcvMessage::set_has_response() {
  _impl_._oneof_case_[0] = kResponse;
}
inline void DcvMessage::clear_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_case() == kResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_.response_;
    }
    clear_has_msg();
  }
}
inline ::dcv::extensions::Response* DcvMessage::release_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.DcvMessage.response)
  if (msg_case() == kResponse) {
    clear_has_msg();
    auto* temp = _impl_.msg_.response_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::Response& DcvMessage::_internal_response() const {
  return msg_case() == kResponse ? *_impl_.msg_.response_ : reinterpret_cast<::dcv::extensions::Response&>(::dcv::extensions::_Response_default_instance_);
}
inline const ::dcv::extensions::Response& DcvMessage::response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.DcvMessage.response)
  return _internal_response();
}
inline ::dcv::extensions::Response* DcvMessage::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.DcvMessage.response)
  if (msg_case() == kResponse) {
    clear_has_msg();
    auto* temp = _impl_.msg_.response_;
    _impl_.msg_.response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DcvMessage::unsafe_arena_set_allocated_response(::dcv::extensions::Response* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_msg();
  if (value) {
    set_has_response();
    _impl_.msg_.response_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.DcvMessage.response)
}
inline ::dcv::extensions::Response* DcvMessage::_internal_mutable_response() {
  if (msg_case() != kResponse) {
    clear_msg();
    set_has_response();
    _impl_.msg_.response_ = CreateMaybeMessage<::dcv::extensions::Response>(GetArena());
  }
  return _impl_.msg_.response_;
}
inline ::dcv::extensions::Response* DcvMessage::mutable_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.DcvMessage.response)
  return _msg;
}

// .dcv.extensions.Event event = 3;
inline bool DcvMessage::has_event() const {
  return msg_case() == kEvent;
}
inline bool DcvMessage::_internal_has_event() const {
  return msg_case() == kEvent;
}
inline void DcvMessage::set_has_event() {
  _impl_._oneof_case_[0] = kEvent;
}
inline void DcvMessage::clear_event() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (msg_case() == kEvent) {
    if (GetArena() == nullptr) {
      delete _impl_.msg_.event_;
    }
    clear_has_msg();
  }
}
inline ::dcv::extensions::Event* DcvMessage::release_event() {
  // @@protoc_insertion_point(field_release:dcv.extensions.DcvMessage.event)
  if (msg_case() == kEvent) {
    clear_has_msg();
    auto* temp = _impl_.msg_.event_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.msg_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::Event& DcvMessage::_internal_event() const {
  return msg_case() == kEvent ? *_impl_.msg_.event_ : reinterpret_cast<::dcv::extensions::Event&>(::dcv::extensions::_Event_default_instance_);
}
inline const ::dcv::extensions::Event& DcvMessage::event() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:dcv.extensions.DcvMessage.event)
  return _internal_event();
}
inline ::dcv::extensions::Event* DcvMessage::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.DcvMessage.event)
  if (msg_case() == kEvent) {
    clear_has_msg();
    auto* temp = _impl_.msg_.event_;
    _impl_.msg_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DcvMessage::unsafe_arena_set_allocated_event(::dcv::extensions::Event* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_msg();
  if (value) {
    set_has_event();
    _impl_.msg_.event_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.DcvMessage.event)
}
inline ::dcv::extensions::Event* DcvMessage::_internal_mutable_event() {
  if (msg_case() != kEvent) {
    clear_msg();
    set_has_event();
    _impl_.msg_.event_ = CreateMaybeMessage<::dcv::extensions::Event>(GetArena());
  }
  return _impl_.msg_.event_;
}
inline ::dcv::extensions::Event* DcvMessage::mutable_event() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::dcv::extensions::Event* _msg = _internal_mutable_event();
  // @@protoc_insertion_point(field_mutable:dcv.extensions.DcvMessage.event)
  return _msg;
}

inline bool DcvMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void DcvMessage::clear_has_msg() {
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}
inline DcvMessage::MsgCase DcvMessage::msg_case() const {
  return DcvMessage::MsgCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace extensions
}  // namespace dcv


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::dcv::extensions::GetDcvInfoResponse_DcvRole> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::dcv::extensions::GetDcvInfoResponse_DcvRole>() {
  return ::dcv::extensions::GetDcvInfoResponse_DcvRole_descriptor();
}
template <>
struct is_proto_enum<::dcv::extensions::Response_Status> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::dcv::extensions::Response_Status>() {
  return ::dcv::extensions::Response_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_extensions_2eproto_2epb_2eh
